#東方弾幕風
#Title[Meirin - ラストスペル]
#Text[ステージ1A ボス
紅 美鈴


下記以外のスタート＝Normal
ユーザー＋スタート＝Hard
ｽｷｯﾌﾟ＋ﾕｰｻﾞｰ＋ｽﾀｰﾄ＝Lunatic]
#Image[]
#BackGround[Default]
#Player[FREE]
#ScriptVersion[2]

script_enemy_main{

	// 共通関数読み込み
	#include_function ".\INCLUDE\Enemy.dnh"

	// 画像及び効果音ファイル
	let imgBoss=dotBossMeirin;

	// 難易度
	Debug_SetLevel;
	let Lv=GetCommonDataDefault("Level",0);
	if(Lv==0){Lv=1;}
	Lv--;

	// -------------------------------------------------------------------------
	@Initialize{

		// 画像及び効果音をロード
		LoadGraphic(imgBoss);

		// スペルカード設定（カード名、スコア、制限時間、弾削除範囲等）
		SetTimer(64);
		SetShotAutoDeleteClip(64,64,64,64);
		SetEnemyMarker(true);
		LastSpell;

		// ボスステータス設定（ライフ、ダメージ率等）
		SetLife(500);
		SetDamageRate(15,0);
		SetX(cenX);
		SetY(minY+120+RandBlur(1));
		LastSpellEffect(120);

		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		// 当たり判定（自弾,体当たり）
		if(m_nEnemyAlpha>0){Collision(32,24);}

		// カウンタ加算
		m_nCount++;

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		SetInvincibility(242);
		_Wait(122);
		SetText("＊符「＊＊＊」");
		SetScore(100000);
		_Wait(120);

		let assign=1;

		loop{

			// 扇状サークル弾
			WideCircleShot(assign);
			_Wait(210);

			// 移動
			move(90);
			_Wait(90);

			assign*=-1;

		}

	}

	// 扇状サークル弾 ----------------------------------------------------------
	task WideCircleShot(let assign){

		let way=7;
		let fr=20;
		if(Lv==2){
			way=14;
			fr=10;
		}
		let baseAngle=GetAngleToPlayer-90*assign;
		let wayAngle=180/(way-1)*assign;
		let graphic=[RED23,ORANGE23,YELLOW23,GREEN23,AQUA23,BLUE23,PURPLE23];

		ascent(let i in 0 .. way){
			let angle=baseAngle+wayAngle*i;
			CircleShot(angle,graphic[i%7]);
			_Wait(fr);
		}

	}

	// サークル弾 --------------------------------------------------------------
	task CircleShot(let gravAngle, let graphic){

		let way=[32,44,24];
		let speed=1.5;
		let baseAngle=-90;
		let wayAngle=360/way[Lv];
		let gravSpeed=0.01;
		let delay=10;

		SetShotDirectionType(ABSOLUTE);
		ascent(let i in 0 .. way[Lv]){
			let angle=baseAngle+wayAngle*i;
			GravityShot(GetX,GetY,speed,angle,gravSpeed,gravAngle,graphic,delay);
		}

	}

	// 移動 --------------------------------------------------------------------
	function move(let fr){

		let x=GetX;
		let y=GetY;
		let mx=rand(40,80);
		let my=rand(0,20);
		if(x>=GetPlayerX){
			if(x-mx>=minX+80){mx=-mx;}
		}
		else{
			if(x+mx>=maxX-80){mx=-mx;}
		}
		if(y>=minY+120){my=-my;}
		x+=mx;
		y+=my;
		let power=GetGapLength(GetX,GetY,x,y)*2;
		let angle=GetGapAngle(GetX,GetY,x,y);
		SetMovePositionHermite(x,y,power,angle,0,0,fr);

	}

	// -------------------------------------------------------------------------
	@Finalize{

		// ロードしたファイルを削除
		DeleteGraphic(imgBoss);

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// ボス描画
		let x=0;
		let y=0;
		let sLength=128;
		SetAlpha(m_nEnemyAlpha);
		SetColor(255,255,255);
		_DrawChrRectSqr(imgBoss,GetX,GetY,x,y,sLength);

	}

}
