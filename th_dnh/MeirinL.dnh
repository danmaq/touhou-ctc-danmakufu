#東方弾幕風
#Title[Meirin - ラストスペル]
#Text[ステージ1A ボス
紅 美鈴


下記以外のスタート＝Normal
ユーザー＋スタート＝Hard
ｽｷｯﾌﾟ＋ﾕｰｻﾞｰ＋ｽﾀｰﾄ＝Lunatic]
#Image[]
#BackGround[Default]
#Player[FREE]
#ScriptVersion[2]

script_enemy_main{

	// 画像及び効果音ファイル
	#include_function ".\IMAGE\CHAR\index.dnh"
	let imgBoss=dotBossSample;

	// 座標設定
	let cenX=GetCenterX;
	let cenY=GetCenterY;
	let minX=GetClipMinX;
	let maxX=GetClipMaxX;
	let minY=GetClipMinY;
	let maxY=GetClipMaxY;

	// 難易度
	Debug_SetLevel;
	let Lv=GetCommonDataDefault("Level",0);
	if(Lv==0){Lv=1;}
	Lv--;

	let alpha=0;

	// -------------------------------------------------------------------------
	@Initialize{

		// 画像及び効果音をロード
		LoadGraphic(imgBoss);

		// スペルカード設定（カード名、スコア、制限時間、弾削除範囲等）
		SetTimer(64);
		SetShotAutoDeleteClip(64,64,64,64);
		SetEnemyMarker(true);
		LastSpell;

		// ボスステータス設定（ライフ、ダメージ率Shot%,Bomb%等）
		SetLife(500);
		SetDamageRate(15,0);
		SetX(cenX);
		SetY(minY+120+rand(-1,1));
		LastSpellEffect(120,500);

		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		// 当たり判定（A:自弾,B:体当たり）
		if(alpha>0){
			SetCollisionA(GetX,GetY,32);
			SetCollisionB(GetX,GetY,24);
		}

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		SetInvincibility(242);
		wait(122);

		// フェードイン
		FadeIn(60);
		SetText("＊符「＊＊＊」");
		SetScore(100000);
		wait(120);

		let assign=1;

		loop{

			// 扇状サークル弾
			WideCircleShot(assign);
			wait(210);

			// 移動
			move(90);
			wait(90);

			assign*=-1;

		}

	}

	// 扇状サークル弾 ----------------------------------------------------------
	task WideCircleShot(let assign){

		let way=7;
		let fr=20;
		if(Lv==2){
			way=14;
			fr=10;
		}
		let baseAngle=GetAngleToPlayer-90*assign;
		let wayAngle=180/(way-1)*assign;
		let graphic=[RED23,ORANGE23,YELLOW23,GREEN23,AQUA23,BLUE23,PURPLE23];

		ascent(let i in 0 .. way){
			let angle=baseAngle+wayAngle*i;
			CircleShot(angle,graphic[i%7]);
			wait(fr);
		}

	}

	// サークル弾 --------------------------------------------------------------
	task CircleShot(
		let gravAngle,
		let graphic
	){

		let way=[32,44,24];
		let speed=1.5;
		let baseAngle=-90;
		let wayAngle=360/way[Lv];
		let gravSpeed=0.01;
		let delay=10;

		SetShotDirectionType(ABSOLUTE);
		ascent(let i in 0 .. way[Lv]){
			let angle=baseAngle+wayAngle*i;
			GravityShot(GetX,GetY,speed,angle,gravSpeed,gravAngle,graphic,delay);
		}

	}

	// 移動 --------------------------------------------------------------------
	function move(let fr){

		let x=GetX;
		let mx=rand(40,80);
		if(x<GetPlayerX){
			if(x+mx>maxX-80){x-=mx;}
			else{x+=mx;}
		}
		else{
			if(x-mx<minX+80){x+=mx;}
			else{x-=mx;}
		}
		let y=GetY;
		let my=rand(0,20);
		if(y<minY+120){y+=my;}
		else{y-=my;}
		let power=GetGapLength(GetX,GetY,x,y)*2;
		let angle=GetGapAngle(GetX,GetY,x,y);
		SetMovePositionHermite(x,y,power,angle,0,0,fr);

	}

	// ラストスペルエフェクト --------------------------------------------------
	task LastSpellEffect(
		let fr,
		let maxLife
	){

		let disLife=maxLife-1;
		if(disLife>0){AddLife(-disLife);}
		Concentration01(fr);
		wait(fr);
		if(disLife>0){
			fr=60;
			let addLife=maxLife/fr;
			loop(fr){
				AddLife(addLife);
				yield;
			}
		}

	}

	// フェードイン ------------------------------------------------------------
	task FadeIn(let fr){

		let addAlpha=255/fr;
		loop(fr){
			alpha+=addAlpha;
			yield;
		}

	}

	// 待ち --------------------------------------------------------------------
	function wait(let fr){

		loop(fr){yield;}

	}

	// -------------------------------------------------------------------------
	@Finalize{

		// ロードしたファイルを削除
		DeleteGraphic(imgBoss);

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// ボス描画
		SetTexture(imgBoss);
		if(GetSpeed==0){SetGraphicRect(1,1,64,64);}
		else if(GetAngle>-90&&GetAngle<=90){SetGraphicRect(192,1,255,64);}
		else {SetGraphicRect(128,1,191,64);}
		SetAlpha(alpha);
		SetColor(255,255,255);
		DrawGraphic(GetX,GetY);

	}

	// 共通関数読み込み
	#include_function ".\INCLUDE\patternShot.dnh"
	#include_function ".\INCLUDE\library_request.dnh"

}
