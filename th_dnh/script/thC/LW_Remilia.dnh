//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ラストワード　レミリア・スカーレット
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Remilia - ラストワード]
#Text[ラストワード
レミリア・スカーレット]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Remilia.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 0;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** 追尾するか */
	let m_bHorming = false;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		SetPosition( m_nPracticeX, m_nPracticeY );
		SetTimer( 83 );
		SetLife( 500 );
		SetDamageRate( 2, 0 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND4 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KOUMA + CL_TTH_CHARACTER_NAME_KOUMA_REMILIA;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, false );
		__Wait( 55 );

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_LASTWORD + CL_TTH_SPELL_LW_REMILIA;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );

		/** 追尾移動 */
		HormingMove();
		SetDamageRateDelay( 12.5, 0, 300 );
		SetDamageRateDelay( 25, 0, 1500 );

		loop{

			/** 消滅＋使い魔召喚 */
			SetAction( ACT_SHOT_A5, 150 );
			PlaySEEx( sePower );
			SetColor( 255, 63, 63 );
			Concentration01( 120 );
			SetColor( 255, 255, 255 );
			__Wait( 120 );
			Explosion01( GetX(), GetY(), 255 / 60, 0.2, 60 );
			SummonShadow( 0 );
			Vanish( 300 );
			__Wait( 180 );
			PlaySEEx( sePower );
			SetColor( 255, 63, 63 );
			Concentration01( 120 );
			SetColor( 255, 255, 255 );
			SummonShadow( 1 );
			__Wait( 120 );

			/** 全方向直線弾 */
			RoundLineShotEx();
			__Wait( 180 );

		}

	}

	/**
	*	使い魔召喚
	*	@param nMode	モード 0:拡散 1:収束
	*/
	task SummonShadow( let nMode ){

		if( nMode == 0 ){

			/** 使い魔（本命＋ダミー）召喚 */
			_SummonShadow();
			CreateShotFromScript( "_Shadow", CL_CEN_X, CL_MIN_Y - 1000, 0, 0, 0, nMode );
			__Wait( 60 );
			m_bHorming = true;

		}
		else{

			/** 使い魔（ダミー）召喚 */
			m_bHorming = false;
			CreateShotFromScript( "_Shadow", CL_CEN_X, CL_MIN_Y - 1000, 0, 0, 0, nMode );

		}

	}

	/**
	*	使い魔（本命）召喚
	*/
	task _SummonShadow{

		let nFrame = 8;
		let nNum = 8;
		let anSort = CreateMixOrderArray( nNum );
		let _anSort = CreateMixOrderArray( nNum );
		let nX = GetX();
		let nY = GetY();
		let nNumAngle = 360 / nNum;
		let nBaseAngle = GetAngleToPlayer() + nNumAngle / 2;
		let nBaseMineAngle = rand( 0, 360 );

		ascent( let i in 0 .. nNum ){
			let nAngle = nBaseAngle + nNumAngle * anSort[ i ];
			let nMineAngle = nBaseMineAngle + nNumAngle * _anSort[ i ];
			CreateShotFromScript( "Shadow", nX, nY, 0, nAngle, 0, nMineAngle );
			PlaySEEx( seShadow );
			__Wait( nFrame );
		}

	}

	/**
	*	全方向直線弾
	*/
	task RoundLineShotEx{

		let nSpeed = 2;
		let nMaxSpeed = 5;
		let nAngle = GetAngleToPlayer();
		let nWay = 20;
		let nNum = 5;
		let nGraphic = US_BALL_L_RED;

		SetAction( ACT_SHOT_B3, 45 );
		PlaySEEx( seKira1 );
		_RoundLineShot( GetX(), GetY(), nSpeed, nMaxSpeed, nAngle, nWay, nNum, nGraphic, 0 );

	}

	/**
	*	追尾移動
	*/
	task HormingMove{

		loop{
			while( m_bHorming ){
				SetMovePosition02( GetPlayerX(), GetPlayerY(), 60 );
				yield;
			}
			SetSpeed( 0 );
			while( !m_bHorming ){ yield; }
		}

	}

	/**
	*	消滅
	*	@param nFrame	消滅フレーム数
	*/
	task Vanish( let nFrame ){

		m_nEnemyAlpha = 0;
		let nColA = FLAN_ENEMY_COLLISION_A;
		let nColB = FLAN_ENEMY_COLLISION_B;
		FLAN_ENEMY_COLLISION_A = 0;
		FLAN_ENEMY_COLLISION_B = 0;
		__Wait( nFrame );

		m_nEnemyAlpha = 255;
		FLAN_ENEMY_COLLISION_A = nColA;
		FLAN_ENEMY_COLLISION_B = nColB;

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	使い魔（本命）
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_shot Shadow{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shot.dnh"
	#include_function ".\INCLUDE\ShadowAnimation.dnh"


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = true;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** 機雷弾角度 */
	let m_nMineAngle;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		m_bShadow = true;
		m_bShadowLighting = false;
		m_nMineAngle = nArgv;
		BehaviorShadow( CHAR_SHADOW_BAT );

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 使い魔描画 */
		let nShadowImage = SHADOW_IMAGE_6S;
		let nShadowColor = SHADOW_COLOR_WHITE;
		let nAngle = 2 * m_nFlanCount;
		let nScale = 0.8;
		DrawShadowEx( nShadowImage, nShadowColor, nAngle, nScale );
		__DrawShadowChar( GetX(), GetY() + 8 * sin( 8 * m_nFlanCount ), 0, 1.5 );

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 誘導設定 */
		SetHorming();

		/** 速度設定 */
		_SetSpeed();

		/** 機雷弾 */
		MineShot();
		loop( 240 ){ yield; }

		FLAN_ESS_NOGONE = false;

	}

	/**
	*	機雷弾
	*/
	task MineShot{

		let nFrame = 5;
		let nSpeed = 0.8;
		let nAccelSpeed = nSpeed / 90;
		let nAddAngle = 90 / 120;
		let anGraphic = [ US_BALL_S_R_RED, US_BALL_S_RED ];
		let nMoveFrame = 240;
		let nDelay = 8;

		loop{
			CreateShotA( 0, GetX(), GetY(), nDelay );
			SetShotDataA( 0, 0, 0, m_nMineAngle, 0, 0, 0, anGraphic[ 0 ] );
			SetShotDataA( 0, nMoveFrame, 0, NULL, 0, nAccelSpeed, nSpeed, anGraphic[ 1 ] );
			FireShot( 0 );
			loop( nFrame ){ yield; }
			m_nMineAngle += nAddAngle * nFrame;
		}

	}

	/**
	*	誘導設定
	*/
	task SetHorming{

		let nAddAngle = 1.5;
		loop( 180 ){
			let nAngle = GetAngle();
			if( nAngle >= 360 ){ nAngle %= 360; }
			while( nAngle < 0 ){ nAngle += 360; }
			let nPlayerAngle = GetAngleToPlayer();
			if( nPlayerAngle >= 360 ){ nPlayerAngle %= 360; }
			while( nPlayerAngle < 0 ){ nPlayerAngle += 360; }
			let nDiffAngle = nPlayerAngle - nAngle;
			if( ( nDiffAngle > 0 && nDiffAngle <= 180 ) || nDiffAngle <= - 180 ){ nAngle += nAddAngle; }
			else if( nDiffAngle > 180 || ( nDiffAngle < 0 && nDiffAngle > - 180 ) ){ nAngle -= nAddAngle; }
			SetAngle( nAngle );
			yield;
		}

	}


	/**
	*	速度設定
	*/
	task _SetSpeed{

		let anFrame = [ 60, 150 ];
		let anSpeed = [ 4, 1, 8 ];
		let nSpeed = anSpeed[ 0 ];

		ascent( let i in 0 .. 2 ){
			let nAccelSpeed = ( anSpeed[ i + 1 ] - anSpeed[ i ] ) / anFrame[ i ];
			loop( anFrame[ i ] ){
				nSpeed += nAccelSpeed;
				SetSpeed( nSpeed );
				yield;
			}
		}

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	使い魔（ダミー）
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_shot _Shadow{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shot.dnh"
	#include_function ".\INCLUDE\ShadowAnimation.dnh"


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = true;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** モード 0:拡散 1:収束 */
	let m_nMode;

	/** 使い魔位置配列 */
	let m_anX = [];
	let m_anY = [];
	let m_anAddX = [];
	let m_anAddY = [];


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		m_nMode = nArgv;
		BehaviorShadow( CHAR_SHADOW_BAT );

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 使い魔描画 */
		_DrawShadowEx();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 拡散 or 収束 */
		if( m_nMode == 0 ){ Spread(); }
		else{ Converge(); }

		/** 移動 */
		Move();

		/** 収束モードの場合 */
		if( m_nMode == 1 ){
			let nX = GetX();
			let nY = GetY();
			let nSpeed = GetSpeed();
			let nAngle = GetAngle();
			let nSpeedX = nSpeed * cos( nAngle );
			let nSpeedY = nSpeed * sin( nAngle );
			let nFrame = trunc( 600 / nSpeed );
			SetSpeed( 0 );
			loop( nFrame ){
				nX += nSpeedX;
				nY += nSpeedY;
				SetPosition( nX, nY );
				yield;
			}
			End();
		}

	}

	/**
	*	拡散
	*/
	task Spread{

		let nX = GetEnemyX();
		let nY = GetEnemyY();
		let nGapLength = 600;
		let nNum = 60;
		let nCount = 120;

		loop( nNum ){
			let nSpeed = nGapLength / nCount + rand( 0, 3 );
			let nAngle = rand( 0, 360 );
			m_anX = m_anX ~ [ nX ];
			m_anY = m_anY ~ [ nY ];
			m_anAddX = m_anAddX ~ [ nSpeed * cos( nAngle ) ];
			m_anAddY = m_anAddY ~ [ nSpeed * sin( nAngle ) ];
			yield;
			nCount --;
		}

	}

	/**
	*	収束
	*/
	task Converge{

		let nX = GetEnemyX();
		let nY = GetEnemyY();
		let nGapLength = 600;
		let nNum = 60;
		let nCount = 120;

		loop( nNum ){
			let nSpeed = nGapLength / nCount + rand( 0, 3 );
			let nGapAngle = rand( 0, 360 );
			m_anX = m_anX ~ [ GetGapX( nX, nGapLength, nGapAngle ) ];
			m_anY = m_anY ~ [ GetGapY( nY, nGapLength, nGapAngle ) ];
			m_anAddX = m_anAddX ~ [ nSpeed * cos( nGapAngle - 180 ) ];
			m_anAddY = m_anAddY ~ [ nSpeed * sin( nGapAngle - 180 ) ];
			yield;
			nCount --;
		}

	}

	/**
	*	移動
	*/
	task Move{

		loop{

			let nNum = length( m_anX );
			if( nNum == 0 ){ break; }

			/** 移動 */
			ascent( let i in 0 .. nNum ){
				m_anX[ i ] = m_anX[ i ] + m_anAddX[ i ];
				m_anY[ i ] = m_anY[ i ] + m_anAddY[ i ];
			}

			/** 消滅判定 */
			if( m_nMode == 0 ){
				descent( let i in 0 .. nNum ){
					if( IsOutPos( m_anX[ i ], m_anY[ i ], 32 ) ){
						m_anX = erase( m_anX, i );
						m_anY = erase( m_anY, i );
						m_anAddX = erase( m_anAddX, i );
						m_anAddY = erase( m_anAddY, i );
					}
				}
			}
			else{
				let nX = GetEnemyX();
				let nY = GetEnemyY();
				descent( let i in 0 .. nNum ){
					if( GetGapLength( nX, nY, m_anX[ i ], m_anY[ i ] ) < 24 ){
						m_anX = erase( m_anX, i );
						m_anY = erase( m_anY, i );
						m_anAddX = erase( m_anAddX, i );
						m_anAddY = erase( m_anAddY, i );
					}
				}
			}

			yield;

		}

		End();

	}

	/**
	*	使い魔描画（配列対応）
	*/
	function _DrawShadowEx{

		ascent( let i in 0 .. length( m_anX ) ){
			__DrawShadowChar( m_anX[ i ], m_anY[ i ], 0, 1.5 );
		}

	}

}
