//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ1D　ボス　魅魔　スペル2
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[MimaB - スペル2]
#Text[ステージ1D ボス
魅魔]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Mima.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** ダメージ率（スペルプラクティス及び単体テスト時に固くする） */
	let m_nDamageRate = 1;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		m_bDeadEffect = true;
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
			m_nDamageRate = 0.8;
		}
		else if( m_bStagePractice ){ m_nDamageRate = 0.8; }
		SetTimer( 50 );
		SetLife( 400 );
		SetDamageRate( 5 * m_nDamageRate, 5 * m_nDamageRate );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_LOTUS + CL_TTH_CHARACTER_NAME_LOTUS_MIMA;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){
			if( IsTryLastSpell() ){ DropItemTHC( 10 ); }
		}

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 55 );
		if( m_bDead ){ break; }

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_LOTUS + CL_TTH_SPELL_STAGE1_BOSS_2 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );
		if( m_bDead ){ break; }

		loop{

			/** 扇状反射弾 */
			let nFrame = 420;
			if( m_nLevel == 0 ){ nFrame -= 78; }
			SetAction( ACT_SHOT_A4, nFrame );
			PlaySEEx( sePower );
			Concentration01( 120 );
			__Wait( 120 );
			if( m_bDead ){ break; }
			WideReflectShotEx();
			__Wait( 300 );
			if( m_bDead ){ break; }

			/** 移動 */
			Move( 60 );
			__Wait( 60 );
			if( m_bDead ){ break; }
			SetDamageRate( 17 * m_nDamageRate, 17 * m_nDamageRate );

		}

	}

	/**
	*	扇状反射弾
	*/
	task WideReflectShotEx{

		let nFrame = 6;
		let nNum = trunc( 120 / nFrame );
		let nWay = 8;
		let nX = GetX();
		let nY = GetY();
		let nWideAngle = 140;
		let nWayAngle = nWideAngle / ( nWay - 1 );
		let nAngle = GetGapAngle( nX, nY, GetPlayerX(), CL_MAX_Y ) - nWideAngle / 2;

		/** ワインド停止 */
		let bReflect = false;
		if( m_nLevel == 3 ){ bReflect = true; }
		loop( nNum ){
			let _nAngle = nAngle;
			loop( nWay ){
				ReflectShotEx( nX, nY, _nAngle, bReflect );
				_nAngle += nWayAngle;
			}
			PlaySEEx( seShot1 );
			__Wait( nFrame );
			if( m_bDead ){ break; }
		}
		if( m_bDead ){ break; }

		/** ワインド */
		let nAssign = 1;
		if( GetPlayerX() < CL_CEN_X ){ nAssign = - 1; }
		bReflect = true;
		nNum = trunc( 78 / nFrame );
		let nAddAngle = [ 18, 18, 20, 22 ][ m_nLevel ] / nNum;
		loop( nNum ){
			nAngle += nAddAngle * nAssign;
			let _nAngle = nAngle;
			loop( nWay ){
				ReflectShotEx( nX, nY, _nAngle, bReflect );
				_nAngle += nWayAngle;
			}
			PlaySEEx( seShot1 );
			__Wait( nFrame );
			if( m_bDead ){ break; }
		}
		if( m_bDead ){ break; }

		/** ワインド返し */
		if( m_nLevel > 0 ){
			nAddAngle = [ 0, 0, 15, 22 ][ m_nLevel ] / nNum;
			loop( nNum ){
				nAngle -= nAddAngle * nAssign;
				let _nAngle = nAngle;
				loop( nWay ){
					ReflectShotEx( nX, nY, _nAngle, bReflect );
					_nAngle += nWayAngle;
				}
				PlaySEEx( seShot1 );
				__Wait( nFrame );
				if( m_bDead ){ break; }
			}
		}

	}

	/**
	*	反射弾
	*	@param _nX		弾源x座標
	*	@param _nY		弾源y座標
	*	@param nAngle	角度
	*	@param bReflect	上端で反射するか
	*/
	task ReflectShotEx( let _nX, let _nY, let nAngle, let bReflect ){

		let obj = Obj_Create( OBJ_SHOT );
		let nGapLength = 15;
		let nX = GetGapX( _nX, nGapLength, nAngle );
		let nY = GetGapY( _nY, nGapLength, nAngle );
		let nGraphic = US_STAR_M_BLUE;
		if( bReflect ){ nGraphic = US_STAR_M_PURPLE; }
		Obj_SetPosition( obj, nX, nY );
		Obj_SetSpeed( obj, 4.4 );
		Obj_SetAngle( obj, nAngle );
		ObjShot_SetDelay( obj, 10 );
		ObjShot_SetGraphic( obj, nGraphic );

		/** 下端到達待ち */
		while( !Obj_BeDeleted( obj ) ){
			if( Obj_GetY( obj ) >= CL_MAX_Y ){
				Obj_SetAngle( obj, - nAngle );
				break;
			}
			yield;
		}
		/** 上端到達待ち */
		if( bReflect ){
			while( !Obj_BeDeleted( obj ) ){
				if( Obj_GetY( obj ) <= CL_MIN_Y ){
					let nSpeed = 2.2 - 0.2 * m_nLevel;
					nAngle += RandBlur( 45 );
					nGraphic = US_STAR_M_GREEN;
					CreateShot01( Obj_GetX( obj ), Obj_GetY( obj ), nSpeed, nAngle, nGraphic, 0 );
					Obj_Delete( obj );
					break;
				}
				yield;
			}
		}

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}
