//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ3C　ボス　四季映姫・ヤマザナドゥ　スペル2
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////


#ScriptVersion[2]
#BackGround[User]
#Title[Eiki - スペル2]
#Text[ステージ3C ボス
四季映姫・ヤマザナドゥ]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Eiki.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 60;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 0;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		SetTimer( 65 );
		SetLife( 500 );
		SetDamageRate( 5, 5 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );
		CheckExplosion01Ex();

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KAEI + CL_TTH_CHARACTER_NAME_KAEI_EIKI;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){ DropItemTHC( 14 ); }

		/** 共通終了設定 */
		FinalizeBoss();

		/**	個別終了設定 */
		EndExplosion01Ex();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, false );
		__Wait( 55 );

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_KAEI + CL_TTH_SPELL_STAGE3_BOSS_2 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );

		/** 霊魂召喚 */
		SetAction( ACT_SHOT_B5, 180 );
		PlaySEEx( sePower );
		Concentration01( 120 );
		__Wait( 120 );
		SummonSpilit();
		__Wait( 200 );
		SetDamageRate( 12, 12 );

		loop{

			/** 扇状V弾 */
			WideVShot();
			__Wait( 100 );

		}

	}

	/**
	*	扇状V弾
	*/
	task WideVShot{

		let nWay = 3;
		let nX = GetX();
		let nY = GetY();
		let nWayAngle = 66;
		if( m_nLevel == 3 ){ nWayAngle += 12; }
		let nAngle = GetAngleToPlayer() - nWayAngle * ( nWay - 1 ) / 2;
		let nDelay = 30;

		SetAction( ACT_SHOT_A3, 60 );
		PlaySEDelay( seShot1, nDelay );
		loop( nWay ){
			VShot( nX, nY, nAngle, nDelay );
			nAngle += nWayAngle;
		}

	}

	/**
	*	V弾
	*	@param nX		弾源x座標
	*	@param nY		弾源y座標
	*	@param nAngle	角度
	*	@param nDelay	遅延フレーム数
	*/
	function VShot( let nX, let nY, let nAngle, let nDelay ){

		let nNum = 2 + m_nLevel;
		let nWay = 11;
		if( m_nLevel == 3 ){ nWay += 2; }
		let nNumWay = - 3;
		let nSpeed = 1.8;
		let nNumSpeed = 0.4;
		let nWayAngle = 6;
		let nGraphic = US_TABLET;

		loop( nNum ){
			let nWideAngle = nWayAngle * ( nWay - 1 );
			_WideShot01( nX, nY, nSpeed, nAngle, nWideAngle, nWay, nGraphic, nDelay );
			nSpeed += nNumSpeed;
			nWay += nNumWay;
		}

	}

	/**
	*	霊魂召喚
	*/
	function SummonSpilit{

		let nNum = 7;
		let nGapLength=65;
		let nNumGapLength = 52.5;
		let _nX = GetX();
		let _nY = GetY();
		let anGapAngle = [ 115, 65 ];
		let anBaseAngle = [ 150, 30 ];
		let nNumAngle = 50;
		let anAssign = [ - 1, 1 ];

		PlaySEEx( seShadow );
		ascent( let i in 0 .. nNum ){
			ascent( let j in 0 .. 2 ){
				let nX = GetGapX( _nX, nGapLength, anGapAngle[ j ] );
				let nY = GetGapY( _nY, nGapLength, anGapAngle[ j ] );
				let nAngle = anBaseAngle[ j ] + nNumAngle * i * anAssign[ j ];
				CreateShotFromScript( "Spilit", _nX, _nY, 0, nAngle, 0, [ nX, nY, anAssign[ j ] ] );
			}
			nGapLength += nNumGapLength;
		}

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	霊魂
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_shot Spilit{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shot.dnh"


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = true;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** レーザー角度 */
	let m_nAngle;

	/** レーザー源座標 */
	let m_nX;
	let m_nY;

	/** 割り振り係数 */
	let m_nAssign;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		m_bShadow = true;
		m_nShadowType = SHADOW_TYPE_SPILIT;
		m_bShadowDead = true;
		m_nAngle = GetAngle();
		m_nX = nArgv[ 0 ];
		m_nY = nArgv[ 1 ];
		m_nAssign = nArgv[ 2 ];
		CheckBossLife();

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 移動 */
		Move();
		loop( 60 ){ yield; }
		m_bShadowLighting = false;

		/** レーザー1（伸び） */
		PlaySEEx( seLaser1 );
		Laser1( 60, m_nX, m_nY, true );
		Laser1( 60, m_nX, m_nY, false );
		loop( 60 ){ yield; }
		PlaySEEx( seLaser1 );
		loop( 60 ){ yield; }

		let nDelay = 120 - 20 * m_nLevel;

		/** レーザー2（回転） */
		loop{
			Laser2( nDelay, m_nX, m_nY, true );
			Laser2( nDelay, m_nX, m_nY, false );
			loop( nDelay ){ yield; }
			PlaySEEx( seLaser1 );
			loop( 60 ){ yield; }
		}

	}

	/**
	*	レーザー1（伸び）
	*	@param nDelay	遅延フレーム数
	*	@param nX		レーザー源x座標
	*	@param nY		レーザー源y座標
	*	@param bReverse	逆方向か
	*/
	task Laser1( let nDelay, let nX, let nY, let bReverse ){

		let obj = Obj_Create( OBJ_LASER );
		let nAngle = m_nAngle;
		if( bReverse ){ nAngle += 180; }
		Obj_SetPosition( obj, nX, nY );
		Obj_SetAngle( obj, nAngle );
		ObjShot_SetDelay( obj, nDelay );
		ObjShot_SetGraphic( obj, US_BEAM_BLUE );
		ObjLaser_SetWidth( obj, 20 );
		ObjLaser_SetSource( obj, bReverse );

		/** 伸び */
		let nFrame = 60;
		let nLength = 0;
		let nAddLength = 600 / nFrame;
		loop( nFrame ){
			nLength += nAddLength;
			ObjLaser_SetLength( obj, nLength );
			yield;
		}
		loop( nDelay - nFrame ){ yield; }

		/** 球レーザー */
		BallLaser( nAngle );
		loop( 60 ){ yield; }
		Obj_Delete( obj );

	}

	/**
	*	レーザー2（回転）
	*	@param nDelay	遅延フレーム数
	*	@param nX		レーザー源x座標
	*	@param nY		レーザー源y座標
	*	@param bReverse	逆方向か
	*/
	task Laser2( let nDelay, let nX, let nY, let bReverse ){

		let obj = Obj_Create( OBJ_LASER );
		let nAngle = m_nAngle;
		if( bReverse ){ nAngle += 180; }
		Obj_SetPosition( obj, nX, nY );
		ObjShot_SetDelay( obj, nDelay );
		ObjShot_SetGraphic( obj, US_BEAM_BLUE );
		ObjLaser_SetLength( obj, 600 );
		ObjLaser_SetWidth( obj, 20 );
		ObjLaser_SetSource( obj, bReverse );

		/** 回転 */
		let nFrame = trunc( nDelay * 3 / 4 );
		let nAddAngle = 30 / nFrame * m_nAssign;
		loop( nFrame ){
			if( bReverse ){ m_nAngle += nAddAngle; }
			nAngle += nAddAngle;
			Obj_SetAngle( obj, nAngle );
			yield;
		}
		loop( nDelay - nFrame ){ yield; }

		/** 球レーザー */
		BallLaser( nAngle );
		loop( 60 ){ yield; }
		Obj_Delete( obj );

	}

	/**
	*	球レーザー
	*	@param nAngle	角度
	*/
	function BallLaser( let nAngle ){

		let nSpeed = 12;
		let nLength = 100;
		let nWidth = 32;
		let nGraphic = US_BALL_M_A_BLUE;
		CreateLaser01( GetX(), GetY(), nSpeed, nAngle, nLength, nWidth, nGraphic, 0 );

	}

	/**
	*	移動
	*/
	task Move{

		let nForce = 800;
		let nAngle = rand( 0, 180 );
		let _nForce = 300;
		let _nAngle = rand( 0, 360 );
		let nFrame = 59;
		SetMovePositionHermite( m_nX, m_nY, nForce, nAngle, _nForce, _nAngle, nFrame );
		loop( nFrame ){ yield; }
		SetMovePosition02( m_nX, m_nY, 1 );

	}

}
