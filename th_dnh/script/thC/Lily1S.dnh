//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ1C　中ボス　リリー・ホワイト　スペル1
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////
#ScriptVersion[2]
#BackGround[User]
#Title[Lily - スペル1]
#Text[ステージ1C 中ボス
リリー・ホワイト]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Lily.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 0;
	FLAN_ESS_NOCALL_MAINLOOP = false;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** ダメージ率（スペルプラクティス及び単体テスト時に固くする） */
	let m_nDamageRate = 1;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		m_nPracticeX = CL_CEN_X;
		m_nPracticeY = CL_MIN_Y - 1000;
		if( m_nLevel == 3 ){ m_nLevel = 1; }
		else{ m_nLevel = 0; }
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
			m_nDamageRate = 0.3;
		}
		else{
			CheckTimer();
			if( m_bStagePractice ){ m_nDamageRate = 0.3; }
		}
		SetTimer( 44 );
		SetLife( 150 );
		SetDamageRate( 5 * m_nDamageRate, 5 * m_nDamageRate );
		SetShotAutoDeleteClip( 64, 64, 64, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );
		CheckExplosion01Ex();

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KAEI + CL_TTH_CHARACTER_NAME_KAEI_LILY;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 当たり判定 */
		if( m_nWarpStatus != 2 ){
			FLAN_ENEMY_COLLISION_A = 32;
			FLAN_ENEMY_COLLISION_B = 16;
		}
		else{
			FLAN_ENEMY_COLLISION_A = 0;
			FLAN_ENEMY_COLLISION_B = 0;
		}

	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){ DropItemTHC( 6 ); }

		/** 共通終了設定 */
		FinalizeBoss();

		/** 個別終了設定 */
		EndExplosion01Ex();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		SetDrawDataLily();
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		Warp( 55, 4 );
		__Wait( 55 );

		/** スペルカード発動 */
		SetAction( ACT_SPELL3, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_KAEI + CL_TTH_SPELL_STAGE1_HALFWAY_1 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );

		/** 使い魔召喚 */
		SetAction( ACT_SHOT_B3, 120 );
		PlaySEEx( sePower );
		Concentration01( 120 );
		__Wait( 120 );
		SummonShadow();
		__Wait( 45 );
		SetDamageRate( 13.5 * m_nDamageRate, 13.5 * m_nDamageRate );
		PlaySELoop( seShot3, 6000, 6 );
		__Wait( 75 );
		SetAction( ACT_SHOT_A3_B, 6000 );

	}

	/**
	*	使い魔召喚
	*/
	function SummonShadow{

		let nX = GetX();
		let nY = GetY();
		let nGapLength = GetGapLength( nX, nY, CL_CEN_X, CL_CEN_Y );
		let nSpeed = nGapLength / 15;
		let nAngle = GetGapAngle( nX, nY, CL_CEN_X, CL_CEN_Y );
		CreateShotFromScript( "Shadow", nX, nY, nSpeed, nAngle, 0, 0 );
		PlaySEEx( seShadow );

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	使い魔
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_shot Shadow{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shot.dnh"


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = true;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** 回転ターン数 */
	let m_nTurn = 0;

	/** 使い魔番号 */
	let m_nNumber;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		if( m_nLevel == 3 ){ m_nLevel = 1; }
		else{ m_nLevel = 0; }
		m_bShadow = true;
		m_bShadowDead = true;
		m_nNumber = nArgv;
		CheckBossLife();

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 魔法陣描画 */
		let nShadowImage = SHADOW_IMAGE_6S;
		let nShadowColor = SHADOW_COLOR_WHITE;
		let nAngle = 2 * m_nFlanCount;
		let nScale = 0.8;
		DrawShadowEx( nShadowImage, nShadowColor, nAngle, nScale );

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		if( nArgv == 0 ){

			/** 初期移動 */
			loop( 15 ){ yield; }
			SetSpeed( 0 );

			/** 使い魔召喚 */
			ascent( let i in 1 .. 2 + m_nLevel ){
				CreateShotFromScript( "Shadow", GetX(), GetY(), 0, GetAngle(), 0, i );
			}

		}

		/** 位置設定 */
		SetLocation();
		loop( 30 ){ yield; }

		let nAssign = 0;

		loop{

			/** ランダム落下弾 */
			RandomFallShot( nAssign );
			loop( 3 ){ yield; }

			nAssign = 1 - nAssign;

		}

	}

	/**
	*	ランダム落下弾
	*	@param nAssign	割り振り係数
	*/
	function RandomFallShot( let nAssign ){

		/** 直線軌道 */
		let nRandLength = 32;
		let nX = GetX() + RandBlur( nRandLength );
		let nY = GetY() + RandBlur( nRandLength );
		let _nX = GetEnemyX();
		let _nY = GetEnemyY();
		let nDelay = 30;
		let nSpeed = rand( 1, 2.4 );
		let nAngle = GetGapAngle( nX, nY, _nX, _nY ) + 180 * nAssign;
		let nGapLength = GetGapLength( nX, nY, _nX, _nY );
		let nFrame = trunc( nGapLength / nSpeed );
		let nGraphic = [ US_RICE_M_PURPLE, US_RICE_M_GREEN, US_RICE_M_ORANGE, US_RICE_M_WHITE ][ m_nTurn % 4 ];

		/** 重力軌道 */
		let nSpeedX = nSpeed * cos( nAngle );
		let nSpeedY = nSpeed * sin( nAngle );
		let nAddSpeedY = 0.01;

		CreateShotA( 0, nX, nY, nDelay );
		SetShotDataA( 0, 0, nSpeed, nAngle, 0, 0, 0, nGraphic );
		SetShotDataA_XY( 0, nFrame, nSpeedX, nSpeedY, 0, nAddSpeedY, 0, 99, nGraphic );
		FireShot( 0 );

	}

	/**
	*	位置設定
	*/
	task SetLocation{

		let nGapLength = 0;
		let nGapAngle = 360 / ( 2 + m_nLevel ) * m_nNumber;
		SetGapLength();
		SetGapAngle();

		/** 位置設定 */
		loop{
			let nX = GetGapX( CL_CEN_X, nGapLength, nGapAngle );
			let nY = GetGapY( CL_CEN_Y, nGapLength, nGapAngle );
			SetX( nX );
			SetY( nY );
			yield;
		}

		/** 間隔長さ設定 */
		task SetGapLength{
			let nFrame = 30;
			let nAddGapLength = 220 / nFrame;
			loop( nFrame ){
				nGapLength += nAddGapLength;
				yield;
			}
		}

		/** 間隔角度設定 */
		task SetGapAngle{
			let nFrame = 240;
			let nAddGapAngle = 360 / nFrame;
			loop{
				loop( nFrame ){
					nGapAngle += nAddGapAngle;
					yield;
				}
				m_nTurn ++;
			}
		}

	}

}
