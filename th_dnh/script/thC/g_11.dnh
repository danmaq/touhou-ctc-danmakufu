//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		STAGE 1a(妖精雑魚)
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	スクリプトここから
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	THCELをインクルード
//	(FLAN/THCELへのインクルードはTHCELが勝手にやってくれます)
//////////////////////////////////////////////////////////////////////

#include_function ".\INCLUDE\Zako.dnh"


//////////////////////////////////////////////////////////////////////
//	設定定義
//////////////////////////////////////////////////////////////////////

	/**	デフォルトアイテムの落下量を設定します。 */
	ENEMY_ITEMEX_NUM_DEFAULT = 3;
	/**	被弾判定の大きさを設定します。 */
	FLAN_ENEMY_COLLISION_A = 13;
	/**	接触判定の大きさを設定します。 */
	FLAN_ENEMY_COLLISION_B = 8;
	/**	onMainLoopへ処理をまわさないよう設定します。(まわしても何の処理も無い) */
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	定数宣言
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数宣言
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	固有動作実装部
//////////////////////////////////////////////////////////////////////

	/**
	*	敵の移動を管理するタスクです。
	*
	*	@param nLevel レベル(0〜3)
	*/
	task DoMove( let nLevel ){
		let spmax=GetSpeed();
		ascent(i in 0..50){
			SetSpeed(SlowDown( spmax , 0 , i , 50 ));
			yield;
		}
		__Wait(100);
		let XX=GetX+rand(-100,100);
		SetMovePositionHermite(XX,GetClipMinY()-50,6*(XX-GetX()),0,100,-90,200);
	}


//////////////////////////////////////////////////////////////////////
//	共通動作実装部
//////////////////////////////////////////////////////////////////////

	/**
	*	敵固有のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTask( let nArgv, let nLevel ){
		DoMove( nLevel );
		__Wait(30);
		let angle_b=-21;
		_WideLineShot(GetX(),GetY(),1.2,[1.8,2.5,3.5,4.2][nLevel],GetAngleToPlayer()+angle_b,[7,11,15,18][nLevel],[4,4,5,6][nLevel],[1,1,3,5][nLevel],US_RICE_S_RED,20);
		_WideLineShot(GetX(),GetY(),1.2,[1.8,2.5,3.5,4.2][nLevel],GetAngleToPlayer()-angle_b,[7,11,15,18][nLevel],[4,4,5,6][nLevel],[1,1,3,5][nLevel],US_RICE_S_RED,20);
		_WideLineShot(GetX(),GetY(),1.2,[1.8,2.5,3.5,4.2][nLevel],GetAngleToPlayer()+angle_b+180,[7,11,15,18][nLevel],[4,4,5,6][nLevel],[1,1,3,5][nLevel],US_RICE_S_RED,20);
		_WideLineShot(GetX(),GetY(),1.2,[1.8,2.5,3.5,4.2][nLevel],GetAngleToPlayer()-angle_b+180,[7,11,15,18][nLevel],[4,4,5,6][nLevel],[1,1,3,5][nLevel],US_RICE_S_RED,20);
		_RoundLineShot(GetX(),GetY(),1.2,[1.8,2.5,3.5,4.2][nLevel],GetAngleToPlayer(),[3,7,11,15][nLevel],[2,3,6,9][nLevel],US_RICE_S_RED,20);
		PlaySEEx(seShot2);
	}

	/**
	*	初期化時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( let nArgv, let nLevel ){
//		CreateDebugWindow();
		SetLife(13);
		SetInvincibility( 10 );
	}

	/**
	*	毎フレームごとに呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
		DropItemPoint(4);
	}

	/**
	*	絵画時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
		DarwZakoBack();
		DrawYousei(RECT_YOUSEI_BLUE);
	}

}
