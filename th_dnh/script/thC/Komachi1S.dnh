//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ3C　中ボス　小野塚 小町　スペル1
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////


#ScriptVersion[2]
#BackGround[User]
#Title[Komachi - スペル1]
#Text[ステージ3C 中ボス
小野塚 小町]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Komachi.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 0;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		else{ CheckTimer(); }
		SetTimer( 63 );
		SetLife( 500 );
		SetDamageRate( 5, 5 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );
		CheckExplosion01Ex();

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KAEI + CL_TTH_CHARACTER_NAME_KAEI_KOMACHI;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){
			DropItemTHC( 10 );
			DropItemExtendTHC();
		}

		/** 共通終了設定 */
		FinalizeBoss();

		/** 個別終了設定 */
		EndExplosion01Ex();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, false );
		__Wait( 55 );

		/** スペルカード発動 */
		SetAction( ACT_SPELL3, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_KAEI + CL_TTH_SPELL_STAGE3_HALFWAY_1 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );

		/** 霊魂召喚 */
		SetAction( ACT_SHOT_B3, 200 );
		PlaySEEx( sePower );
		Concentration01( 120 );
		__Wait( 120 );
		SetAction( ACT_SHOT_B3_B, 60 );
		SummonSpilit();
		__Wait( 120 );
		SetDamageRate( 13.5, 13.5 );

		let nTurn = 0;

		loop{

			/** 銭弾 */
			CoinShot( nTurn );
			__Wait( 90 );

			nTurn ++;

		}

	}

	/**
	*	銭弾
	*	@param nTurn	ターン数
	*/
	function CoinShot( let nTurn ){

		let nNum = [ 3, 5, 4, 9 ][ m_nLevel ];
		let nWay = [ 22, 24, 24, 30 ][ m_nLevel ];
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 2;
		let nNumSpeed = 0.35;
		let nAngle = GetAngleToPlayer();
		let anGraphic = [ US_COIN_ORANGE, US_COIN_WHITE, US_COIN_YELLOW ];
		let nDelay = 10;

		SetAction( ACT_SHOT_A3, 45 );
		PlaySEEx( seShot1 );
		loop( nNum ){
			_RoundShot01( nX, nY, nSpeed, nAngle, nWay, anGraphic[ nTurn % 3 ], nDelay );
			nSpeed += nNumSpeed;
		}

	}

	/**
	*	霊魂召喚
	*/
	task SummonSpilit{

		let nX = GetX();
		let nY = GetY();
		CreateShotFromScript( "Spilit", nX, nY, 0, 0, 0, 0 );
		if( m_nLevel >= 2 ){ CreateShotFromScript( "Spilit", nX, nY, 0, 0, 0, 1 ); }
		PlaySEEx( seShadow );

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	霊魂
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_shot Spilit{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shot.dnh"


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = true;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** 使い魔番号 */
	let m_nNumber;
	/** ボスからの間隔長さ */
	let m_nGapLength;
	/** ボスからの間隔角度 */
	let m_nGapAngle;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		m_bShadow = true;
		m_nShadowType = SHADOW_TYPE_SPILIT;
		m_bShadowDead = true;
		m_nNumber = nArgv;
		CheckBossLife();
		m_nNumber = nArgv;
		m_nGapLength = 60;
		m_nGapAngle = - 90 + 180 * m_nNumber;

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		Move();
		loop( 60 ){ yield; }

		/** 回転移動 */
		RollMove();

		/** 全方向弾 */
		RoundShotEx();

	}

	/**
	*	全方向弾
	*/
	task RoundShotEx{

		let nFrame = 2;
		if( m_nLevel >= 2 ){ nFrame = 3; }
		let nWay = 2;
		let nSpeed = [ 1.7, 2 ][ m_nNumber ];
		let nSpeedRatio = [ 1, 1.1, 1, 1.1 ][ m_nLevel ];
		let nAngle = m_nGapAngle;
		let nAddAngle = - 345 / 60;
		let nGraphic = US_FIRE_BLUE;

		PlaySELoop( seShot3, 6000, 6 );
		loop{
			let nX = GetX();
			let nY = GetY();
			let _nSpeed = nSpeed * nSpeedRatio;
			_RoundShot01( nX, nY, _nSpeed, nAngle, nWay, nGraphic, 0 );
			loop( nFrame ){ yield; }
			nAngle += nAddAngle * nFrame;
		}

	}

	/**
	*	回転移動
	*/
	task RollMove{

		_SetAngle();
		_SetLocation();

		/** 位置設定 */
		task _SetLocation{
			let _nX = GetEnemyX();
			let _nY = GetEnemyY();
			loop{
				let nX = GetGapX( _nX, m_nGapLength, m_nGapAngle );
				let nY = GetGapY( _nY, m_nGapLength, m_nGapAngle );
				SetPosition( nX, nY );
				yield;
			}
		}

		/** 間隔角度設定 */
		task _SetAngle{
			let nAddAngle = 360 / 60;
			loop{
				m_nGapAngle += nAddAngle;
				yield;
			}
		}

	}

	/**
	*	初期移動
	*/
	task Move{

		let _nX = GetEnemyX();
		let _nY = GetEnemyY();
		let _nGapLength = rand( 100, 120 );
		let _nGapAngle = 180 * m_nNumber;
		let nX = GetGapX( _nX, _nGapLength, _nGapAngle );
		let nY = GetGapY( _nY, _nGapLength, _nGapAngle );
		let nForce = 300;
		let nAngle = m_nGapAngle;
		let _nForce = 300;
		let _nAngle = 90 + 180 * m_nNumber;
		let nFrame = 30;
		SetMovePositionHermite( nX, nY, nForce, nAngle, _nForce, _nAngle, nFrame );
		loop( nFrame ){ yield; }

		nX = GetGapX( _nX, m_nGapLength, m_nGapAngle );
		nY = GetGapY( _nY, m_nGapLength, m_nGapAngle );
		nAngle = m_nGapAngle + 90;
		nFrame = 29;
		SetMovePositionHermite( nX, nY, _nForce, _nAngle, nForce, nAngle, nFrame );
		loop( nFrame ){ yield; }

		SetMovePosition02( nX, nY, 1 );

	}

}
