script_enemy_main{

	// 共通関数読み込み
	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\_index_UserShot.dnh"

	// 画像及び効果音ファイル
	let userShot=shotAll;
	let imgBoss=dotBossPatchouli;
	let imgCutIn=cutPatchouli;
	let imgFontList=[imgSystemFontSmall,imgSystemFont]~imgSystemFontSJIS16;
	let imgList=[imgBoss,imgCutIn];
	let seList=[];

	// 各種設定値（難易度等）
	let THC=GetCommonDataDefault(CD_THC_STAGE,false);
	let Practice=GetCommonDataDefault(CD_STAGE_PRACTICE,false); 
	Debug_SetLevel;
	let Lv=GetCommonDataDefault(CD_STAGE_LEVEL,0);

	// -------------------------------------------------------------------------
	@Initialize{

		// ボス初期設定（ファイルのロード他）
		if(!THC){
			LoadUserShotData(userShot);
			imgList=imgList~LOADBGLIST_PACHOULI~imgFontList;
			seList=seList~seListEnemy;
		}
		InitializeBoss(imgList,seList);

		// スペルカード設定
		SetTimer(63);
		SetLife(500);
		SetDamageRate(14,14);
		SetShotAutoDeleteClip(32,32,32,32);

		// ボス基本処理、メイン処理
		CountTimer(seTimeOut);
		BehaviorBoss(ACT_STAND3);
		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{
		m_nSpellBonus = GetSpellCardBonusScore();

		// 当たり判定（自弾,体当たり）
		Collision(32,24);

		// ダメージ音
		PlayDamageSE(seDamage);

		// カウンタ加算
		m_nCount++;

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		SetInvincibility(182);
		_Wait(2);

		// 初期移動
		let fr=45;
		let x=cenX;
		let y=minY+120+RandBlur(0.1);
		SetMovePosition02(x,y,fr);
		SetAction(ACT_MOVE,fr);
		_Wait(55);

		// スペルカード発動
		let spellName=[
			"火＆金符「ブルーミングブレイズ−Ｅａｓｙ−」",
			"火＆金符「ブルーミングブレイズ」",
			"火＆金符「ブルーミングブレイズ−Ｈａｒｄ−」",
			"火＆金符「ブルーミングブレイズ−Ｌｕｎａｔｉｃ−」"
		];
		CutInEnemy(spellName[Lv],imgCutIn,192,256);
		SetScore(100000);
		SetAction(ACT_SPELL5,0);
		_Wait(125);

		let turn=2*Lv;
		let maxTurn=turn+3;
		if(Lv>=2){maxTurn++;}

		loop{

			// 予告レーザー＋捻り扇状弾
			SetAction(ACT_SHOT_B5,150);
			Concentration01(60);
			RollWideShot(turn);
			_Wait(210);

			// 移動
			move(90);
			_Wait(90);

			if(turn<maxTurn){turn++;}

		}

	}

	// 予告レーザー＋捻り扇状弾 ------------------------------------------------
	task RollWideShot(let turn){

		let assign=1;
		if(turn%2==1){assign=-1;}
		let way=14+turn*2;
		let wayAngle=360/way;
		let baseAngle=GetAngleToPlayer-180;
		let graphic=US_BALL_M_A_WHITE;
		let count=0;
		let fr=2;

		// 予告レーザー
		PlaySE(seLaser1);
		ascent(let i in 0 .. way/2){
			let angle=baseAngle+wayAngle/2+wayAngle*i;
			SetShotColor(255,165,63);
			WarningLaser(angle,count,graphic);
			angle=baseAngle-wayAngle/2-wayAngle*i;
			SetShotColor(255,255,255);
			WarningLaser(angle,count,graphic);
			_Wait(fr);
			count+=fr;
		}
		_Wait(60-count);

		// 捻り扇状弾
		LoopPlaySE(seShot3,90,6);
		ascent(let i in 0 .. way){
			let angle=baseAngle+wayAngle/2+wayAngle*i;
			let assign=1;
			if(i>=way/2){assign=-1;}
			_RollWideShot(angle,assign);
		}

	}

	// 予告レーザー ------------------------------------------------------------
	task WarningLaser(let angle, let count, let graphic){

		// 初期設定 ----------------------------------------
		let obj=Obj_Create(OBJ_LASER);
		let x=GetX;
		let y=GetY;

		Obj_SetX(obj,x);
		Obj_SetY(obj,y);
		Obj_SetAngle(obj,angle);
		ObjShot_SetDelay(obj,180-count);
		ObjShot_SetGraphic(obj,graphic);
		ObjLaser_SetWidth(obj,30);
		ObjLaser_SetSource(obj,false);

		// メイン処理 --------------------------------------
		// 伸びる
		let fr=30;
		let Length=0;
		let addLength=500/fr;
		loop(fr){
			Length+=addLength;
			ObjLaser_SetLength(obj,Length);
			yield;
		}

		// 待つ
		fr=30-count;
		loop(fr){yield;}

		// 移動
		let addX=5*cos(angle);
		let addY=5*sin(angle);
		loop{
			if(Obj_BeDeleted(obj)){break;}
			x+=addX;
			y+=addY;
			Obj_SetX(obj,x);
			Obj_SetY(obj,y);
			yield;
		}

	}

	// 捻り扇状弾 --------------------------------------------------------------
	task _RollWideShot(let angle, let assign){

		// 初期設定 ----------------------------------------
		let obj=Obj_Create(OBJ_SHOT);
		let graphic=US_FIRE_RED;
		if(assign==-1){graphic=US_FIRE_BLUE;}

		Obj_SetX(obj,GetX);
		Obj_SetY(obj,GetY);
		Obj_SetSpeed(obj,5);
		Obj_SetAngle(obj,angle);
		ObjShot_SetGraphic(obj,graphic);

		// メイン処理 --------------------------------------
		let _speed=1.2;
		let _angle=angle-90;
		let addAngle=12.5*assign;
		let fr=5;

		while(!Obj_BeDeleted(obj)){
			CreateShot01(Obj_GetX(obj),Obj_GetY(obj),_speed,_angle,graphic,0);
			CreateShot01(Obj_GetX(obj),Obj_GetY(obj),_speed,_angle+180,graphic,0);
			_angle+=addAngle;
			loop(fr){yield;}
		}

	}

	// 移動 --------------------------------------------------------------------
	function move(let fr){

		let x=GetX;
		let y=GetY;
		let mx=rand(40,80);
		let my=rand(0,10);
		if(x>=GetPlayerX){
			if(x-mx>=minX+100){mx=-mx;}
		}
		else{
			if(x+mx>=maxX-100){mx=-mx;}
		}
		if(y>=minY+120){my=-my;}
		x+=mx;
		y+=my;
		let power=GetGapLength(GetX,GetY,x,y)*2;
		let angle=GetGapAngle(GetX,GetY,x,y);
		SetMovePositionHermite(x,y,power,angle,0,0,fr);
		SetAction(ACT_MOVE,fr);

	}

	// -------------------------------------------------------------------------
	@Finalize{

		// カットイン消去
		SetCommonData(CD_CUTIN_SPELL_END,true);

		// アイテム放出
		if(THC&&!Practice){DropItem(12,80);}

		// ロードしたファイルを削除
		DeleteGraphicList(imgList,seList);

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// ボス描画
		DrawBoss(imgBoss);
		DrawCutIn( m_nCount );

	}

	// -------------------------------------------------------------------------
	@BackGround{

		// 背景描画
		OnBGPachouli;

	}

}
