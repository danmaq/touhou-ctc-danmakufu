//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ1C　ボス　メディスン・メランコリー　ラストスペル
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Medicine - ラストスペル]
#Text[ステージ1C ボス
メディスン・メランコリー]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\BossSub.dnh"
	#include_function ".\INCLUDE\BOSS\Medicine.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 110;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;
	FLAN_ESS_NOCALL_MAINLOOP = false;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** サブキャラ間隔角度 */
	let m_nDollGapAngle = 0;

	/** ダメージ率（スペルプラクティス及び単体テスト時に固くする） */
	let m_nDamageRate = 1;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		m_bDeadEffect = true;
		InitializeBoss();

		/** 個別初期設定 */
		if( m_nLevel > 0 ){ m_nLevel --; }
		SetTimer( 63 );
		SetLife( 400 );
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
			m_nDamageRate = 0.8;
			let nBossID = CL_TTH_CHARACTER_NAME_KAEI + CL_TTH_CHARACTER_NAME_KAEI_MEDICINE;
			SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 
		}
		else{
			if( m_bStagePractice ){ m_nDamageRate = 0.8; }
			SetPosition( FLAN_BOSS_HOME_X, FLAN_BOSS_HOME_Y + RandBlur( 0.1 ) );
			LastSpellEffect();
		}
		SetDamageRate( 14 * m_nDamageRate, 0 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );
		BehaviorSub( ACT_STAND3 );
		m_nDollGapAngle = GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_BOSS_ANGLE, -90 );

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** サブキャラ間隔角度設定 */
		m_nDollGapAngle += 360 / 240;

	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

		/** 個別終了設定 */
		DeleteCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ANGLE );

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス＆サブキャラ描画 */
		let nDollGapLength = 32;
		let nX = GetGapX( GetX(), nDollGapLength, m_nDollGapAngle );
		let nY = GetGapY( GetY(), nDollGapLength * 0.4, m_nDollGapAngle * 2 );
		if( sin( m_nDollGapAngle ) > 0 ){
			DrawBoss( m_szImageBoss );
			DrawSub( m_szImageBoss, CHAR_DOLL, nX, nY );
		}
		else{
			DrawSub( m_szImageBoss, CHAR_DOLL, nX, nY );
			DrawBoss( m_szImageBoss );
		}

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		if( !m_bStage || m_bSpellPractice ){
			SetAction( ACT_MOVE, nFrame );
			BossMoveHome( nFrame, true );
		}
		__Wait( 55 );
		if( m_bDead ){ break; }

		/** ボスID設定 */
		if( m_bStage && !m_bSpellPractice ){
			let nBossID = CL_TTH_CHARACTER_NAME_KAEI + CL_TTH_CHARACTER_NAME_KAEI_MEDICINE;
			SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 
		}

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetSubAction( ACT_SPELL3, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_KAEI + CL_TTH_SPELL_STAGE1_BOSS_LAST + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );
		if( m_bDead ){ break; }

		/** ランダム毒霧 */
		RandomPoisonShot();
		__Wait( 60 );
		if( m_bDead ){ break; }

		loop{

			__Wait( 60 );
			if( m_bDead ){ break; }

			/** 隠れ弾 */
			SetAction( ACT_SHOT_B5, 60 );
			HiddenShot( - 1 );
			HiddenShot( 1 );
			__Wait( 60 );
			if( m_bDead ){ break; }

			/** 移動 */
			Move( 120 );
			__Wait( 60 );
			if( m_bDead ){ break; }

			/** 隠れ弾 */
			HiddenShot( - 1 );
			HiddenShot( 1 );
			__Wait( 60 );
			if( m_bDead ){ break; }

		}

	}

	/**
	*	隠れ弾
	*	@param nAssign	割り振り係数
	*/
	task HiddenShot( let nAssign ){

		let _nX = GetX();
		let _nY = GetY();
		let nGapLength = 70;
		let nGapAngle = GetGapAngle( _nX, _nY, CL_CEN_X, CL_CEN_Y ) - 90 * nAssign;
		let nX = GetGapX( _nX, nGapLength, nGapAngle );
		let nY = GetGapY( _nY, nGapLength, nGapAngle );
		let nWay = [ 19, 22, 30, 32 ][ m_nLevel ];
		let nFrame = 3;
		let nNum = 8;
		let nSpeed = 1.5;
		let nMaxSpeed = 3.5;
		let nAngle = nGapAngle - 165 * nAssign;
		let nWayAngle = 330 / ( nWay - 1 ) * nAssign;
		let nGraphic = US_BALL_S_A_RED;
		let nDelay = 15;

		PlaySELoopEx( seShot1, nFrame * nWay, 10 );
		loop( nWay ){
			_LineShot( nX, nY, nSpeed, nMaxSpeed, nAngle, nNum, nGraphic, nDelay );
			__Wait( nFrame );
			if( m_bDead ){ break; }
			nAngle += nWayAngle;
		}

	}

	/**
	*	ランダム毒霧
	*/
	task RandomPoisonShot{

		let anRandX = [ CL_MIN_X, CL_MIN_X, CL_MAX_X, CL_MAX_X ];
		let anRandY = [ CL_MIN_Y, CL_MAX_Y, CL_MAX_Y, CL_MIN_Y ];
		let nGapLength = 10;
		let nSpeed = 5;
		let nFrame = 7 - m_nLevel;

		PlaySELoopEx( seShot2, 6000, 14 );
		loop{
			ascent( let i in 0 .. 4 ){
				let nX = GetX();
				let nY = GetY();
				let _nX = rand( CL_CEN_X, anRandX[ i ] );
				let _nY = rand( CL_CEN_Y, anRandY[ i ] );
				let nAngle = GetGapAngle( nX, nY, _nX, _nY );
				let _nFrame = trunc( GetGapLength( nX, nY, _nX, _nY ) / nSpeed );
				PoisonSeed( nX, nY, nSpeed, nAngle, _nFrame );
				__Wait( nFrame );
				if( m_bDead ){ break; }
			}
			if( m_bDead ){ break; }
		}

	}

	/**
	*	毒霧弾
	*	@param nX		弾源x座標
	*	@param nY		弾源y座標
	*	@param nSpeed	速度
	*	@param nAngle	角度
	*	@param nFrame	弾状態のフレーム数
	*/
	task PoisonSeed( let nX, let nY, let nSpeed, let nAngle, let nFrame ){

		let obj = Obj_Create( OBJ_SHOT );
		Obj_SetPosition( obj, nX, nY );
		Obj_SetSpeed( obj, nSpeed );
		Obj_SetAngle( obj, nAngle );
		ObjShot_SetGraphic( obj, US_BALL_M_BLUE );
		ObjShot_SetBombResist( obj, true );

		/** 透過 */
		let nAlpha = 63;
		let nAddAlpha = ( 255 - nAlpha ) / nFrame;
		loop( nFrame ){
			nAlpha += nAddAlpha;
			Obj_SetAlpha( obj, nAlpha );
			yield;
		}
		PoisonMist( Obj_GetX(obj), Obj_GetY(obj) );
		Obj_Delete( obj );

	}

	/**
	*	毒霧
	*	@param nX	x座標
	*	@param nY	y座標
	*/
	task PoisonMist( let nX, let  nY ){

		let obj = CreateSquareEffectObject( m_szImageShot, 0, 0, 256, 256, 256, 256 );
		Obj_SetX( obj, nX );
		Obj_SetY( obj, nY );
		ObjEffect_SetRenderState( obj, ADD );
		ObjEffect_SetAngle( obj, 0, 0, rand( 0, 360 ) );

		/** 拡大 */
		let nFrame = 160;
		let nScale = 0.15;
		let nAddScale=( 1 - nScale ) / nFrame;
		loop( nFrame ){
			nScale += nAddScale;
			ObjEffect_SetScale( obj, nScale, nScale );
			yield;
		}

		/** 消滅 */
		nFrame = 20;
		nAddScale = - nScale / nFrame;
		loop( nFrame ){
			nScale += nAddScale;
			ObjEffect_SetScale( obj, nScale, nScale );
			yield;
		}
		Obj_Delete( obj );

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}
