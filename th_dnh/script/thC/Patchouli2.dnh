 //////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ3A　ボス　パチュリー・ノーレッジ　通常攻撃2
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////


#ScriptVersion[2]
#BackGround[User]
#Title[Patchouli - 通常攻撃2]
#Text[ステージ3A ボス
パチュリー・ノーレッジ]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Patchouli.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		SetTimer( 45 );
		SetLife( 2500 );
		SetDamageRate( 75, 75 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KOUMA + CL_TTH_CHARACTER_NAME_KOUMA_PACHOULI;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 150;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 180 );

		let nAssign = 1;

		loop{

			/** 使い魔召喚 */
			SummonShadow( nAssign );
			__Wait( 30 );

			/** 移動 */
			Move( 150 );
			__Wait( 150 );

			/** 回転レーザー */
			RollLaser();
			__Wait( 150 );

			/** 移動＋狙い全方向直線弾 */
			Move( 90 );
			RoundLineShotEx();
			__Wait( 90 );

			nAssign  = - nAssign;

		}

	}

	/**
	*	使い魔召喚
	*	@param nAssign	割り振り係数
	*/
	function SummonShadow( let nAssign ){

		let nWay = 5;
		let nX = GetX();
		let nY = GetY();
		let nWayAngle = 360 / nWay;
		let nAngle = 90 - nWayAngle * ( nWay - 1 ) / 2;

		PlaySEEx( seShadow );
		loop( nWay ){
			CreateEnemyFromScript( "Shadow", nX, nY, 0, nAngle, nAssign );
			nAngle += nWayAngle;
		}

	}

	/**
	*	回転レーザー
	*/
	task RollLaser{

		let nAssign = 1;
		if( GetPlayerX() < CL_CEN_X ){ nAssign = - 1; }
		let nWay = 12 + 2 * m_nLevel;
		let nX = GetX();
		let nY = GetY();
		let nXTurnAngle = 45;
		let nZTurnAngle = -45;
		let nAngle = 90;
		let nWayAngle = 360 / nWay;
		let nDelay = 60;

		SetAction( ACT_SHOT_A3, 140 );
		PlaySEDelay( seLaser1, nDelay );
		loop( nWay ){
			_RollLaser( nX, nY, nAngle, nXTurnAngle, nZTurnAngle, nDelay, nAssign );
			nAngle += nWayAngle;
		}

	}

	/**
	*	回転レーザー（1本）
	*	@param nX			レーザー源x座標
	*	@param nY			レーザー源y座標
	*	@param nAngle		角度
	*	@param nXTurnAngle	x軸回転角度
	*	@param nZTurnAngle	z軸回転角度
	*	@param nDelay		遅延フレーム数
	*	@param nAssign		割り振り係数
	*/
	task _RollLaser( let nX, let nY, let nAngle, let nXTurnAngle, let nZTurnAngle, let nDelay, let nAssign ){

		let obj = Obj_Create( OBJ_LASER );
		ObjShot_SetDelay( obj, nDelay );
		ObjShot_SetGraphic( obj, US_BALL_M_A_PURPLE );
		ObjLaser_SetWidth( obj, 24 );

		let nKill = 150;
		let nGapLength = 0;
		_SetLength();
		_SetGapLength();
		_SetAngle();
		_SetLocate();

		/** レーザー長さ設定 */
		task _SetLength{
			let nFrame = 30;
			let nLength = 0;
			let nAddLength = 600 / nFrame;
			loop( nFrame ){
				nLength += nAddLength;
				ObjLaser_SetLength( obj, nLength );
				yield;
			}
		}

		/** 基本間隔設定 */
		task _SetGapLength{
			let nFrame = 30;
			let nAddGapLength = 60 / nFrame;
			loop( nFrame ){
				nGapLength += nAddGapLength;
				yield;
			}
		}

		/** 基本角度設定 */
		task _SetAngle{
			let nAddAngle = ( 0.2 + 0.02 * m_nLevel ) * nAssign;
			loop( nKill ){
				nAngle += nAddAngle;
				yield;
			}
		}

		/** 総合位置設定 */
		task _SetLocate{
			loop( nKill ){
				let _nX = GetGapX( nX, nGapLength, nAngle );
				let _nY = GetGapY( nY, nGapLength * sin( nXTurnAngle ), nAngle );
				let _nGapLength = GetGapLength( nX, nY, _nX, _nY );
				let _nAngle = GetGapAngle( nX, nY, _nX, _nY) + nZTurnAngle * nAssign;
				let __nX = GetGapX( nX, _nGapLength, _nAngle );
				let __nY = GetGapY( nY, _nGapLength, _nAngle );
				Obj_SetX( obj, __nX );
				Obj_SetY( obj, __nY );
				Obj_SetAngle( obj, _nAngle );
				yield;
			}
			ObjShot_FadeDelete( obj );
		}

	}

	/**
	*	狙い全方向直線弾
	*/
	task RoundLineShotEx{

		let _nNum = 6;
		let nNum = 3 + m_nLevel;
		let nWay = 8;
		let nSpeed = 3;
		let nMaxSpeed = 5.5 + 0.5 * m_nLevel;
		let nGraphic = US_BALL_S_RED;
		let nDelay = 5;
		let nFrame = 15;

		loop( _nNum ){
			let nAngle = GetAngleToPlayer();
			_RoundLineShot( GetX(), GetY(), nSpeed, nMaxSpeed, nAngle, nWay, nNum, nGraphic, nDelay );
			PlaySEEx( seShot1 );
			__Wait( nFrame );
		}

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 60;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	使い魔
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy Shadow{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shadow.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = false;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_SHADOW_LIGHTING = false;
	FLAN_SHADOW_COLLISION = false;
	FLAN_SHADOW_DELETE_SHOT = 32;
	FLAN_ENEMY_COLLISION_A = 24;
	FLAN_ENEMY_COLLISION_B = 18;
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** 間隔長さ */
	let m_nGapLength;
	/** 間隔角度 */
	let m_nGapAngle;
	/** 間隔割り振り係数 */
	let m_nGapAssign;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		SetLife( 50 );
		_SetDamageRateDelayEx( 85, 85, 50, 50, 90 );
		m_nGapLength = 0;
		m_nGapAngle = GetAngle();
		m_nGapAssign = nArgv;
		SetAngle( 0 );
		BehaviorShadow( CHAR_SHADOW_BOOK );

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*	@param bIsAppear 具現化中かどうか
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*	@param bIsAppear 具現化中かどうか
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*	@param bIsAppear 具現化中かどうか
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){

		/** 使い魔描画 */
		let nShadowImage = SHADOW_IMAGE_6S;
		let nShadowColor = SHADOW_COLOR_BLUE;
		let nAngle = 2 * m_nFlanCount;
		let nScale = 0.8;
		DrawShadow( nShadowImage, nShadowColor, nAngle, nScale, nScale );
		DrawShadowChar();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 間隔角度＆長さ設定 */
		_SetGapLength();
		_SetGapAngle();
		loop( 30 ){ yield; }

		let nFrame = [ 15, 13, 10, 7 ][ m_nLevel ];
		let nNum = [ 10, 11, 15, 21 ][ m_nLevel ];

		/** 全方向弾 */
		SetShadowAction( ACT_SHADOW_SHOT5, nFrame * nNum );
		loop( nNum ){
			RoundShotEx;
			loop( nFrame ){ yield; }
		}

	}

	/**
	*	全方向弾
	*/
	function RoundShotEx{

		let nWay = 5;
		let nSpeed = 5;
		let nMaxSpeed = 1;
		let nAccelSpeed = ( nMaxSpeed - nSpeed ) / 30;
		let nAngle = m_nGapAngle;
		let nGraphic = US_BALL_S_BLUE;
		let nDelay = 5;

		_RoundShot02( GetX(), GetY(), nSpeed, nAccelSpeed, nMaxSpeed, nAngle, nWay, nGraphic, nDelay );
		PlaySEEx( seShot3 );

	}

	/**
	*	間隔角度設定
	*/
	task _SetGapAngle{

		let nAddGapAngle = 360 / 180 * m_nGapAssign;
		loop{
			m_nGapAngle += nAddGapAngle;
			let nX = GetGapX( GetEnemyX(), m_nGapLength, m_nGapAngle );
			let nY = GetGapY( GetEnemyY(), m_nGapLength, m_nGapAngle );
			SetPosition( nX, nY );
			yield;
		}

	}

	/**
	*	間隔長さ設定
	*/
	task _SetGapLength{

		let anFrame = [ 30, 150, 150 ];
		let anMaxGapLength = [ 100, 1000 ];

		let nAddGapLength = anMaxGapLength[ 0 ] / anFrame[ 0 ];
		loop( anFrame[ 0 ] ){
			m_nGapLength += nAddGapLength;
			yield;
		}
		loop( anFrame[ 1 ] ){ yield; }
		nAddGapLength = ( anMaxGapLength[ 1 ] - m_nGapLength ) / anFrame[ 2 ];
		loop( anFrame[ 2 ] ){
			m_nGapLength += nAddGapLength;
			yield;
		}
		VanishEnemy();

	}

}
