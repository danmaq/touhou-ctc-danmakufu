//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ3C　ボス　四季映姫・ヤマザナドゥ　スペル4
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////


#ScriptVersion[2]
#BackGround[User]
#Title[Eiki - スペル4]
#Text[ステージ3C ボス
四季映姫・ヤマザナドゥ]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Eiki.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 100;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** 裁判オブジェクト配列 */
	let m_aobjJudge = [];

	/** 裁判が行われたか */
	let m_bJudge = false;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		m_bDeadEffect = true;
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		SetTimer( 47 );
		SetLife( 500 );
		SetDamageRate( 5, 5 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KAEI + CL_TTH_CHARACTER_NAME_KAEI_EIKI;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){
			if( IsTryLastSpell() ){ DropItemTHC( 18 ); }
		}

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 55 );
		if( m_bDead ){ break; }

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_KAEI + CL_TTH_SPELL_STAGE3_BOSS_4 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );
		if( m_bDead ){ break; }

		/** 裁判弾 */
		SetAction( ACT_SHOT_B5, 180 );
		PlaySEEx( sePower );
		Concentration01( 120 );
		__Wait( 120 );
		if( m_bDead ){ break; }
		JudgmentShot();
		SetDamageRate( 13.5, 13.5 );

		let nAssign = 1;

		loop{

			loop( 3 ){

				/** 側面被告弾 */
				SetAction( ACT_SHOT_A3, 30 );
				SideDefendShot( 1, nAssign );
				SideDefendShot( - 1, nAssign );
				__Wait( 30 );
				if( m_bDead ){ break; }

				/** 移動 */
				Move( 60 );
				__Wait( 60 );
				if( m_bDead ){ break; }

				/** 全方向被告弾 */
				SetAction( ACT_SHOT_A3, 60 );
				RoundDefendShot();
				__Wait( 90 );
				if( m_bDead ){ break; }

				nAssign = - nAssign;

			}
			if( m_bDead ){ break; }

		}

	}

	/**
	*	側面被告弾
	*	@param nSideAssign	発射方向割り振り係数
	*	@param nRollAssign	回転方向割り振り係数
	*/
	task SideDefendShot( let nSideAssign, let nRollAssign ){

		let nWay = m_nLevel;
		if( m_nLevel == 0 ){ nWay = 1; }
		let nGapLength = 16;
		let nAddGapLength = 5.5;
		let nGapAngle = GetAngleToPlayer() + 90 * nSideAssign;
		let nSpeed = 1.8 + 0.2 * m_nLevel;
		let nAngle = rand( 0, 360 );
		let nWayAngle = 360 / nWay;
		let nAddAngle = 19 * nRollAssign;
		let nGraphic = US_RICE_S_BLUE;
		let nDelay = 15;

		PlaySEEx( seShot1 );
		loop{
			let nX = GetGapX( GetX(), nGapLength, nGapAngle );
			let nY = GetGapY( GetY(), nGapLength, nGapAngle );
			if( IsOutPos( nX, nY, 20 ) ){ break; }
			let _nAngle = nAngle;
			loop( nWay ){
				DefendShot( nX, nY, nSpeed, _nAngle, nGraphic, nDelay );
				_nAngle += nWayAngle;
			}
			yield;
			nGapLength += nAddGapLength;
			nAngle += nAddAngle;
		}

	}

	/**
	*	全方向被告弾
	*/
	task RoundDefendShot{

		let nNum = 4;
		if( m_nLevel == 0 ){ nNum = 3; }
		let nFrame = 10;
		let nWay = 38 + 4 * m_nLevel;
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 2.8 + 0.2 * m_nLevel;
		let nNumSpeed =  - 0.4 * nNum / ( nNum - 1 );
		let nAngle = GetAngleToPlayer();
		let nWayAngle = 360 / nWay;
		let nGraphic = US_BALL_SS_BLUE;
		let nDelay = 15;

		loop( nNum ){
			let _nAngle = nAngle;
			loop( nWay ){
				DefendShot( nX, nY, nSpeed, _nAngle, nGraphic, nDelay );
				_nAngle += nWayAngle;
			}
			PlaySEEx( seShot1 );
			__Wait( nFrame );
			if( m_bDead ){ break; }
			nSpeed += nNumSpeed;
		}

	}

	/**
	*	被告弾
	*	@param nX		弾源x座標
	*	@param nY		弾源y座標
	*	@param nSpeed	速度
	*	@param nAngle	角度
	*	@param nGraphic	弾画像
	*	@param nDelay	遅延フレーム数
	*/
	task DefendShot( let nX, let nY, let nSpeed, let nAngle, let nGraphic, let nDelay ){

		let obj = Obj_Create( OBJ_SHOT );
		Obj_SetPosition( obj, nX, nY );
		Obj_SetSpeed( obj, nSpeed );
		Obj_SetAngle( obj, nAngle );
		ObjShot_SetDelay( obj, nDelay );
		ObjShot_SetGraphic( obj, nGraphic );

		/** 遅延 */
		loop( nDelay ){ yield; }

		/** 裁判弾との接触判定 */
		loop{
			if( Obj_BeDeleted( obj ) ){ break; }
			ascent( let i in 0 .. length( m_aobjJudge ) ){
				if( Collision_Obj_Obj( m_aobjJudge[ i ], obj ) ){
					nX = Obj_GetX( obj );
					nY = Obj_GetY( obj );
					let _nSpeed = 3.6 + 0.2 * m_nLevel;
					let _nGraphic = US_TABLET;
					CreateShot01( nX, nY, nSpeed, nAngle, nGraphic, 0 );
					CreateShot01( nX, nY, _nSpeed, nAngle, _nGraphic, 0 );
					Obj_Delete( obj );
					m_bJudge = true;
					break;
				}
			}
			yield;
		}

	}

	/**
	*	裁判弾
	*/
	task JudgmentShot{

		JudgeSE();

		let nBaseX = [ CL_CEN_X, CL_CEN_X - 80, CL_CEN_X + 80 ];
		let nBaseY = [ CL_CEN_Y - 40, CL_CEN_Y - 60, CL_CEN_Y - 60 ];
		let nRandLength = 40;
		let nFrame = 120;

		loop{
			ascent( let i in 0 .. 3 ){
				let nX = nBaseX[ i ] + RandBlur( nRandLength );
				let nY = nBaseY[ i ] + RandBlur( nRandLength );
				_JudgmentShot( nX, nY );
				PlaySEEx( sePower );
				__Wait( nFrame );
				if( m_bDead ){ break; }
			}
			if( m_bDead ){ break; }
		}

	}

	/**
	*	裁判弾（1発）
	*	@param nX	設置x座標
	*	@param nY	設置y座標
	*/
	task _JudgmentShot( let nX, let nY ){

		let obj = Obj_Create( OBJ_SHOT );
		Obj_SetPosition( obj, nX, nY );
		Obj_SetAngle( obj, rand( 0, 360 ) );
		ObjShot_SetGraphic( obj, US_JUDGMENT );
		Obj_SetCollisionToPlayer( obj, false );
		ObjShot_SetBombResist( obj, true );
		ObjShot_ToItem( obj, false );

		/** フェードイン */
		let nFrame = 45;
		let nAlpha = 0;
		let nAddAlpha = 160 / nFrame;
		loop( nFrame ){
			nAlpha += nAddAlpha;
			Obj_SetAlpha( obj, nAlpha );
			yield;
		}

		/** 裁判中 */
		m_aobjJudge = m_aobjJudge ~ [ obj ];
		let _nFrame = 240 + 20 * m_nLevel;
		loop( _nFrame ){ yield; }
		m_aobjJudge = erase( m_aobjJudge, 0 );

		/** フェードアウト */
		loop( nFrame ){
			nAlpha -= nAddAlpha;
			Obj_SetAlpha( obj, nAlpha );
			yield;
		}
		Obj_Delete( obj );

	}

	/**
	*	裁判SE
	*/
	task JudgeSE{

		let nCount = m_nFlanCount;
		let nWaitCount = 5 - m_nLevel;
		loop{
			if( m_bJudge ){
				if( nCount < m_nFlanCount ){
					PlaySEEx( seShot3 );
					nCount = m_nFlanCount + nWaitCount;
				}
				m_bJudge = false;
			}
			yield;
		}

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 10;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}
