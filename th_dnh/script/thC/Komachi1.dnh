//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ3C　中ボス　小野塚 小町　通常攻撃1
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////


#ScriptVersion[2]
#BackGround[User]
#Title[Komachi - 通常攻撃1]
#Text[ステージ3C 中ボス
小野塚 小町]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Komachi.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			SetPosition( FLAN_BOSS_HOME_X, FLAN_BOSS_HOME_Y + RandBlur( 0.1 ) );
		}
		SetTimer( 31 );
		SetLife( 2500 );
		SetDamageRate( 85, 85 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 61 );
		BehaviorBoss( ACT_STAND3 );
		CheckExplosion01Ex();

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KAEI + CL_TTH_CHARACTER_NAME_KAEI_KOMACHI;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

		/** 個別終了設定 */
		EndExplosion01Ex();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		__Wait( 60 );

		let nNumber = 0;

		loop{

			/** 銭弾 */
			SetAction( ACT_SHOT_B3, 100 );
			Concentration01( 60 );
			__Wait( 60 );
			SetAction( ACT_SHOT_B3_B, 145 );
			CoinShot();
			__Wait( 20 );

			/** 霊魂召喚 */
			loop( 6 ){
				CreateShotFromScript( "Spilit", GetX(), GetY(), 0, 0, 0, nNumber );
				PlaySEEx( seShadow );
				__Wait( 20 );
				nNumber ++;
			}
			__Wait( 20 );

			/** 移動 */
			Move( 60 );
			__Wait( 80 );

		}

	}

	/** 銭弾 */
	function CoinShot{

		let nCoin = rand_int( 0, 2 );
		if( m_nLevel < 2 ){
			alternative( nCoin )
			case( 0 ){ GoldCoinShot(); }
			case( 1 ){ SilverCoinShot(); }
			others{ CopperCoinShot(); }
		}
		else{
			if( m_nLevel == 3 ){ nCoin = - 1; }
			if( nCoin != 0 ){ GoldCoinShot(); }
			if( nCoin != 1 ){ SilverCoinShot(); }
			if( nCoin != 2 ){ CopperCoinShot(); }
		}

	}

	/** 金貨弾 */
	task GoldCoinShot(){

		let nFrame = 8;
		let nNum = 14;
		let nWay = 7;
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 3.6;
		let _nSpeed = 2.2;
		let nAngle = GetAngleToPlayer();
		let nWideAngle = 100 - 7.5 * m_nLevel;
		let anGraphic = [ US_RICE_M_YELLOW, US_COIN_YELLOW ];
		let nDelay = 10;

		ascent( let i in 0 .. nNum ){
			_WideShot01( nX, nY, nSpeed, nAngle, nWideAngle, nWay, anGraphic[ 0 ], nDelay );
			if( i % 2 == 0 ){ _WideShot01( nX, nY, _nSpeed, GetAngleToPlayer(), nWideAngle, nWay, anGraphic[ 1 ], nDelay );}
			PlaySEEx( seShot3 );
			__Wait( nFrame );
		}

	}

	/** 銀貨弾 */
	task SilverCoinShot{

		let nNum = 30 + 2 * m_nLevel;
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 1;
		let nNumSpeed = ( 3.6 + 0.3 * m_nLevel - nSpeed ) / ( nNum - 1 );
		let nAngle = GetAngleToPlayer();
		let nWideAngle = 40;
		let anGraphic = [ US_RICE_M_WHITE, US_COIN_WHITE ];
		let nDelay = 10;

		PlaySEEx( seShot1 );
		ascent( let i in 0 .. nNum ){
			let _nAngle = nAngle + RandBlur( nWideAngle / 2 );
			CreateShot01( nX, nY, nSpeed, _nAngle, anGraphic[ i % 2 ], nDelay );
			nSpeed += nNumSpeed;
		}

	}

	/** 銅貨弾 */
	task CopperCoinShot{

		let nWay = 72 + 8 * m_nLevel;
		let nGapLength = 8;
		let _nX = GetX();
		let _nY = GetY();
		let nSpeed = 5 + 0.4 * m_nLevel;
		let _nSpeed = 1;
		let nAngle = rand( 0, 360 );
		let nWayAngle = 360 / nWay;
		let anGraphic = [ US_RICE_M_ORANGE, US_COIN_ORANGE ];
		let nDelay = 20;
		let nFrame = 30;

		if( m_nLevel >= 2 ){ __Wait( 20 ); }
		loop( nWay ){
			let nX = GetGapX( _nX, nGapLength, nAngle );
			let nY = GetGapY( _nY, nGapLength, nAngle );
			CreateShotA( 0, nX, nY, nDelay );
			SetShotDataA( 0, 0, nSpeed, nAngle, 0, 0, 0, anGraphic[ 0 ] );
			SetShotDataA( 0, nFrame, _nSpeed, NULL, 0, 0, 0, anGraphic[ 0 ] );
			FireShot( 0 );
			CreateShotA( 0, _nX, _nY, nDelay );
			SetShotDataA( 0, 0, nSpeed, nAngle, 0, 0, 0, anGraphic[ 1 ] );
			SetShotDataA( 0, nFrame, _nSpeed, NULL, 0, 0, 0, anGraphic[ 1 ] );
			FireShot( 0 );
			nAngle += nWayAngle;
		}
		PlaySEDelay( seShot1, nDelay );

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	霊魂
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_shot Spilit{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shot.dnh"


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = true;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** 使い魔番号 */
	let m_nNumber;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		m_bShadow = true;
		m_nShadowType = SHADOW_TYPE_SPILIT;
		m_bShadowDead = true;
		m_nNumber = nArgv;
		CheckBossLife();

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 移動 */
		Move;
		loop( 120 ){ yield; }

		/** 全方向弾＋消滅 */
		RoundShotEx;
		End();

	}

	/**
	*	全方向弾
	*/
	function RoundShotEx{

		let nWay = 24 + 3 * m_nLevel;
		let nSpeed = 2.4 + 0.3 * m_nLevel;
		let nAngle = rand( 0, 360 );
		let nGraphic = US_FIRE_BLUE;
		_RoundShot01( GetX(), GetY(), nSpeed, nAngle, nWay, nGraphic, 0 );
		PlaySEEx( seShot1 );

	}

	/**
	*	移動
	*/
	task Move{

		let anAssign = [ - 1, 1 ];
		let nGapLength = 50;
		let nX = CL_CEN_X + nGapLength * anAssign[ m_nNumber % 2 ] + RandBlur( nGapLength );
		let nY = CL_MIN_Y + 100 + RandBlur( nGapLength );
		let nForce = 300;
		let nAngle = rand( 0, 360 );
		let _nForce = 300;
		let _nAngle = rand( 0, 360 );
		let nFrame = 60;
		SetMovePositionHermite( nX, nY, nForce, nAngle, _nForce, _nAngle, nFrame );
		loop( nFrame ){ yield; }

		nGapLength = 75;
		nX = CL_CEN_X + nGapLength * anAssign[ m_nNumber % 2 ] + RandBlur( nGapLength );
		nY = CL_MIN_Y + 100 + RandBlur( nGapLength );
		nForce = 300;
		nAngle = rand( 0, 360 );
		nFrame = 59;
		SetMovePositionHermite( nX, nY, _nForce, _nAngle, nForce, nAngle, nFrame );
		loop( nFrame ){ yield; }

		SetMovePosition02( nX, nY, 1 );

	}

}
