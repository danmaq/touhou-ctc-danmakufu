script_enemy_main{

	// 共通関数読み込み
	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\_index_UserShot.dnh"

	// 画像及び効果音ファイル
	let userShot=shotAll;
	let imgBoss=dotBossKomachi;
	let imgList=[imgBoss];
	let seList=[];

	// 各種設定値（難易度等）
	let THC=GetCommonDataDefault(CD_THC_STAGE,false);
	let Practice=GetCommonDataDefault(CD_STAGE_PRACTICE,false); 
	Debug_SetLevel;
	let Lv=GetCommonDataDefault(CD_STAGE_LEVEL,0);

	// -------------------------------------------------------------------------
	@Initialize{

		// ボス初期設定（ファイルのロード他）
		if(!THC){
			LoadUserShotData(userShot);
			seList=seList~seListEnemy~seListShadow;
			SetX(cenX);
			SetY(minY+120+RandBlur(0.1));
		}
		InitializeBoss(imgList,seList);

		// スペルカード設定
		SetTimer(41);
		SetLife(2500);
		SetDamageRate(85,85);
		SetShotAutoDeleteClip(32,32,32,32);

		// ボス基本処理、メイン処理
		CountTimer(seTimeOut);
		BehaviorBoss(ACT_STAND3);
		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		// 当たり判定（自弾,体当たり）
		Collision(32,24);

		// ダメージ音
		PlayDamageSE(seDamage);

		// カウンタ加算
		m_nCount++;

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		SetInvincibility(62);
		_Wait(62);

		let coin=0;

		loop{

			// 銭弾
			SetAction(ACT_SHOT_B3,100);
			Concentration01(60);
			_Wait(60);
			SetAction(ACT_SHOT_B3_B,145);
			CoinShot;

			// 霊魂召喚
			loop(8){
				CreateEnemyFromScript("Spilit",GetX,GetY,0,0,coin);
				PlaySE(seShadow);
				_Wait(20);
				coin++;
			}

			// 移動
			move(60);
			_Wait(80);

		}

	}

	// 銭弾 --------------------------------------------------------------------
	function CoinShot{

		let pass=rand_int(0,2);
		if(Lv>=2){pass=-1;}
		if(pass!=0){GoldCoinShot;}
		if(pass!=1){SilverCoinShot;}
		if(pass!=2){CopperCoinShot;}

	}

	// 金貨弾 ------------------------------------------------------------------
	task GoldCoinShot{

		let num=14;
		let way=7;
		let speed1=3.6;
		let speed2=2.2;
		let angle=GetAngleToPlayer;
		let wideAngle=100-7.5*Lv;
		let graphic=[US_RICE_M_YELLOW,US_COIN_YELLOW];
		let delay=10;
		let fr=8;

		ascent(let i in 0 .. num){
			WideShot01(GetX,GetY,speed1,angle,wideAngle,way,graphic[0],delay);
			if(i%2==0){WideShot01(GetX,GetY,speed2,GetAngleToPlayer,wideAngle,way,graphic[1],delay);}
			PlaySE(seShot3);
			_Wait(fr);
		}

	}

	// 銀貨弾 ------------------------------------------------------------------
	task SilverCoinShot{

		let num=30+2*Lv;
		let baseSpeed=1;
		let maxSpeed=3.6+0.3*Lv;
		let numSpeed=(maxSpeed-baseSpeed)/(num-1);
		let baseAngle=GetAngleToPlayer;
		let wideAngle=40;
		let graphic=[US_RICE_M_WHITE,US_COIN_WHITE];
		let delay=10;

		PlaySE(seShot1);
		ascent(let i in 0 .. num){
			let speed=baseSpeed+numSpeed*i;
			let angle=baseAngle+RandBlur(wideAngle/2);
			CreateShot01(GetX,GetY,speed,angle,graphic[i%2],delay);
		}

	}

	// 銅貨弾 ------------------------------------------------------------------
	task CopperCoinShot{

		let way=72+8*Lv;
		let gapLength=8;
		let speed1=5+0.4*Lv;
		let speed2=1;
		let baseAngle=rand(0,360);
		let wayAngle=360/way;
		let graphic=[US_RICE_M_ORANGE,US_COIN_ORANGE];
		let delay=20;
		let fr=30;

		_Wait(20);
		ascent(let i in 0 .. way){
			let angle=baseAngle+wayAngle*i;
			let x=GetGapX(GetX,gapLength,angle);
			let y=GetGapY(GetY,gapLength,angle);
			CreateShotA(0,x,y,delay);
			SetShotDataA(0,0,speed1,angle,0,0,0,graphic[0]);
			SetShotDataA(0,fr,speed2,NULL,0,0,0,graphic[0]);
			FireShot(0);
			CreateShotA(0,GetX,GetY,delay);
			SetShotDataA(0,0,speed1,angle,0,0,0,graphic[1]);
			SetShotDataA(0,fr,speed2,NULL,0,0,0,graphic[1]);
			FireShot(0);
		}
		_Wait(delay);
		PlaySE(seShot1);

	}

	// 移動 --------------------------------------------------------------------
	function move(let fr){

		let x=GetX;
		let y=GetY;
		let mx=rand(40,80);
		let my=rand(0,20);
		if(x>=GetPlayerX){
			if(x-mx>=minX+100){mx=-mx;}
		}
		else{
			if(x+mx>=maxX-100){mx=-mx;}
		}
		if(y>=minY+120){my=-my;}
		x+=mx;
		y+=my;
		let power=GetGapLength(GetX,GetY,x,y)*2;
		let angle=GetGapAngle(GetX,GetY,x,y);
		SetMovePositionHermite(x,y,power,angle,0,0,fr);
		SetAction(ACT_MOVE,fr);

	}

	// -------------------------------------------------------------------------
	@Finalize{

		// ロードしたファイルを削除
		DeleteGraphicList(imgList,seList);

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// ボス描画
		DrawBoss(imgBoss);

	}

}

// 霊魂 ------------------------------------------------------------------------
script_enemy Spilit{

	// 共通関数読み込み
	#include_function ".\INCLUDE\Shadow.dnh"
	#include_function ".\_index_UserShot.dnh"

	// 各種設定値（難易度等）
	let THC=GetCommonDataDefault(CD_THC_STAGE,false);
	let Practice=GetCommonDataDefault(CD_STAGE_PRACTICE,false); 
	let Lv=GetCommonDataDefault(CD_STAGE_LEVEL,0);

	let n=GetArgument;

	// -------------------------------------------------------------------------
	@Initialize{

		// ステータス設定（ライフ、ダメージ率等）
		SetLife(1);

		// 光
		Light;

		// メイン処理
		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		// カウンタ加算
		m_nCount++;

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		yield;

		// 移動
		move;
		loop(120){yield;}

		// 全方向弾
		_RoundShot;

		// 消滅
		let fr=30;
		let decAlpha=255/fr;
		let addScale=0.05;
		Explosion01(GetX,GetY,decAlpha,addScale,fr);
		VanishEnemy;

	}

	// 全方向弾 ----------------------------------------------------------------
	function _RoundShot{

		let way=26+4*Lv;
		let speed=2.4+0.3*Lv;
		let angle=rand(0,360);
		let graphic=US_FIRE_BLUE;
		RoundShot01(GetX,GetY,speed,angle,way,graphic,0);
		PlaySE(seShot1);

	}

	// 移動 --------------------------------------------------------------------
	task move{

		let assign=[-1,1];
		let gapLength=50;
		let x=cenX+gapLength*assign[n%2]+RandBlur(gapLength);
		let y=minY+100+RandBlur(gapLength);
		let power1=300;
		let angle1=rand(0,360);
		let power2=300;
		let angle2=rand(0,360);
		let fr=59;
		SetMovePositionHermite(x,y,power1,angle1,power2,angle2,fr);
		loop(fr){yield;}

		gapLength=75;
		x=cenX+gapLength*assign[n%2]+RandBlur(gapLength);
		y=minY+100+RandBlur(gapLength);
		power1=300;
		angle1=rand(0,360);
		SetMovePositionHermite(x,y,power2,angle2,power1,angle1,fr);
		loop(fr){yield;}

		fr=2;
		SetMovePosition02(x,y,fr);

	}

	// 光 ----------------------------------------------------------------------
	task Light{

		let call=1;
		let delay=15;
		loop{
			_Light;
			loop( call ){ yield; }
		}

		task _Light{
			let obj=SetShotObject(GetX,GetY,500,0,US_BALL_SS_BLUE,delay);
			Obj_SetAlpha(obj,0);
			Obj_SetCollisionToPlayer(obj,false);
			ObjShot_SetBombResist(obj,true);
			ObjShot_ToItem(obj,false);
			loop(delay){yield;}
			Obj_Delete(obj);
		}

	}

	// -------------------------------------------------------------------------
	@Finalize{

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

	}

}
