//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		STAGE 1c(妖精雑魚)
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	スクリプトここから
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	THCELをインクルード
//	(FLAN/THCELへのインクルードはTHCELが勝手にやってくれます)
//////////////////////////////////////////////////////////////////////

#include_function ".\INCLUDE\Zako.dnh"


//////////////////////////////////////////////////////////////////////
//	設定定義
//////////////////////////////////////////////////////////////////////

	/**	デフォルトアイテムの落下量を設定します。 */
	ENEMY_ITEMEX_NUM_DEFAULT = 9;
	/**	被弾判定の大きさを設定します。 */
	FLAN_ENEMY_COLLISION_A = 13;
	/**	接触判定の大きさを設定します。 */
	FLAN_ENEMY_COLLISION_B = 8;
	/**	onMainLoopへ処理をまわさないよう設定します。(まわしても何の処理も無い) */
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	定数宣言
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数宣言
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	固有動作実装部
//////////////////////////////////////////////////////////////////////

	/**
	*	敵の移動を管理するタスクです。
	*
	*	@param nLevel レベル(0〜3)
	*/
	task DoMove( let nLevel ){
		let spmax=GetSpeed();
		ascent(i in 0..50){
			SetSpeed(SlowDown( spmax , 0 , i , 50 ));
			yield;
		}
		__Wait(250);
		let XX=GetX+rand(-100,100);
		SetMovePositionHermite(XX,GetClipMinY()-50,6*(XX-GetX()),0,100,-90,400);
	}


//////////////////////////////////////////////////////////////////////
//	共通動作実装部
//////////////////////////////////////////////////////////////////////

	/**
	*	敵固有のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTask( let nArgv, let nLevel ){
		DoMove( nLevel );
		__Wait(80);
		let angle=-37.5;
		while(angle<=37.5){
			CreateEnemyFromScript("Shadow",GetX(),GetY(),[1,1.5,2,3][nLevel],GetAngleToPlayer()+angle,0);
			angle+=15;
		}
		PlaySEEx(seShadow);
		
		__Wait(15);
		let angle_b=-36;
		while(angle_b<=36){
			let angle=0;
			while(angle<=(nLevel-1)*2){
				CreateLaser01(GetX(),GetY(),[1,1.5,2,3][nLevel],angle_b+GetAngleToPlayer()+angle,100+nLevel*30,8,US_SCALE_A_GREEN,0);
				CreateLaser01(GetX(),GetY(),[1,1.5,2,3][nLevel],angle_b+GetAngleToPlayer()-angle,100+nLevel*30,8,US_SCALE_A_GREEN,0);
				angle+=1.5;
			}
			angle_b+=18;
		}
		PlaySEEx(seLaser2);
		if(nLevel>0){
			loop([0,20,50,100][nLevel]){_ReflectShot(GetX(),GetY(),rand(1.5,3),GetAngleToPlayer()+180+rand(-150,150),1,false,true,false,false,US_BALL_BS_RED,0);}
			loop([0,10,17,40][nLevel]){CreateShot01(GetX(),GetY(),rand(1.5,3),GetAngleToPlayer()+rand(-30,30),US_BALL_BS_RED,0);}
			PlaySEEx(seShot2);
		}
	
		__Wait(40);
		loop(3){
			CreateEnemyFromScript("Shadow",GetX(),GetY(),[1,1.5,2,3][nLevel],GetAngleToPlayer(),0);
			PlaySEEx(seShadow);
			__Wait(60);
		}
	}

	/**
	*	初期化時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( let nArgv, let nLevel ){
//		CreateDebugWindow();
		SetLife( 30 );
	}

	/**
	*	毎フレームごとに呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
		DarwZakoBack();
		DrawYousei( RECT_YOUSEI_RED );
	}

}

//////////////////////////////////////////////////////////////////////
//====================================================================
//	使い魔
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy Shadow{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shadow.dnh"


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = false;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_SHADOW_LIGHTING = true;
	FLAN_SHADOW_COLLISION = true;
	FLAN_SHADOW_DELETE_SHOT = 32;
	FLAN_ENEMY_COLLISION_A = 24;
	FLAN_ENEMY_COLLISION_B = 18;

//////////////////////////////////////////////////////////////////////
//	定数(書換可能)独自ショートカットShadowBody専用
//////////////////////////////////////////////////////////////////////

	let SHADOW_LIFE = 5;
	let SHADOW_COLOR = SHADOW_COLOR_RED;

//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

task MainAction( let nLevel ){}
task SubAction01( let nLevel ){}


	#include_function ".\INCLUDE\ShadowBody.dnh"

}
