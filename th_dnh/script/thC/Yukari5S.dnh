//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ4　ボス　八雲 紫　スペル5
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Yukari - スペル5]
#Text[ステージ4 中ボス
八雲 紫]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\YukariChenRan.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 0;
	FLAN_ESS_NOCALL_MAINLOOP = false;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		m_bDeadEffect = true;
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		SetTimer( 50 );
		SetLife( 500 );
		SetDamageRate( 5, 5 );
		SetShotAutoDeleteClip( 32, 64, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );

		/** 式召喚 */
		let nX = GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_BOSS_X, CL_MIN_X - 64 );
		let nY = GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_BOSS_Y, CL_MIN_Y + 80 );
		CreateEnemyFromScript( "ChenRan", nX, nY, 0, 0, 0 );
		nX = GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_BOSS_X2, CL_MAX_X + 64 );
		nY = GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_BOSS_Y2, CL_MIN_Y + 80 );
		CreateEnemyFromScript( "ChenRan", nX, nY, 0, 0, 1 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_YOUMU + CL_TTH_CHARACTER_NAME_YOUMU_YUKARI;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 当たり判定 */
		if( m_nWarpStatus == 0 ){
			FLAN_ENEMY_COLLISION_A = 32;
			FLAN_ENEMY_COLLISION_B = 16;
		}
		else if( m_nWarpStatus >= 3 ){
			FLAN_ENEMY_COLLISION_A = 32;
			FLAN_ENEMY_COLLISION_B = 0;
		}
		else{
			FLAN_ENEMY_COLLISION_A = 0;
			FLAN_ENEMY_COLLISION_B = 0;
		}

	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){
			if( IsTryLastSpell() ){
				let nNum = [ 20, 22 ][ m_nLevel >= 2 ];
				DropItemTHC( nNum );
			}
		}

		/** 共通終了設定 */
		FinalizeBoss();

		/** 個別終了設定 */
		DeleteCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_X );
		DeleteCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_Y );
		DeleteCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_X2 );
		DeleteCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_Y2 );

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		SetDrawDataYukari();
		DrawBossFloat( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		Warp( FLAN_BOSS_HOME_X, FLAN_BOSS_HOME_Y, 55 );
		__Wait( 55 );
		if( m_bDead ){ break; }

		/** スペルカード発動 */
		SetAction( ACT_SPELL5_B, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_YOUMU + CL_TTH_SPELL_STAGE4_BOSS_5 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );
		if( m_bDead ){ break; }

		__Wait( 40 );
		if( m_bDead ){ break; }
		PlaySELoopEx( seShot1, 6000, 10 );
		__Wait( 80 );
		SetDamageRate( 14.5, 14.5 );
		if( m_nLevel == 0 ){ break; }

		__Wait( 60 );
		if( m_bDead ){ break; }
		loop{

			/** 全方向速度差弾 */
			RoundRandomSpeedShot();
			__Wait( 120 );
			if( m_bDead ){ break; }

		}

	}

	/**
	*	全方向速度差弾
	*/
	task RoundRandomSpeedShot(){

		let nWay = 44 + 6 * ( m_nLevel - 1 );
		let nX = GetX();
		let nY = GetY();
		let nMaxSpeed = 1.2 + 0.4 * ( m_nLevel - 1 );
		let nAngle = GetAngleToPlayer();
		let nWayAngle = 360 / nWay;
		let nGraphic = US_RICE_S_BLUE;
		let nDelay=24;

		SetAction( ACT_SHOT_A5, nDelay + 50 );
		PlaySEDelay( seShot2, nDelay );
		loop( nWay ){
			let nSpeed = nMaxSpeed + RandBlur( nMaxSpeed );
			let nAccelSpeed = ( nMaxSpeed - nSpeed ) / 90;
			CreateShot02( nX, nY, nSpeed, nAngle, nAccelSpeed, nMaxSpeed, nGraphic, nDelay );
			nAngle += nWayAngle;
		}

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	橙、藍
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy ChenRan{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\BossAnimation.dnh"
	#include_function ".\INCLUDE\ShadowNoHidden.dnh"
	#include_function ".\INCLUDE\Boss\ChenRan.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_ZAKO_ACTION_EXISTBOSS = FLAN_ZAKO_EXISTBOSS_NONEACTION;
	FLAN_ESS_NOGONE = true;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_ENEMY_COLLISION_A = 32;
	FLAN_ENEMY_COLLISION_B = 16;
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** 式番号 */
	let m_nNumber;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		SetLife( 1 );
		_SetDamageRateDelayEx( 0, 0, 50, 50, 180 );
		m_bShadowLighting = false;
		m_nShadowDeleteShot = 0;
		SetCollisionDelay( 55 );
		CheckBossLife();
		m_nNumber = nArgv;
		if( m_nNumber == 1 ){ m_szImageBoss = m_szImageBoss2; }
		BehaviorBoss( ACT_STAND3 );

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 式描画 */
		DrawChenRan( m_szImageBoss );

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 55;
		let nX = [ CL_MAX_X - 80, CL_MIN_X + 80 ][ m_nNumber ];
		let nY = CL_MIN_Y + 160;
		SetAction( ACT_MOVE, nFrame );
		SetRoll( nFrame );
		SlowMove( nX, nY, nFrame );
		loop( 180 ){ yield; }

		/** 移動＋弾 */
		MoveAndShot;

	}

	/**
	*	移動＋弾
	*/
	task MoveAndShot{

		/** 初期移動 */
		let nFrame = 20;
		let nEnemyX = GetEnemyX();
		let nEnemyY = GetEnemyY();
		let nMaxGapLength = 180;
		let nGapLength = nMaxGapLength;
		let nAddGapAngle = 1.9;
		let nGapAngle = [ 0, 180 ][ m_nNumber ];
		nGapAngle -= nAddGapAngle * nFrame;
		let nX = GetGapX( nEnemyX, nGapLength, nGapAngle );
		let nY = GetGapY( nEnemyY, nGapLength, nGapAngle );
		SetAction( ACT_MOVE, nFrame );
		SetRoll( nFrame );
		SlowMove( nX, nY, nFrame );
		loop( nFrame ){ yield; }

		/** 回転 */
		SetAction( ACT_MOVE_L, 6000 );
		SetRoll( 6000 );
		_SetGapLength();
		_SetLocation();
		loop( nFrame ){ yield; }

		/** 弾 */
		nFrame = 5;
		let nWay = 2;
		let nNum = 3 + m_nLevel;
		if( m_nLevel == 0 ){ nNum = 4; }
		let nMaxSpeed = 1.8;
		let nNumMaxSpeed = 0.25;
		let nAccelSpeed = - nMaxSpeed / 60;
		let nGraphic = [ US_BILL_RED, US_BILL_PURPLE ][ m_nNumber ];
		let nDelay = 8;
		loop{
			let _nMaxSpeed = nMaxSpeed;
			loop( nNum ){
				_RoundShot02( nX, nY, 0, nAccelSpeed, _nMaxSpeed, nGapAngle - 90, nWay, nGraphic, nDelay );
				_nMaxSpeed += nNumMaxSpeed;
			}
			loop( nFrame ){ yield; }
		}

		/** 間隔角度設定＆位置設定 */
		task _SetLocation{
			loop{
				nX = GetGapX( nEnemyX, nGapLength, nGapAngle );
				nY = GetGapY( nEnemyY, nGapLength, nGapAngle );
				SetPosition( nX, nY );
				yield;
				nGapAngle += nAddGapAngle;
			}
		}

		/** 間隔長さ設定 */
		task _SetGapLength{
			let _nFrame = 360;
			let nAddGapLength = ( nGapLength - 30 ) / _nFrame;
			loop{
				loop( _nFrame ){
					nGapLength -= nAddGapLength;
					yield;
				}
				loop( _nFrame ){
					nGapLength += nAddGapLength;
					yield;
				}
			}
		}

	}

}
