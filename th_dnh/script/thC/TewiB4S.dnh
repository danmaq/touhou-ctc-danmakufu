//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ3B　ボス　因幡 てゐ　スペル4
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[TewiB - スペル4]
#Text[ステージ3B ボス
因幡 てゐ]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Tewi.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		m_bDeadEffect = true;
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		SetTimer( 48 );
		SetLife( 500 );
		SetDamageRate( 13.5, 13.5 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_EIYA + CL_TTH_CHARACTER_NAME_EIYA_TEWI;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){
			if( IsTryLastSpell() ){ DropItemTHC( 18 ); }
		}

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 55 );
		if( m_bDead ){ break; }

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_EIYA + CL_TTH_SPELL_STAGE3_BOSS_4 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );
		if( m_bDead ){ break; }

		let nAssign = 1;

		loop{

			/** 全方向兎弾 */
			SetAction( ACT_SHOT_B5, 105 + 5 * m_nLevel );
			Concentration01( 30 );
			__Wait( 30 );
			if( m_bDead ){ break; }
			RoundRabbitShot( nAssign );
			__Wait( 90 );
			if( m_bDead ){ break; }

			/** 扇状子兎弾 */
			SetAction( ACT_SHOT_A5, 72 + 6 * m_nLevel );
			WideLeveretShot( 1 );
			WideLeveretShot( - 1 );
			__Wait( 90 );
			if( m_bDead ){ break; }

			/** 移動 */
			Move( 60 );
			__Wait( 60 );
			if( m_bDead ){ break; }

			nAssign = - nAssign;

		}

	}

	/**
	*	全方向兎弾
	*/
	task RoundRabbitShot( let nAssign ){

		let nNum = 12 + m_nLevel;
		let nFrame = 5;
		let nWay = 12 + 4 * m_nLevel;
		if( m_nLevel == 0 ){ nWay = 10; }
		let nGapLength = 30;
		let _nX = GetX();
		let _nY = GetY();
		let nAngle = rand( 0, 360 );
		let nWayAngle = 360 / nWay;
		let nGraphic = US_RICE_M_GREEN;
		if( nAssign == - 1 ){ nGraphic = US_RICE_M_BLUE; }

		loop( nNum ){
			let _nAngle = nAngle;
			loop( nWay ){
				let nX = GetGapX( _nX, nGapLength, _nAngle );
				let nY = GetGapY( _nY, nGapLength, _nAngle );
				RabbitShot( nX, nY, _nAngle, nAssign, nGraphic );
				_nAngle += nWayAngle;
			}
			PlaySEEx( seShot1 );
			__Wait( nFrame );
			if( m_bDead ){ break; }
		}

	}

	/**
	*	兎弾
	*	@param nX		弾源x座標
	*	@param nY		弾源y座標
	*	@param nAngle	角度
	*	@param nAssign	割り振り係数
	*	@param nGraphic	弾画像
	*/
	task RabbitShot( let nX, let nY, let nAngle, let nAssign, let nGraphic ){

		let obj = Obj_Create( OBJ_SHOT );
		let nSpeed = 3;
		let nDelay = 12;
		Obj_SetPosition( obj, nX, nY );
		Obj_SetSpeed( obj, nSpeed );
		Obj_SetAngle( obj, nAngle );
		ObjShot_SetGraphic( obj, nGraphic );
		ObjShot_SetDelay( obj, nDelay );

		/** 遅延 */
		loop( nDelay ){ yield; }

		/** カーブ */
		let nAddAngle = 0.6 * nAssign;
		loop( 360 ){
			if( Obj_BeDeleted( obj ) ){ break; }
			nX = Obj_GetX( obj );
			nY = Obj_GetY( obj );
			nAngle += nAddAngle;
			Obj_SetAngle( obj, nAngle );
			if( nX <= CL_MIN_X || nX >= CL_MAX_X ){
				CreateShot01( nX, nY, nSpeed, 180 - nAngle, US_RICE_M_SKY, 0 );
				Obj_Delete( obj );
				break;
			}
			if( nY <= CL_MIN_Y || nY >= CL_MAX_Y ){
				CreateShot01( nX, nY, nSpeed, - nAngle, US_RICE_M_SKY, 0 );
				Obj_Delete( obj );
				break;
			}
			yield;
		}

	}

	/**
	*	扇状子兎弾
	*	@param nAssign	割り振り係数
	*/
	task WideLeveretShot( let nAssign ){

		let nWay = 36 + 6 * m_nLevel;
		let nBaseSpeed = 4;
		let nAccelSpeed = - nBaseSpeed / 30;
		let nWayAngle = 180 / ( nWay - 1 ) * nAssign;
		let nAngle = GetAngleToPlayer() - nWayAngle * ( nWay - 1 ) / 2;
		let nDelay = 6;

		PlaySELoopEx( seShot3, nWay, 6 );
		loop( nWay ){
			let nX = GetX();
			let nY = GetY();
			let nMaxSpeed = rand( 0.4, 2 );
			let nSpeed = nBaseSpeed + nMaxSpeed;
			LeveretShot( nX, nY, nSpeed, nAngle, nAccelSpeed, nMaxSpeed, nDelay );
			yield;
			if( m_bDead ){ break; }
			nAngle += nWayAngle;
		}

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}
