//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		STAGE Ex (妖精雑魚)
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	スクリプトここから
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	THCELをインクルード
//	(FLAN/THCELへのインクルードはTHCELが勝手にやってくれます)
//////////////////////////////////////////////////////////////////////

#include_function ".\INCLUDE\Zako.dnh"


//////////////////////////////////////////////////////////////////////
//	設定定義
//////////////////////////////////////////////////////////////////////

	/**	デフォルトアイテムの落下量を設定します。 */
	ENEMY_ITEMEX_NUM_DEFAULT = 36;
	/**	被弾判定の大きさを設定します。 */
	FLAN_ENEMY_COLLISION_A = 13;
	/**	接触判定の大きさを設定します。 */
	FLAN_ENEMY_COLLISION_B = 8;
	/**	onMainLoopへ処理をまわさないよう設定します。(まわしても何の処理も無い) */
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	定数宣言
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数宣言
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	固有動作実装部
//////////////////////////////////////////////////////////////////////

	/**
	*	敵の移動を管理するタスクです。
	*
	*	@param nLevel レベル(0〜3)
	*/
	task DoMove( let nLevel ){
		let spmax=GetSpeed();
		ascent(i in 0..100){
			SetSpeed(SlowDown( spmax , 0 , i , 100 ));
			yield;
		}
		__Wait(210);
		SetAngle(-90);
		SetSpeed(1);
	}


//////////////////////////////////////////////////////////////////////
//	共通動作実装部
//////////////////////////////////////////////////////////////////////

	/**
	*	敵固有のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTask( let nArgv, let nLevel ){
		DoMove( nLevel );
		__Wait(25);
		let gap=[25,50][nLevel];
		let angle=-180;
		while(angle<180){
			CreateEnemyFromScript("Shadow",GetX()+cos(angle)*gap,GetY()+sin(angle)*gap,4,angle,gap);
			angle+=[24,30][nLevel];
		}
		PlaySEEx(seShadow);
		__Wait(5);

	}

	/**
	*	初期化時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( let nArgv, let nLevel ){
//		CreateDebugWindow();
		SetLife(400);
		SetInvincibility( 15 );
	}

	/**
	*	毎フレームごとに呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
		DarwZakoBack();
		DrawYousei( RECT_YOUSEI_GREEN );
	}

}

//////////////////////////////////////////////////////////////////////
//====================================================================
//	使い魔
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy Shadow{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shadow.dnh"


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = false;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_SHADOW_LIGHTING = true;
	FLAN_SHADOW_COLLISION = true;
	FLAN_SHADOW_DELETE_SHOT = 30;
	FLAN_ENEMY_COLLISION_A = 24;
	FLAN_ENEMY_COLLISION_B = 18;

//////////////////////////////////////////////////////////////////////
//	定数(書換可能)独自ショートカットShadowBody専用
//////////////////////////////////////////////////////////////////////

	let SHADOW_LIFE = 1000;
	let SHADOW_COLOR = SHADOW_COLOR_RED;

//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

task MainAction( let nLevel ){
	SetCoordinateType(COODINATE_TYPE_PARENT);
	ascent(i in 0..[10,24][nLevel]){
		CreateShot01(GetX(),GetY(),Smooth(0.6,2,i,40),i*[23,15][nLevel],US_RICE_S_SKY,10);
		PlaySEEx(seShot1);
		loop(3){yield;}
	}
	__Wait(7);
	ascent(i in 0..[10,24][nLevel]){
		CreateShot01(GetX(),GetY(),Smooth(0.6,2,i,40),-i*[23,15][nLevel],US_RICE_S_ORANGE,10);
		PlaySEEx(seShot1);
		loop(3){yield;}
	}
	__Wait(100);
	ascent(i in 0..[10,24][nLevel]){
		CreateShot01(GetX(),GetY(),Smooth(2,4,i,40),i*[23,15][nLevel],US_RICE_S_WHITE,10);
		PlaySEEx(seShot1);
		loop(3){yield;}
	}
}
task SubAction01( let nLevel ){
	let gap=GetArgument();
	let angle=0;
	let angle_b=GetAngle();
	while(!BeParentVanished()){
		SetX(cos(angle_b+angle)*gap);
		SetY(sin(angle_b+angle)*gap);
		yield;
		angle+=5.1
	}
	VanishEnemy();
}


	#include_function ".\INCLUDE\ShadowBody.dnh"

}
