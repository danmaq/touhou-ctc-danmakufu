//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ1B　ボス　蓬莱山 輝夜　スペル2
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////


#ScriptVersion[2]
#BackGround[User]
#Title[Kaguya - スペル2]
#Text[ステージ1B ボス
蓬莱山 輝夜]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Kaguya.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 0;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** ダメージ率（スペルプラクティス及び単体テスト時に固くする） */
	let m_nDamageRate = 1;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		m_bDeadEffect = true;
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
			m_nDamageRate = 0.8;
		}
		else if( m_bStagePractice ){ m_nDamageRate = 0.8; }
		SetTimer( 48 );
		SetLife( 400 );
		SetDamageRate( 5 * m_nDamageRate, 5 * m_nDamageRate );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_EIYA + CL_TTH_CHARACTER_NAME_EIYA_KAGUYA;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){
			if( IsTryLastSpell() ){ DropItemTHC( 10 ); }
		}

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, false );
		__Wait( 55 );
		if( m_bDead ){ break; }

		/** スペルカード発動 */
		SetAction( ACT_SPELL4, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_EIYA + CL_TTH_SPELL_STAGE1_BOSS_2 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );
		if( m_bDead ){ break; }

		/** 使い魔召喚 */
		SetAction( ACT_SHOT_B5, 150 );
		PlaySE( sePower );
		Concentration01( 120 );
		__Wait( 120 );
		if( m_bDead ){ break; }
		SummonShadow();
		__Wait( 60 );
		if( m_bDead ){ break; }
		SetAction( ACT_SHOT_A3, 6000 );
		SetDamageRate( 13 * m_nDamageRate, 13 * m_nDamageRate );

		let nTurn = 0;

		loop{

			/** 全方向弾 */
			RoundShotEx( nTurn );
			__Wait( 36 );
			if( m_bDead ){ break; }

			nTurn ++;

		}

	}

	/**
	*	使い魔召喚
	*/
	function SummonShadow{

		let nAssign = - 1;
		let nGapX = 100;
		let nX = GetX();
		let nY = GetY();
		let _nX = CL_CEN_X - nGapX;
		let _nY = CL_MIN_Y + 120;

		PlaySEEx( seShadow );
		loop( 2 ){
			CreateEnemyFromScript( "Shadow", nX, nY, 0, 0, [ _nX, _nY, 0, nAssign ] );
			nAssign = 1;
			_nX = CL_CEN_X + nGapX;
		}

	}

	/**
	*	全方向弾
	*	@param nTurn	ターン数
	*/
	function RoundShotEx( let nTurn ){

		let nWay = 16 + 8 * m_nLevel;
		let nSpeed = 0.6;
		let nMaxSpeed = 1.4 + 0.2 * m_nLevel;
		let nAccelSpeed = ( nMaxSpeed - nSpeed) / 60;
		let nAngle = rand( 0, 360 );
		let nGraphic = [ US_RICE_M_PURPLE, US_RICE_M_RED, US_RICE_M_PURPLE, US_RICE_M_BLUE ][ nTurn % 4 ];
		let nDelay = 10;

		PlaySEEx( seShot3 );
		_RoundShot02( GetX(), GetY(), nSpeed, nAccelSpeed, nMaxSpeed, nAngle, nWay, nGraphic, nDelay );

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	使い魔
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy Shadow{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shadow.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = false;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_SHADOW_LIGHTING = true;
	FLAN_SHADOW_COLLISION = true;
	FLAN_SHADOW_DELETE_SHOT = 32;
	FLAN_ENEMY_COLLISION_A = 24;
	FLAN_ENEMY_COLLISION_B = 18;
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** ダメージ率（スペルプラクティス及び単体テスト時に固くする） */
	let m_nDamageRate = 1;

	/** 使い魔番号 */
	let m_nNumber;

	/** 設置座標 */
	let m_nX;
	let m_nY;

	/** 設置座標からの間隔角度 */
	let m_nGapAngle;

	/** 割り振り係数 */
	let m_nAssign;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice || m_bStagePractice ){ m_nDamageRate = 0.8; }
		m_nX = nArgv[ 0 ];
		m_nY = nArgv[ 1 ];
		m_nNumber = nArgv[ 2 ];
		m_nAssign = nArgv[ 3 ];
		m_nGapAngle = - 90 + 120 * m_nNumber;
		if( m_nAssign < 0 ){ FLAN_SHADOW_COLLISION = false; }
		let nFrame = 30;
		if( m_nNumber == 0 ){ nFrame = 60; }
		SetLife( 64 );
		SetDamageRateDelayEx( 13 * m_nDamageRate, 13 * m_nDamageRate, 50, 50, nFrame );
		CheckBossLife();

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*	@param bIsAppear 具現化中かどうか
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*	@param bIsAppear 具現化中かどうか
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*	@param bIsAppear 具現化中かどうか
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){

		/** 使い魔描画 */
		let nShadowImage = SHADOW_IMAGE_6S;
		let nShadowColor = SHADOW_COLOR_RED;
		let nAngle = 2 * m_nFlanCount;
		let nScale = 0.8;
		if( m_nAssign < 0 ){
			nShadowColor = SHADOW_COLOR_BLUE;
			nAngle = - nAngle;
		}
		DrawShadow( nShadowImage, nShadowColor, nAngle, nScale, nScale );

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 移動 */
		Move();

		/** 分裂 */
		if( m_nNumber == 0 ){
			loop( 30 ){ yield; }
			let nX = GetX();
			let nY = GetY();
			ascent( let i in 1 .. 3 ){
				nArgv[ 2 ] = i;
				CreateEnemyFromScript( "Shadow", nX, nY, 0, 0, nArgv );
			}
		}
		loop( 30 ){ yield; }

		let nFrame = 21 - 3 * m_nLevel;

		loop{

			/** 直線弾 */
			LineShotEx();
			loop( nFrame ){ yield; }

		}

	}

	/**
	*	直線弾
	*/
	function LineShotEx{

		let nNum = 3 + m_nLevel;
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 2 + 0.3 * m_nLevel;
		let nAngle = m_nGapAngle - 90;
		let nGraphic = US_RICE_S_RED;
		if( m_nAssign < 0 ){
			nAngle = m_nGapAngle + 90;
			nGraphic = US_RICE_S_BLUE;
		}
		let nDelay = 0;
		let nNumDelay=4;

		PlaySEEx( seShot1 );
		loop( nNum ){
			CreateShot01( nX, nY, nSpeed, nAngle, nGraphic, nDelay );
			nDelay += nNumDelay;
		}

	}

	/**
	*	移動
	*/
	task Move{

		if( m_nNumber == 0 ){
			let nFrame = 30;
			SetMovePosition02( m_nX, m_nY, nFrame );
			loop( nFrame ){ yield; }
		}

		let nGapLength = 0;
		_SetGapLength();
		_SetGapAngle();
		_SetLocation();

		/** 位置設定 */
		task _SetLocation{
			loop{
				let nX = GetGapX( m_nX, nGapLength, m_nGapAngle );
				let nY = GetGapY( m_nY, nGapLength, m_nGapAngle );
				SetPosition( nX, nY );
				yield;
			}
		}

		/** 間隔長さ設定 */
		task _SetGapLength{
			let nFrame = 30;
			let nAddGapLength = 30 / nFrame;
			loop( nFrame ){
				nGapLength += nAddGapLength;
				yield;
			}
		}

		/** 間隔角度設定 */
		task _SetGapAngle{
			let nAddGapAngle = 360 / 305 * m_nAssign;
			loop{
				m_nGapAngle += nAddGapAngle;
				yield;
			}
		}

	}

}
