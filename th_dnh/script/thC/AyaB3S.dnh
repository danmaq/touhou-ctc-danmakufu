//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ2C　ボス　射命丸 文　スペル3
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[AyaB - スペル3]
#Text[ステージ2C ボス
射命丸 文]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Aya.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 100;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		m_bDeadEffect = true;
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		SetTimer( 47 );
		SetLife( 500 );
		SetDamageRate( 13.5, 13.5 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KAEI + CL_TTH_CHARACTER_NAME_KAEI_AYA;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){
			if( IsTryLastSpell() ){ DropItemTHC( 14 ); }
		}

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 55 );
		if( m_bDead ){ break; }

		/** スペルカード発動 */
		SetAction( ACT_SPELL3, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_KAEI + CL_TTH_SPELL_STAGE2_BOSS_3 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );
		if( m_bDead ){ break; }

		/** 回転弾 */
		SetAction( ACT_SHOT_A3, 195 );
		PlaySELoopEx( seShot3, 195, 6 );
		RollShot();

		let nTurn = 0;

		loop{

			__Wait( 130 );
			if( m_bDead ){ break; }

			/** 天狗弾 */
			PlaySEEx( seKira2 );
			Concentration01( 30 );
			__Wait( 30 );
			if( m_bDead ){ break; }
			_TenguShot( nTurn );
			__Wait( 35 );
			if( m_bDead ){ break; }

			/** 移動 */
			Move( 60 );
			__Wait( 60 );
			if( m_bDead ){ break; }

			SetAction( ACT_SHOT_A3, 210 );
			PlaySELoopEx( seShot3, 210, 6 );
			__Wait( 15 );
			if( m_bDead ){ break; }

			nTurn ++;

		}

	}

	/**
	*	回転弾
	*/
	task RollShot{

		let nWay = 2 + m_nLevel;
		if( m_nLevel == 0 ){ nWay = 3; }
		let nWayAngle = 360 / nWay;
		let nBaseAngle = 90;
		let nFrame = trunc( 20 * 2 * 2.5 );

		ascent( let i in 0 .. nWay ){
			let nAngle = nBaseAngle + nWayAngle * i;
			_RollShot( nAngle, 1 );
		}
		if( m_nLevel > 0 ){
			__Wait( nFrame * 2 );
			if( m_bDead ){ break; }
			ascent( let i in 0 .. nWay ){
				let nAngle = nBaseAngle + nWayAngle * i;
				_RollShot( nAngle, - 1 );
			}
		}

	}

	/**
	*	回転弾（1セット）
	*	@param nAngle	角度
	*	@param nAssign	割り振り係数
	*/
	task _RollShot( let nAngle, let nAssign ){

		let nFrame = 2;
		let nGapLength = 24;
		let nWay = 20;
		let nSpeed = 1.6;
		let nWaySpeed = ( 3.4 + 0.2 * m_nLevel - nSpeed ) / nWay;
		let nWayAngle = 120 / nWay * nAssign;
		let nGraphic = US_SCALE_RED;
		if( nAssign == - 1 ){ nGraphic = US_SCALE_ORANGE; }
		let nDelay = 10;

		loop{
			loop( nWay ){
				if( GetSpeed() == 0 ){
					let nX = GetGapX( GetX(), nGapLength, nAngle );
					let nY = GetGapY( GetY(), nGapLength, nAngle );
					CreateShot01( nX, nY, nSpeed, nAngle, nGraphic, nDelay );
				}
				__Wait( nFrame );
				if( m_bDead ){ break; }
				nSpeed += nWaySpeed;
				nAngle += nWayAngle;
			}
			if( m_bDead ){ break; }
			nWaySpeed = - nWaySpeed;
		}

	}

	/**
	*	天狗弾
	*	@param nTurn	ターン数
	*/
	function _TenguShot( let nTurn ){

		let nSpeed = 1.5 + 0.5 * m_nLevel;
		let nAngle = GetAngleToPlayer();
		if( nTurn > 6 ){ nTurn = 6; }

		SetAction( ACT_SHOT_B5, 36 );
		CreateShotFromScript( "TenguShot", GetX(), GetY(), nSpeed, nAngle, 0, nTurn );
		PlaySEEx( seShot2 );

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 60;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	天狗弾
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_shot TenguShot{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shot.dnh"


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = true;
	FLAN_RINGOUT_BORDER = 64;
	FLAN_ESS_NOCALL_MAINLOOP = false;


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** 弾画像 */
	let m_szImageShot = dotShotTengu;
	/** 幅描画倍率 */
	let m_nScaleY = 0;
	/** 描画するか */
	let m_bDraw = true;
	/** 存在するか */
	let m_bAlive = true;
	/** 残像オブジェクト配列 */
	let m_aobjBlur = [];


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		SetBombResist();

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 画面外で存在を消す（消滅待ち） */
		if( IsOut( 64 ) ){ m_bAlive = false; }

		/** 当たり判定 */
		ascent( let i in 0 .. length( m_aobjBlur ) ){
			SetCollisionB( Obj_GetX( m_aobjBlur[ i ] ), Obj_GetY( m_aobjBlur[ i ] ), 13 );
		}

	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 弾描画 */
		if( m_bDraw ){
			SetGraphicRect( 0, 0, 128, 32 );
			SetRenderState( ADD );
			SetColor( 255, 255, 255 );
			SetGraphicAngle( 0, 0, GetAngle() );
			SetGraphicScale( 1, m_nScaleY );
			SetTexture( m_szImageShot );
			DrawGraphic( GetX(), GetY() );
		}

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 速度設定 */
		_SetSpeed( nArgv );

		/** 反射チェック */
		CheckReflect();

		/** 拡大率設定 */
		_SetScale();

		/** 残像 */
		while( GetSpeed() < 0 ){ yield; }
		m_bDraw = false;
		while( m_bAlive ){
			Blur();
			yield;
		}

		/** 残像消滅待ち */
		loop( 15 ){ yield; }
		End();

	}

	/**
	*	速度設定
	*	@param nTurn	ターン数
	*/
	task _SetSpeed( let nTurn ){

		let nSpeed = GetSpeed();
		let nAccelSpeed = ( 6 + 2 * m_nLevel + nTurn - nSpeed ) / 60;
		loop{
			nSpeed += nAccelSpeed;
			SetSpeed( nSpeed );
			yield;
		}

	}

	/**
	*	反射チェック
	*/
	task CheckReflect{

		let nAngle = GetAngle();
		loop{
			if( GetY() <= CL_MIN_Y ){
				nAngle = - nAngle;
				break;
			}
			let nX = GetX();
			if( nX <= CL_MIN_X || nX >= CL_MAX_X ){
				nAngle = 180 - nAngle;
				break;
			}
			yield;
		}
		SetAngle( nAngle );

	}

	/**
	*	拡大率設定
	*/
	task _SetScale{

		let nFrame = 15;
		let nAddScaleY = 1 / nFrame;
		loop( nFrame ){
			m_nScaleY += nAddScaleY;
			yield;
		}

	}

	/**
	*	残像
	*/
	task Blur{

		let obj = Obj_Create( OBJ_SHOT );
		m_aobjBlur = m_aobjBlur ~ [ obj ];
		Obj_SetPosition( obj, GetX(), GetY() );
		Obj_SetSpeed( obj, 0 );
		Obj_SetAngle( obj, GetAngle() );
		ObjShot_SetGraphic( obj, US_TENGU );
		Obj_SetCollisionToPlayer( obj, false );
		ObjShot_SetBombResist( obj, true );

		loop( 12 ){ yield; }
		m_aobjBlur = erase( m_aobjBlur, 0 );
		Obj_Delete( obj );

	}

}
