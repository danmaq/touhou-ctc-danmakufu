//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ6　ボス　博麗 霊夢（白）　通常攻撃4
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////


#ScriptVersion[2]
#BackGround[User]
#Title[ReimuW - 通常攻撃4]
#Text[ステージ6 ボス
博麗 霊夢（白）]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\ReimuW.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 125;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		SetTimer( 45 );
		SetLife( 2500 );
		SetDamageRate( 75, 50 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );
		CheckExplosion01Ex();
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		else{ CheckDuelTimer(); }

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_YOUMU + CL_TTH_CHARACTER_NAME_YOUMU_REIMU;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

		/** 個別終了設定 */
		EndExplosion01Ex();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 残像描画 */
		DrawBlur( m_szImageBoss );

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 180;
		SetAction( ACT_MOVE, nFrame );
		SetBlur( nFrame );
		BossMoveHome( nFrame, true );
		__Wait( nFrame );

		let nAssign = 1;

		loop{

			/** 全方向レーザー設置弾 */
			SetAction( ACT_SHOT_B5, 300 );
			Concentration01( 30 );
			__Wait( 30 );
			RoundSetLaserShot( nAssign );
			__Wait( 135 );

			/** 使い魔召喚 */
			SummonShadow( nAssign );
			PlaySEDelayLoop( seShot1, 15, 120, 5 );
			__Wait( 120 );

			/** 移動 */
			Move( 105 );
			__Wait( 135 );

			nAssign = - nAssign;

		}

	}

	/**
	*	全方向レーザー設置弾
	*	@param nAssign	割り振り係数
	*/
	task RoundSetLaserShot( let nAssign ){

		let nWay = 18;
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 4;
		let nWayAngle = 360 / nWay;
		let nAngle = GetAngleToPlayer();

		PlaySEEx( seShot2 );
		loop( nWay ){
			SetLaserShot( nX, nY, nSpeed, nAngle, nWayAngle, nAssign );
			nAngle += nWayAngle;
		}

	}

	/**
	*	レーザー設置弾
	*	@param nX			弾源x座標
	*	@param nY			弾源y座標
	*	@param nSpeed		速度
	*	@param nAngle		角度
	*	@param nWayAngle	隣の弾との角度
	*	@param nAssign		割り振り係数
	*/
	task SetLaserShot( let nX, let nY, let nSpeed, let nAngle, let nWayAngle, let nAssign ){

		let obj = Obj_Create( OBJ_SHOT );
		Obj_SetPosition( obj, nX, nY );
		Obj_SetSpeed( obj, nSpeed );
		Obj_SetAngle( obj, nAngle );
		ObjShot_SetGraphic( obj, US_BALL_L_WHITE );

		let nFrame = 20 - 2 * m_nLevel;
		loop( nFrame ){ yield; }

		nFrame = 14 - 2 * m_nLevel;
		let nRandAngle = 15;
		while( !Obj_BeDeleted( obj ) ){
			let _nX = Obj_GetX( obj );
			let _nY = Obj_GetY( obj );
			let _nAngle = nAngle + 90 * nAssign + RandBlur( nRandAngle );
			ShootLaser( _nX, _nY, _nAngle );
			loop( nFrame ){ yield; }
			nAssign = - nAssign;
		}

	}

	/**
	*	射出レーザー
	*	@param nX		レーザー源x座標
	*	@param nY		レーザー源y座標
	*	@param nAngle	角度
	*/
	task ShootLaser( let nX, let nY, let nAngle ){

		let nKill = 120;
		LaserSource( nX, nY, nKill - 20 );

		let obj = Obj_Create( OBJ_LASER );
		Obj_SetPosition( obj, nX, nY );
		Obj_SetAngle( obj, nAngle );
		ObjShot_SetGraphic( obj, US_BEAM_BLUE );
		ObjLaser_SetWidth( obj, 2 );
		Obj_SetCollisionToPlayer( obj, false );
		ObjLaser_SetSource( obj, false );
		ObjShot_ToItem( obj, false );

		let nFrame = 30;
		let nLength = 0;
		let nAddLength = 400 / nFrame;
		loop( nFrame ){
			nLength += nAddLength;
			ObjLaser_SetLength( obj, nLength );
			yield;
		}
		loop( 45 ){ yield; }

		let nSpeed = 18;
		let nLength = 100;
		let nWidth = 20;
		let nGraphic = US_BALL_M_A_BLUE;
		CreateLaser01( nX, nY, nSpeed, nAngle, nLength, nWidth, nGraphic, 0 );
		PlaySEEx( seLaser2 );
		loop( nKill - nFrame - 30 ){ yield; }

		ObjShot_FadeDelete( obj );

	}

	/**
	*	レーザー源
	*	@param nX		レーザー源x座標
	*	@param nY		レーザー源y座標
	*	@param nKill	消滅までのフレーム数
	*/
	task LaserSource( let nX, let nY, let nKill ){

		let obj = Obj_Create( OBJ_SHOT );
		Obj_SetPosition( obj, nX, nY );
		ObjShot_SetGraphic( obj, US_BALL_S_A_BLUE );
		ObjShot_SetBombResist( obj, true );

		loop( nKill ){ yield; }
		ObjShot_FadeDelete( obj );

	}

	/**
	*	使い魔召喚
	*	@param nAssign	割り振り係数
	*/
	task SummonShadow( let nAssign ){

		let nWay = 6;
		let _nX = GetX();
		let _nY = GetY();
		let nWayAngle = 60;
		let nGapAngle = - 90;
		let nGapLength = 100;

		PlaySEEx( seShadow );
		loop( nWay ){
			let nX = GetGapX( _nX, nGapLength, nGapAngle );
			let nY = GetGapY( _nY, nGapLength, nGapAngle );
			let nAngle = nGapAngle - 210 * nAssign;
			CreateShotFromScript( "Shadow", _nX, _nY, 0, 0, 0, [ nX, nY, nAngle, nAssign ] );
			nGapAngle += nWayAngle;
		}

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 60;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		SetBlur( nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	使い魔
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_shot Shadow{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shot.dnh"


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = true;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** 設置座標 */
	let m_nX;
	let m_nY;

	/** 弾角度 */
	let m_nAngle;

	/** 割り振り係数 */
	let m_nAssign;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		m_bShadow = true;
		m_bShadowDead = true;
		m_nX = nArgv[ 0 ];
		m_nY = nArgv[ 1 ];
		m_nAngle = nArgv[ 2 ];
		m_nAssign = nArgv[ 3 ];
		CheckBossLife();

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 魔法陣描画 */
		let nShadowImage = SHADOW_IMAGE_6S;
		let nShadowColor = SHADOW_COLOR_WHITE;
		let nAngle = 2 * m_nFlanCount;
		let nScale = 0.8;
		DrawShadowEx( nShadowImage, nShadowColor, nAngle, nScale );

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 15;
		SlowMove( m_nX, m_nY, nFrame );
		loop( nFrame ){ yield; }

		/** 回転弾 */
		RollShot();
		loop( 120 ){ yield; }

		/** 消滅 */
		End();

	}

	/**
	*	回転弾
	*/
	task RollShot{

		let nFrame = 5 - m_nLevel;
		let _nNum = trunc( 45 / nFrame );
		let nNum = trunc( 90 / nFrame );
		let nSpeed = 3.6 + 0.2 * m_nLevel;
		let nNumAngle = 360 / nNum * m_nAssign;
		let nGraphic = US_BILL_WHITE;
		let nDelay = 10;

		loop( _nNum ){
			CreateShot01( m_nX, m_nY, nSpeed, m_nAngle, nGraphic, nDelay );
			loop( nFrame ){ yield; }
		}
		loop( nNum ){
			m_nAngle += nNumAngle;
			CreateShot01( m_nX, m_nY, nSpeed, m_nAngle, nGraphic, nDelay );
			loop( nFrame ){ yield; }
		}

	}

}
