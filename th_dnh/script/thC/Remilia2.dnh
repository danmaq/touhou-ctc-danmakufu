//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ2A　ボス　レミリア・スカーレット　通常攻撃2
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Remilia - 通常攻撃2]
#Text[ステージ2A ボス
レミリア・スカーレット]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Remilia.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		SetTimer( 45 );
		SetLife( 2500 );
		SetDamageRate( 85, 85 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND4 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KOUMA + CL_TTH_CHARACTER_NAME_KOUMA_REMILIA;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 150;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 180 );

		let nAssign = - 1;

		loop{

			/** 使い魔召喚 */
			SummonShadow( nAssign );
			__Wait( 60 );

			loop( 2 ){

				/** 移動 */
				Move( 60 );
				__Wait( 60 );

				/** 扇状ばらつき弾 */
				WideVariedShot( nAssign );
				__Wait( 60 );

			}

			/** 移動 */
			Move( 90 );
			__Wait( 120 );

			nAssign = - nAssign;

		}

	}

	/**
	*	使い魔召喚
	*	@param nAssign	割り振り係数
	*/
	task SummonShadow( let nAssign ){

		let nWay = 4 + 2 * m_nLevel;
		let nFrame = 5;
		let nGapLength = 80;
		let _nX = GetX();
		let _nY = GetY();
		let nWideAngle = 156 + 8 * m_nLevel;
		let nWayAngle = nWideAngle / ( nWay - 1 ) * nAssign;
		let nAngle = 90 - nWayAngle * ( nWay - 1 ) / 2;

		SetAction( ACT_SHOT_A5, 60 );
		loop( nWay ){
			let nX = GetGapX( _nX, nGapLength, nAngle );
			let nY = GetGapY( _nY, nGapLength, nAngle );
			CreateEnemyFromScript( "Shadow", _nX, _nY, 0, nAngle, [ nX, nY ] );
			PlaySEEx( seShadow );
			__Wait( nFrame );
			nAngle += nWayAngle;
		}

	}

	/**
	*	扇状ばらつき弾
	*	@param nAssign	割り振り係数
	*/
	task WideVariedShot( let nAssign ){

		let nWay = 5 + 2 * m_nLevel;
		let nFrame = 5;
		let nX = GetX();
		let nY = GetY();
		let nWideAngle = 156 + 8 * m_nLevel;
		let nWayAngle = - nWideAngle / ( nWay - 1 ) * nAssign;
		let nAngle = GetAngleToPlayer() - nWayAngle * ( nWay - 1 ) / 2;

		SetAction( ACT_SHOT_A5, 60 );
		loop( nWay ){
			VariedShot( nX, nY, nAngle );
			__Wait( nFrame );
			nAngle += nWayAngle;
		}

	}

	/**
	*	ばらつき弾
	*	@param nX		弾源x座標
	*	@param nY		弾源y座標
	*	@param nAngle	角度
	*/
	function VariedShot( let nX, let nY, let nAngle ){

		let nNum = 21;
		let nSpeed = 1;
		let nNumSpeed = ( 4 - nSpeed ) / ( nNum - 1 );
		let anGraphic = [ US_BALL_SS_RED, US_BALL_S_RED, US_BALL_M_RED, US_BALL_L_RED ];
		let nGra = 0;
		let nDelay = 15;

		PlaySEEx( seShot1 );
		ascent( let i in 0 .. nNum ){
			if( i == 7 || i == 14 || i == 20 ){ nGra ++; }
			let _nAngle = nAngle + RandBlur( 4 );
			if( i == nNum - 1 ){ _nAngle = nAngle; }
			CreateShot01( nX, nY, nSpeed, _nAngle, anGraphic[ nGra ], nDelay );
			nSpeed += nNumSpeed;
		}

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	使い魔
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy Shadow{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shadow.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = false;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_SHADOW_LIGHTING = false;
	FLAN_SHADOW_COLLISION = true;
	FLAN_SHADOW_DELETE_SHOT = 32;
	FLAN_ENEMY_COLLISION_A = 24;
	FLAN_ENEMY_COLLISION_B = 18;
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** 移動先座標 */
	let m_nX;
	let m_nY;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		SetLife( 150 );
		_SetDamageRateDelayEx( 85, 85, 50, 50, 30 );
		BehaviorShadow( CHAR_SHADOW_BAT );

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*	@param bIsAppear 具現化中かどうか
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*	@param bIsAppear 具現化中かどうか
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*	@param bIsAppear 具現化中かどうか
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){

		/** 使い魔描画 */
		let nShadowImage = SHADOW_IMAGE_6S;
		let nShadowColor = SHADOW_COLOR_RED;
		let nAngle = 2 * m_nFlanCount;
		let nScale = 0.8;
		DrawShadow( nShadowImage, nShadowColor, nAngle, nScale, nScale );
		DrawShadowCharFloat();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		SetColor( 255, 30, 30 );
		Concentration01( 30 );
		SetColor( 255, 255, 255 );
		SlowMove( nArgv[ 0 ], nArgv[ 1 ], 40 );
		loop( 60 ){ yield; }

		/** ばらつき弾 */
		let nAngle = GetAngle();
		if( GetPlayerY() < GetY() ){ nAngle = GetAngleToPlayer(); }
		VariedShot( nAngle );
		loop( 120 ){ yield; }
		nAngle = GetAngle;
		if( GetPlayerY() < GetY() ){ nAngle = GetAngleToPlayer(); }
		VariedShot( nAngle );
		loop( 60 ){ yield; }

		/** 移動 */
		SetSpeed( 2 );

	}

	/**
	*	ばらつき弾
	*	@param nAngle	角度
	*/
	function VariedShot( let nAngle ){

		let nNum = 21;
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 1;
		let nNumSpeed = ( 3.8 - nSpeed ) / ( nNum - 1 );
		let anGraphic = [ US_BALL_SS_RED, US_BALL_S_RED, US_BALL_M_RED, US_BALL_L_RED ];
		let nGra = 0;
		let nDelay = 15;

		PlaySEEx( seShot1 );
		ascent( let i in 0 .. nNum ){
			if( i == 7 || i == 14 || i == 20 ){ nGra ++; }
			let _nAngle = nAngle + RandBlur( 3.5 );
			if( i == nNum - 1 ){ _nAngle = nAngle; }
			CreateShot01( nX, nY, nSpeed, _nAngle, anGraphic[ nGra ], nDelay );
			nSpeed += nNumSpeed;
		}

	}

}
