//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ2C　ボス　射命丸 文　通常攻撃1
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[AyaB - 通常攻撃1]
#Text[ステージ2C ボス
射命丸 文]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Aya.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			SetPosition( FLAN_BOSS_HOME_X, FLAN_BOSS_HOME_Y + RandBlur( 0.1 ) );
		}
		SetTimer( 45 );
		SetLife( 2500 );
		SetDamageRate( 40, 40 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 61 );
		BehaviorBoss( ACT_STAND3 );
		CheckExplosion01Ex();

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KAEI + CL_TTH_CHARACTER_NAME_KAEI_AYA;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

		/** 個別終了設定 */
		EndExplosion01Ex();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		__Wait( 60 );

		/** 使い魔召喚 */
		Concentration01( 60 );
		__Wait( 60 );
		let nX = GetX();
		let nY = GetY();
		ascent( let i in 0 .. 1 + m_nLevel ){
			CreateShotFromScript( "Shadow", nX, nY, 0, 0, 0, i );
		}
		PlaySEEx( seShadow );
		__Wait( 60 );
		SetDamageRate( 90, 90 );

		let bFirst = true;

		loop{

			/** 全方向弾 */
			SetAction( ACT_SHOT_A3, 150 );
			RoundShotEx();
			__Wait( 60 );
			if( bFirst ){ bFirst = false; }
			else{ RoundShotEx(); }
			__Wait( 60 );

			/** 移動 */
			Move( 30 );
			__Wait( 60 );

		}

	}

	/**
	*	全方向弾
	*/
	task RoundShotEx{

		let nNum = 1 + m_nLevel;
		let nFrame = 5;
		let nWay = 24;
		if( m_nLevel == 3 ){ nWay = 30; }
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 3.8 + 0.3 * m_nLevel;
		let nAngle = 90 + 360 / nWay / 2;
		let anGraphic = [ US_BUTTERFLY_RED, US_BUTTERFLY_BLUE ];
		let nDelay = 15;

		ascent( let i in 0 .. nNum ){
			_RoundShot01( nX, nY, nSpeed, nAngle, nWay, anGraphic[ i % 2 ], nDelay );
			PlaySEEx( seShot1 );
			__Wait( nFrame );
		}

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	使い魔
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_shot Shadow{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shot.dnh"
	#include_function ".\INCLUDE\ShadowAnimation.dnh"


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = true;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** 使い魔番号 */
	let m_nNumber;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		m_bShadow = true;
		m_bShadowLighting = false;
		m_bShadowDead = true;
		m_nNumber = nArgv;
		CheckBossLife();
		BehaviorShadow( CHAR_SHADOW_CROW );

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 魔法陣描画 */
		let nShadowImage = SHADOW_IMAGE_6S;
		let nShadowColor = SHADOW_COLOR_WHITE;
		let nAngle = 2 * m_nFlanCount;
		let nScale = 0.8;
		DrawShadowEx( nShadowImage, nShadowColor, nAngle, nScale );
		_DrawShadowCharFloat();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 位置設定 */
		_SetLocation();
		loop( 100 + 10 * m_nNumber ){ yield; }

		loop{
			/** 天狗弾 */
			let nSpeed = - 2;
			let nAngle = GetAngleToPlayer();
			CreateShotFromScript( "TenguShot", GetX(), GetY(), nSpeed, nAngle, 0, 0 );
			PlaySEEx( seShot2 );
			loop( 100 ){ yield; }
		}

	}

	/**
	*	位置設定
	*/
	task _SetLocation{

		let nXTurnAngle = 20;
		let nZTurnAngle = 0;
		let nGapLength = 0;
		let nGapAngle = 360 / ( m_nLevel + 1 ) * m_nNumber;
		_SetGapLength();
		_SetGapAngle();
		_SetZTurnAngle();

		/** 位置設定 */
		loop{
			let nEnemyX = GetEnemyX();
			let nEnemyY = GetEnemyY();
			let nX = GetGapX( nEnemyX, nGapLength, nGapAngle );
			let nY = GetGapY( nEnemyY, nGapLength * sin( nXTurnAngle ), nGapAngle );
			let _nGapLength = GetGapLength( nEnemyX, nEnemyY, nX, nY );
			let _nGapAngle = GetGapAngle( nEnemyX, nEnemyY, nX, nY ) + nZTurnAngle;
			let _nX = GetGapX( nEnemyX, _nGapLength, _nGapAngle );
			let _nY = GetGapY( nEnemyY, _nGapLength, _nGapAngle );
			SetPosition( _nX, _nY );
			yield;
		}

		/** 間隔長さ設定 */
		task _SetGapLength{
			let nFrame = 60;
			let nAddGapLength = 90 / nFrame;
			loop( nFrame ){
				nGapLength += nAddGapLength;
				yield;
			}
		}

		/** 間隔角度設定 */
		task _SetGapAngle{
			let nAddGapAngle = - 360 / 120;
			loop{
				nGapAngle += nAddGapAngle;
				yield;
			}
		}

		/** z軸回転角度設定 */
		task _SetZTurnAngle{
			let nAddZTurnAngle = - 360 / 900;
			loop{
				nZTurnAngle += nAddZTurnAngle;
				yield;
			}
		}

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	天狗弾
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_shot TenguShot{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shot.dnh"


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = true;
	FLAN_RINGOUT_BORDER = 64;
	FLAN_ESS_NOCALL_MAINLOOP = false;


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** 弾画像 */
	let m_szImageShot = dotShotTengu;
	/** 幅描画倍率 */
	let m_nScaleY = 0;
	/** 描画するか */
	let m_bDraw = true;
	/** 存在するか */
	let m_bAlive = true;
	/** 残像オブジェクト配列 */
	let m_aobjBlur = [];


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		SetBombResist();

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 画面外で存在を消す（消滅待ち） */
		if( IsOut( 64 ) ){ m_bAlive = false; }

		/** 当たり判定 */
		ascent( let i in 0 .. length( m_aobjBlur ) ){
			SetCollisionB( Obj_GetX( m_aobjBlur[ i ] ), Obj_GetY( m_aobjBlur[ i ] ), 13 );
		}

	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 弾描画 */
		if( m_bDraw ){
			SetGraphicRect( 0, 0, 128, 32 );
			SetRenderState( ADD );
			SetColor( 255, 255, 255 );
			SetGraphicAngle( 0, 0, GetAngle() );
			SetGraphicScale( 1, m_nScaleY );
			SetTexture( m_szImageShot );
			DrawGraphic( GetX(), GetY() );
		}

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 速度設定 */
		_SetSpeed();

		/** 反射チェック */
		CheckReflect();

		/** 拡大率設定 */
		_SetScale();

		/** 残像 */
		while( GetSpeed() < 0 ){ yield; }
		m_bDraw = false;
		while( m_bAlive ){
			Blur();
			yield;
		}

		/** 残像消滅待ち */
		loop( 15 ){ yield; }
		End();

	}

	/**
	*	速度設定
	*/
	task _SetSpeed{

		let nSpeed = GetSpeed();
		let nAccelSpeed = ( 6.5 + 0.5 * m_nLevel - nSpeed ) / 60;
		loop{
			nSpeed += nAccelSpeed;
			SetSpeed( nSpeed );
			yield;
		}

	}

	/**
	*	反射チェック
	*/
	task CheckReflect{

		let nAngle = GetAngle();
		loop{
			if( GetY() <= CL_MIN_Y ){
				nAngle = - nAngle;
				break;
			}
			let nX = GetX();
			if( nX <= CL_MIN_X || nX >= CL_MAX_X ){
				nAngle = 180 - nAngle;
				break;
			}
			yield;
		}
		SetAngle( nAngle );

	}

	/**
	*	拡大率設定
	*/
	task _SetScale{

		let nFrame = 15;
		let nAddScaleY = 1 / nFrame;
		loop( nFrame ){
			m_nScaleY += nAddScaleY;
			yield;
		}

	}

	/**
	*	残像
	*/
	task Blur{

		let obj = Obj_Create( OBJ_SHOT );
		m_aobjBlur = m_aobjBlur ~ [ obj ];
		Obj_SetPosition( obj, GetX(), GetY() );
		Obj_SetSpeed( obj, 0 );
		Obj_SetAngle( obj, GetAngle() );
		ObjShot_SetGraphic( obj, US_TENGU );
		Obj_SetCollisionToPlayer( obj, false );
		ObjShot_SetBombResist( obj, true );

		loop( 6 ){ yield; }
		m_aobjBlur = erase( m_aobjBlur, 0 );
		Obj_Delete( obj );

	}

}
