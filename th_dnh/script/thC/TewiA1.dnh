//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ3B　中ボス　因幡 てゐ　通常攻撃1
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////


#ScriptVersion[2]
#BackGround[User]
#Title[TewiA - 通常攻撃1]
#Text[ステージ3B 中ボス
因幡 てゐ]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Tewi.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			SetPosition( FLAN_BOSS_HOME_X, FLAN_BOSS_HOME_Y + RandBlur( 0.1 ) );
		}
		SetTimer( 31 );
		SetLife( 2500 );
		SetDamageRate( 85, 85 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 61 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_EIYA + CL_TTH_CHARACTER_NAME_EIYA_TEWI;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		__Wait( 60 );

		let nAssign = 1;

		loop{

			/** 全方向扇状側面移動弾 */
			SetAction( ACT_SHOT_B5, 150 );
			loop( 3 ){
				__Wait( 10 );
				RoundWideFlankShot( nAssign );
				__Wait( 30 );
				nAssign = - nAssign;
			}

			/** 使い魔召喚 */
			SummonShadow();
			__Wait( 80 );

			/** 移動＋扇状弾 */
			Move( 60 );
			WideShotEx();
			__Wait( 100 );

		}

	}

	/**
	*	全方向扇状側面移動弾
	*	@param nAssign	割り振り係数
	*/
	task RoundWideFlankShot( let nAssign ){

		let nRoundWay = 14 - m_nLevel;
		let nWideWay = 10 + 2 * m_nLevel;
		let nX = GetX();
		let nY = GetY();
		let nRoundWayAngle = 360 / nRoundWay;
		let nBaseAngle = 90 - 10 * nAssign;
		let nWideAngle = nRoundWayAngle * ( 0.75 + 0.03 * m_nLevel );
		let nWideWayAngle = nWideAngle / nWideWay * nAssign;

		PlaySEEx( seShot2 );
		ascent( let i in 0 .. nWideWay ){
			ascent( let j in 0 .. nRoundWay ){
				let nRoundAngle = nBaseAngle + nRoundWayAngle * j;
				let nAngle = nRoundAngle + nWideWayAngle * i;
				FlankShot( nX, nY, nAngle, nRoundAngle, i, nAssign );
			}
		}

	}

	/**
	*	側面移動弾
	*	@param nBaseX		弾源x座標
	*	@param nBaseY		弾源y座標
	*	@param nAngle		角度
	*	@param nBaseAngle	中心角度（ここを中心に反転移動）
	*	@param nNumber		弾番号
	*	@param nAssign		割り振り係数
	*/
	task FlankShot( let nBaseX, let nBaseY, let nAngle, let nBaseAngle, let nNumber, let nAssign ){

		let obj = Obj_Create( OBJ_SHOT );
		let nDelay = 8;
		Obj_SetPosition( obj, nBaseX, nBaseY );
		Obj_SetSpeed( obj, 2.2 + 0.3 * m_nLevel );
		Obj_SetAngle( obj, nAngle );
		ObjShot_SetGraphic( obj, US_RICE_M_WHITE );
		ObjShot_SetDelay( obj, nDelay );

		/** 直進 */
		loop( nDelay + 20 ){ yield; }

		/** 側面移動 */
		let nFrame = 30;
		let nAddAngle = ( nBaseAngle - nAngle ) * 2 / nFrame;
		loop( nFrame ){
			if( Obj_BeDeleted( obj ) ){ break; }
			let nGapLength = GetGapLength( nBaseX, nBaseY, Obj_GetX( obj ), Obj_GetY( obj ) );
			nAngle += nAddAngle;
			let nX = GetGapX( nBaseX, nGapLength, nAngle );
			let nY = GetGapY( nBaseY, nGapLength, nAngle );
			Obj_SetPosition( obj, nX, nY );
			Obj_SetAngle( obj, nAngle );
			yield;
		}

	}

	/**
	*	扇状弾
	*/
	task WideShotEx{

		let nNum = 8;
		let nFrame = 4;
		let _nWay = 3;
		let _nWayAngle = 35;
		let nWay = 1 + 2 * m_nLevel;
		let nSpeed = 1.5 + 0.1 * m_nLevel;
		let nNumSpeed = ( 4 + 0.6 * m_nLevel - nSpeed ) / ( nNum - 1 );
		let nWideAngle = 2 * ( nWay - 1 );
		let nGraphic = US_BALL_BS_BLUE;
		let nDelay = 5;

		loop( nNum ){
			let nX = GetX();
			let nY = GetY();
			let nAngle = GetAngleToPlayer() - _nWayAngle * ( _nWay - 1 ) / 2;
			loop( _nWay ){
				_WideShot01( nX, nY, nSpeed, nAngle, nWideAngle, nWay, nGraphic, nDelay );
				nAngle += _nWayAngle;
			}
			PlaySEEx( seShot1 );
			__Wait( nFrame );
			nSpeed += nNumSpeed;
		}

	}

	/**
	*	使い魔召喚
	*/
	function SummonShadow{

		let nWay = 7;
		let nX = GetX();
		let nY = GetY();
		let nWayAngle = 180 / ( nWay - 1 );
		let nAngle = - 90 - nWayAngle * ( nWay - 1 ) / 2;

		PlaySEEx( seShadow );
		loop( nWay ){
			CreateEnemyFromScript( "Shadow", nX, nY, 0, nAngle, 0 );
			nAngle += nWayAngle;
		}

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	使い魔
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy Shadow{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shadow.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = false;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_SHADOW_LIGHTING = false;
	FLAN_SHADOW_COLLISION = true;
	FLAN_SHADOW_DELETE_SHOT = 32;
	FLAN_ENEMY_COLLISION_A = 24;
	FLAN_ENEMY_COLLISION_B = 18;
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		SetLife( 20 );
		_SetDamageRateDelayEx( 85, 85, 50, 50, 30 );
		BehaviorShadow( CHAR_SHADOW_RABBIT );

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*	@param bIsAppear 具現化中かどうか
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*	@param bIsAppear 具現化中かどうか
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*	@param bIsAppear 具現化中かどうか
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){

		/** 使い魔描画 */
		let nShadowImage = SHADOW_IMAGE_6S;
		let nShadowColor = SHADOW_COLOR_RED;
		let nAngle = 2 * m_nFlanCount;
		let nScale = 0.8;
		DrawShadow( nShadowImage, nShadowColor, nAngle, nScale, nScale );
		DrawShadowChar();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 速度設定 */
		_SetSpeed();
		loop( 30 ){ yield; }

		let nNum = 15;
		let nFrame = 8;

		loop( nNum ){

			/** 扇状弾 */
			WideShotEx();
			loop( nFrame ){ yield; }

		}

	}

	/**
	*	扇状弾
	*/
	task WideShotEx{

		let nWay = 2;
		let nSpeed = 8;
		let nMaxSpeed = 1;
		let nAccelSpeed = ( nMaxSpeed - nSpeed ) / 30;
		let nAngle = GetAngleToPlayer() + RandBlur( 7.5 );
		let nWideAngle = 60 - 4 * m_nLevel;
		let nGraphic = US_RICE_S_SKY;
		let nDelay = 5;

		_WideShot02( GetX(), GetY(), nSpeed, nAccelSpeed, nMaxSpeed, nAngle, nWideAngle, nWay, nGraphic, nDelay );
		PlaySEEx( seShot3 );

	}

	/**
	*	速度設定
	*/
	task _SetSpeed{

		let nFrame = 30;
		let nSpeed = 6;
		let nMaxSpeed = 1.2;
		let nAccelSpeed = ( nMaxSpeed - nSpeed ) / nFrame;
		loop( nFrame ){
			nSpeed += nAccelSpeed;
			SetSpeed( nSpeed );
			yield;
		}

	}

}
