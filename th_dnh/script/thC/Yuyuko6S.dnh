//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ5　ボス　西行寺 幽々子　スペル6
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Yuyuko - スペル6]
#Text[ステージ5 ボス
西行寺 幽々子]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Yuyuko.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 110;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		m_bDeadEffect = true;
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		SetTimer( 51 );
		SetLife( 500 );
		SetDamageRate( 10, 10 );
		SetShotAutoDeleteClip( 64, 64, 64, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_YOUMU + CL_TTH_CHARACTER_NAME_YOUMU_YUYUKO;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){
			if( IsTryLastSpell() ){ DropItemTHC( 22 ); }
		}

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 55 );
		if( m_bDead ){ break; }

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_YOUMU + CL_TTH_SPELL_STAGE5_BOSS_6 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );
		if( m_bDead ){ break; }

		let nAssign = 1;

		loop{

			/** フェイズチェック */
			if( PhaseCheck() ){ break; }

			/** 全方向回転弾1 */
			RoundRollShot1( nAssign );
			__Wait( 45 );
			if( m_bDead ){ break; }

			/** 移動 */
			Move( 45 );
			__Wait( 45 );
			if( m_bDead ){ break; }

			nAssign = - nAssign;

		}
		if( m_bDead ){ break; }

		/** 弾消し＋全方向回転弾2 */
		SetDamageRate( 5, 5 );
		DeleteEnemyShotToItem( ALL );
		RoundRollShot2();
		__Wait( 60 );
		if( m_bDead ){ break; }

		/** 中央移動 */
		PlaySEEx( sePower );
		Concentration01( 120 );
		nFrame = 60;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, false );
		__Wait( nFrame );
		if( m_bDead ){ break; }

		/** 全方向回転弾3 */
		SetAction( ACT_SHOT_B5, 6000 );
		__Wait( 60 );
		if( m_bDead ){ break; }
		RoundRollShot3();
		__Wait( 180 );
		SetDamageRate( 12, 12 );

	}

	/**
	*	全方向回転弾1
	*	@param nAssign	割り振り係数
	*/
	task RoundRollShot1( let nAssign ){

		SetAction( ACT_SHOT_A5, 60 );

		let nX = GetX();
		let nY = GetY();
		let nRoundWay = 20 + 4 * m_nLevel;
		let nBaseAngle = rand( 0, 360 );
		let nRoundWayAngle = 360 / nRoundWay;
		let nGraphic = US_BUTTERFLY_BLUE;
		let nAngle = nBaseAngle;
		loop( nRoundWay ){
			RollShot( nX, nY, nAngle, nAssign, nGraphic );
			nAngle += nRoundWayAngle;
		}
		PlaySEEx( seShot1 );
		__Wait( 36 );
		if( m_bDead ){ break; }

		nAssign = - nAssign;
		nRoundWay = 18 - 2 * m_nLevel;
		nRoundWayAngle = 360 / nRoundWay;
		let nWideWay = 3 + m_nLevel;
		let nWideWayAngle = nRoundWayAngle * ( 0.35 + 0.1 * m_nLevel ) / ( nWideWay - 1 );
		nGraphic = US_BUTTERFLY_PURPLE;
		nAngle = nBaseAngle;
		loop( nRoundWay ){
			let _nAngle = nAngle;
			loop( nWideWay ){
				RollShot( nX, nY, _nAngle, nAssign, nGraphic );
				_nAngle += nWideWayAngle;
			}
			nAngle += nRoundWayAngle;
		}
		PlaySEEx( seShot1 );

	}

	/**
	*	全方向回転弾2
	*/
	task RoundRollShot2{

		SetAction( ACT_SHOT_A5, 60 );

		let nX = GetX();
		let nY = GetY();
		let nAssign = 1;
		if( nX > CL_CEN_X ){ nAssign = - 1; }
		let nFrame = 5;
		let nNum = 8;
		let nWay = 8 + 2 * m_nLevel;
		let nAngle = rand( 0, 360 );
		let nWayAngle = 360 / nWay;
		let nNumAngle = nWayAngle / ( nNum - 3 ) * nAssign;
		let anGraphic = [ US_BUTTERFLY_YELLOW, US_BUTTERFLY_GREEN ];

		loop( nNum ){
			let _nAngle = nAngle;
			ascent( let i in 0 .. nWay ){
				RollShot( nX, nY, _nAngle, nAssign, anGraphic[ i % 2 ] );
				_nAngle += nWayAngle;
			}
			PlaySEEx( seShot1 );
			nAngle += nNumAngle;
			__Wait( nFrame );
			if( m_bDead ){ break; }
		}

	}

	/**
	*	全方向回転弾3
	*/
	task RoundRollShot3{

		let nX = GetX();
		let nY = GetY();
		let nAssign = 1;
		let nFrame = [ 16, 16, 15, 14 ][ m_nLevel ];
		let nWay = [ 16, 18, 20, 24 ][ m_nLevel ];
		let nAngle = 0;
		let nWayAngle = 360 / nWay;
		let nAddAngle = - nWayAngle * 0.2;
		let anGraphic = [ US_BUTTERFLY_RED, US_BUTTERFLY_SKY ];
		let nGra = 0;

		loop{
			let _nAngle = nAngle;
			loop( nWay ){
				RollShot( nX, nY, _nAngle, nAssign, anGraphic[ nGra ] );
				_nAngle += nWayAngle;
			}
			PlaySEEx( seShot1 );
			__Wait( nFrame );
			if( m_bDead ){ break; }
			nAngle += nAddAngle * rand( 0.9, 1.1 );
			nAssign = - nAssign;
			nGra = 1 - nGra;
		}

	}

	/**
	*	回転弾
	*	@param nX		弾源x座標
	*	@param nY		弾源y座標
	*	@param nAngle	角度
	*	@param nAssign	割り振り係数
	*	@param nGraphic	弾画像
	*/
	task RollShot( let nX, let nY, let nAngle, let nAssign, let nGraphic ){

		let nFrame = 180;
		let nSpeed = 3.2;
		let nMaxSpeed = 0.2;
		let nAccelSpeed = ( nMaxSpeed - nSpeed ) / nFrame;
		let nAddAngle = 330 / nFrame * nAssign;
		let nNum = 3;
		let _nSpeed = 2.4 + 0.1 * m_nLevel;
		let nNumSpeed = ( 2.9 + 0.1 * m_nLevel - _nSpeed ) / ( nNum - 1 );
		let _nAngle = nAngle + 330 * nAssign;
		let nDelay = 15;

		CreateShotA( 0, nX, nY, nDelay );
		SetShotDataA( 0, 0, nSpeed, nAngle, nAddAngle, nAccelSpeed, nMaxSpeed, nGraphic );
		loop( nNum ){
			CreateShotA( 1, 0, 0, 0 );
			SetShotDataA( 1, 0, _nSpeed, _nAngle, 0, 0, 0, nGraphic );
			AddShot( nFrame, 0, 1, 0 );
			_nSpeed += nNumSpeed;
		}
		SetShotKillTime( 0, nFrame + 1 );
		FireShot( 0 );

	}

	/**
	*	フェイズチェック
	*/
	function PhaseCheck{

		let nNextLife = 250;
		let nNextTime = 22;
		return ( GetLife() <= nNextLife || GetTimer() <= nNextTime );

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}
