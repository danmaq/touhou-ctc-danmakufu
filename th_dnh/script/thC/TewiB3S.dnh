//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ3B　ボス　因幡 てゐ　スペル3
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////


#ScriptVersion[2]
#BackGround[User]
#Title[TewiB - スペル3]
#Text[ステージ3B ボス
因幡 てゐ]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Tewi.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		SetTimer( 63 );
		SetLife( 500 );
		SetDamageRate( 14, 14 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_EIYA + CL_TTH_CHARACTER_NAME_EIYA_TEWI;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){ DropItemTHC( 16 ); }

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 55 );

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_EIYA + CL_TTH_SPELL_STAGE3_BOSS_3 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );

		let nTurn = 2 * m_nLevel;
		let nMaxTurn = nTurn + 3;

		loop{

			/** 予告レーザー＋捻り扇状弾 */
			SetAction( ACT_SHOT_B5, 150 );
			Concentration01( 60 );
			RollWideShot( nTurn );
			__Wait( 210 );

			/** 移動 */
			Move( 90 );
			__Wait( 90 );

			if( nTurn < nMaxTurn ){ nTurn ++; }

		}

	}

	/**
	*	予告レーザー＋捻り扇状弾
	*	@param nTurn	ターン数
	*/
	task RollWideShot( let nTurn ){

		let nWay = 16 + nTurn * 2;
		let nX = GetX();
		let nY = GetY();
		let nWayAngle = 360 / nWay;
		let nAngle = GetAngleToPlayer() - 180;
		let nGraphic = US_BEAM_WHITE;
		let nCount = 0;
		let nFrame = 2;

		/** 予告レーザー */
		PlaySEEx( seLaser1 );
		let _nAngle = nAngle + nWayAngle / 2;
		let __nAngle = nAngle - nWayAngle / 2;
		ascent( let i in 0 .. nWay / 2 ){
			SetShotColor( 255, 127, 255 );
			WarningLaser( nX, nY, _nAngle, nCount, nGraphic );
			SetShotColor( 255, 255, 255 );
			WarningLaser( nX, nY, __nAngle, nCount, nGraphic );
			__Wait( nFrame );
			_nAngle += nWayAngle;
			__nAngle -= nWayAngle;
			nCount += nFrame;
		}
		__Wait( 60 - nCount );

		/** 捻り扇状弾 */
		PlaySELoop( seShot3, 90, 6 );
		nAngle += nWayAngle / 2;
		ascent( let i in 0 .. nWay ){
			let nAssign = 1;
			if( i >= nWay / 2 ){ nAssign = - 1; }
			_RollWideShot( nX, nY, nAngle, nAssign );
			nAngle += nWayAngle;
		}

	}

	/**
	*	予告レーザー
	*	@param nX		レーザー源x座標
	*	@param nY		レーザー源y座標
	*	@param nAngle	角度
	*	@param nCount	最初の1発から経過したフレーム数
	*	@param nGraphic	レーザー画像
	*/
	task WarningLaser( let nX, let nY, let nAngle, let nCount, let nGraphic ){

		let obj = Obj_Create( OBJ_LASER );
		Obj_SetPosition( obj, nX, nY );
		Obj_SetAngle( obj, nAngle );
		ObjShot_SetGraphic( obj, nGraphic );
		Obj_SetAlpha( obj, 127 );
		Obj_SetCollisionToPlayer( obj, false );
		ObjLaser_SetWidth( obj, 20 );
		ObjLaser_SetSource( obj, false );

		/** 伸びる */
		let nFrame = 30;
		let nLength = 0;
		let nAddLength = 500 / nFrame;
		loop( nFrame ){
			nLength += nAddLength;
			ObjLaser_SetLength( obj, nLength );
			yield;
		}

		/** 待ち */
		nFrame = 30 - nCount;
		loop( nFrame ){ yield; }

		/** 移動 */
		let nAddX = 5 * cos( nAngle );
		let nAddY = 5 * sin( nAngle );
		loop{
			if( Obj_BeDeleted( obj ) ){ break; }
			nX += nAddX;
			nY += nAddY;
			Obj_SetPosition( obj, nX, nY );
			yield;
		}

	}

	/**
	*	捻り扇状弾
	*	@param nX		弾源x座標
	*	@param nY		弾源y座標
	*	@param nAngle	角度
	*	@param nAssign	割り振り係数
	*/
	task _RollWideShot( let nX, let nY, let nAngle, let nAssign ){

		let obj = Obj_Create( OBJ_SHOT );
		let nGraphic = US_BALL_S_R_PURPLE;
		if( nAssign == - 1 ){ nGraphic = US_BALL_S_WHITE; }
		Obj_SetPosition( obj, nX, nY );
		Obj_SetSpeed( obj, 5 );
		Obj_SetAngle( obj, nAngle );
		ObjShot_SetGraphic( obj, nGraphic );

		let _nSpeed = 1.2;
		let _nAngle = nAngle - 90;
		let nAddAngle = 12.5 * nAssign;
		let nFrame = 5;

		while( !Obj_BeDeleted( obj ) ){
			nX = Obj_GetX( obj );
			nY = Obj_GetY( obj );
			CreateShot01( nX, nY, _nSpeed, _nAngle, nGraphic, 0 );
			CreateShot01( nX, nY, _nSpeed, _nAngle + 180, nGraphic, 0 );
			_nAngle += nAddAngle;
			loop( nFrame ){ yield; }
		}

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 10;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}
