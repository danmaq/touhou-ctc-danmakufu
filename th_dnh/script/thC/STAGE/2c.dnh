//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		STAGE 2c
//
//		※ステージライブラリから自動的にインクルードされます
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数
//////////////////////////////////////////////////////////////////////

/**	読み込むステージ固有の背景グラフィックです。
*	背景無効時は無視されます。
*/
let STAGE_2C_LOAD_LIST_GRAPHIC_BG = [
	imgMapWater,
] ~ LOADBGLIST_AYA;
/**	読み込むステージ固有のその他グラフィックです。 */
let STAGE_2C_LOAD_LIST_GRAPHIC = [
	IMAGE_THC_STAGE_LOGO[ 6 ],
] ~ IMAGE_LIST_AYA;
/**	読み込むステージ固有の敵スクリプトです。 */
let STAGE_2C_LOAD_LIST_ENEMY = [
	z_g_20,
	z_m_10,
	z_o_02,
	z_o_04,
	z_s_03,
] ~ bossAyaAList ~ bossAyaBList;
/**	読み込むステージ固有の効果音です。 */
let STAGE_2C_LOAD_LIST_SOUND = [
];


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	固有処理
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	初期化
function Stage2CInitialize(){
	if( GetCommonDataDefaultEx( CL_CDNS_RESULT, FLAN_CD_STAGE, -1 ) >= 0 ){
		STAGE_2C_LOAD_LIST_GRAPHIC	= STAGE_DEFAULT_LOAD_GRAPHIC	~ STAGE_2C_LOAD_LIST_GRAPHIC;
		STAGE_2C_LOAD_LIST_SOUND	= STAGE_DEFAULT_LOAD_SE			~ STAGE_2C_LOAD_LIST_SOUND;
	}
	LoadProgress(
		STAGE_2C_LOAD_LIST_GRAPHIC	~ GetBGRealLoadList( STAGE_2C_LOAD_LIST_GRAPHIC_BG ),
		STAGE_2C_LOAD_LIST_ENEMY	~ STAGE_DEFAULT_LOAD_ENEMY,
		STAGE_2C_LOAD_LIST_SOUND
	);
	AllZakoEnemyKill( true );
	PlayMusicEx( 16 );
}

//	ここにステージの中身を書く
task Stage2C(){


	SetShotAutoDeleteClip( 32, 64, 32, 32 );
	__Wait( 20 );
	StageLogo();
	__Wait( 300 );

//---------------------------------------------------------------

	loop( 8 ){
		CreateEnemyFromFile( z_o_02, GetCenterX()*1.5+RandBlur(50), GetClipMaxY()+20, rand( 4, 6.5 ), -90+rand( -30, 0 ), 0 );
	}
	__Wait( 140 );
	loop( 8 ){
		CreateEnemyFromFile( z_o_02, GetCenterX()/2+RandBlur(50), GetClipMaxY()+20, rand( 4, 6.5 ), -90+rand( 0, 30 ), 0 );
	}
	__Wait( 70 );
	loop( 8 ){
		CreateEnemyFromFile( z_o_02, GetCenterX()*1.5+RandBlur(50), GetClipMaxY()+20, rand( 4, 6.5 ), -90+rand( -30, 0 ), 0 );
	}
	__Wait( 250 );

//---------------------------------------------------------------

	loop( 4 ){
		CreateEnemyFromFile( z_s_03, GetCenterX()*1.5+RandBlur(50), GetClipMinY()-20, rand( 2, 4 ), 90+rand( 0, 30 ), [ 0, 1 ][ rand( 0, 100 )<50 ] );
		__Wait( 14 );
	}
	loop( 4 ){
		CreateEnemyFromFile( z_s_03, GetCenterX()/2+RandBlur(50), GetClipMinY()-20, rand( 2, 4 ), 90+rand( -30, 0 ), [ 0, 1 ][ rand( 0, 100 )<50 ] );
		__Wait( 14 );
	}

	__Wait( 180 );

//---------------------------------------------------------------

	CreateEnemyFromFile( z_m_10, GetCenterX()/2, GetClipMinY()-20, 4, 90, 0 );
	__Wait( 120 );
	CreateEnemyFromFile( z_m_10, GetCenterX()*1.5, GetClipMinY()-20, 4, 90, 1 );
	__Wait( 200 );

//---------------------------------------------------------------

	ascent( i in 0..8 ){
		CreateEnemyFromFile( z_o_02, GetClipMinX()+20, GetCenterY()/3, Smooth( 1.5, 4.5, i, 7 ), Smooth( 80, 0, i, 9 ), 0 );
		__Wait( 10 );
		i++;
	}
	if( m_nFlanLevel >1 ){
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_STAGE_ITEM, [ 6, 6 ] );
		loop( 6 ){
			CreateEnemyFromFile( z_g_20, GetCenterX()+rand( -150, +150 ), rand( GetClipMinY()-20, GetCenterY()/3*2 ), 0, 0, 0 );
		}
	}

	__Wait( 130 );

	ascent( i in 0..8 ){
		CreateEnemyFromFile( z_o_02, GetClipMaxX()-20, GetCenterY()/3, Smooth( 1.5, 4.5, i, 7 ), Smooth( 100, 180, i, 9 ), 0 );
		__Wait( 10 );
		i++;
	}
	if( m_nFlanLevel >1 ){
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_STAGE_ITEM, [ 6, 6 ] );
		loop( 6 ){
			CreateEnemyFromFile( z_g_20, GetCenterX()+rand( -150, +150 ), rand( GetClipMinY()-20, GetCenterY()/3*2 ), 0, 0, 0 );
		}
	}


	__Wait( 350 );
	DeleteEnemyShotToItem( ALL );
	AllZakoEnemyKill( true );


///////////////////////////////////////////////////////////////////////
	CreateEnemyBossFromFile( bossAyaA, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy();//敵が消えるまで停止
	CreateEnemyFromFile( bossAyaA99, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy();//敵が消えるまで停止
///////////////////////////////////////////////////////////////////////

	SetShotAutoDeleteClip( 32, 64, 32, 32 );


//---------------------------------------------------------------

	CreateEnemyFromFile( z_o_04, GetClipMinX()-50, GetClipMinY(), 0, 0, 0 );

	__Wait( 600 );

//---------------------------------------------------------------

	loop( 10 ){
		CreateEnemyFromFile( z_s_03, GetCenterX()+RandBlur(70), GetClipMinY()-20, rand( 2, 4 ), 90+rand( -10, 10 ), [ 0, 1 ][ rand( 0, 100 )<50 ] );
		__Wait( 10 );
	}

	__Wait( 200 );//sum=400
//---------------------------------------------------------------

		CreateEnemyFromFile( z_m_10, GetCenterX()*1.5, GetClipMinY()-20, 3, 90, 0 );
		__Wait( 50 );
		CreateEnemyFromFile( z_m_10, GetCenterX()/2, GetClipMinY()-20, 3, 90, 0 );
		__Wait( 200 );

//---------------------------------------------------------------
	loop( [ 5, 10, 17, 23 ][ m_nFlanLevel ] ){
		let limit=GetCommonDataDefault( "limit", 0 );
		let XX=Min( GetCommonDataDefault( "SetX", GetCenterX() ), GetClipMaxX()-limit-20 );
		let YY=GetCommonDataDefault( "SetY", GetCenterY() );
		let angle=rand( 180, 360 );
		CreateEnemyFromFile( z_o_02, XX+limit*cos( angle ), YY+limit*sin( angle ), rand( 2, 3 ), [ rand( -120, -90 ), rand( -90, -60 ) ][ angle<270 ], 0 );
		__Wait( 800/[ 5, 10, 17, 23 ][ m_nFlanLevel ] );
	}
	__Wait( 270 );//sum=1100
//---------------------------------------------------------------
	CreateEnemyFromFile( z_m_10, GetCenterX(), GetClipMinY()-20, 2, 90, 0 );
	__Wait( 550 );//sum=400
//sum=2800--------------------------------------------------------
	AllZakoEnemyKill( true );
	yield;


///////////////////////////////////////////////////////////////////////
	CreateEnemyBossFromFile( bossAyaB, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy();//敵が消えるまで停止
	if( IsTryLastSpell() ){
		CreateEnemyBossFromFile( bossAyaBL, GetCenterX(), GetCenterY/2, 0, 0, 0 );
		WaitZeroEnemy();//敵が消えるまで停止
	}
	SetCommonDataEx( FLAN_CDNS, FLAN_CD_PLAYER_SHOT_ENABLE, false );
	ForbidShot( true );
	CreateEnemyFromFile( bossAyaB99, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy();//敵が消えるまで停止
//終了処理
///////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////

	FadeOutMusic( bgmList[ 17 ], 100 );
	SetClearHistory( 2 );

	if( !m_bStagePractice ){
		DeleteResource( STAGE_2C_LOAD_LIST_GRAPHIC ~ STAGE_2C_LOAD_LIST_GRAPHIC_BG, STAGE_2C_LOAD_LIST_SOUND );
		Stage3();
	}
	else{ Clear(); }

////////////////////////////////////////////////////

}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	共通処理
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	毎フレームごとに呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage2CMainLoop( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	if( !GetCommonDataDefaultEx( CL_CDNS_CONFIG, CL_CD_CONFIG_BGG, true ) ){ return; }
}

/**
*	背景絵画時に呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage2CDrawBackGround( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	let nNowLoop = nStageCount % 2048;
	let nSpeed = -nStageCount * 0.8;
	let nViewToX = GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_GAP_X, 0 );
	let nViewToY = GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_GAP_Y, 0 );
	let nViewToZ = GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_GAP_Z, 0 );

	SetTexture( IMAGE_CL_WHITE );
	if( nStageCount > 600 ){ SetFogEx( 100, 700, 160, 140, 200 ); }
	else{
		SetFogEx(
			SlowDown( 0, 100, nStageCount, 600 ),
			SlowDown( 200, 700, nStageCount, 300 ),
			SlowDown( 255, 160, nStageCount, 300 ),
			SlowDown( 255, 140, nStageCount, 300 ),
			SlowDown( 255, 200, nStageCount, 300 )
		);
	}
	SetViewTo( nViewToX, nViewToY, nViewToZ );
	SetViewFrom( 460, 90, 30 );
	SetGraphicRect( 0, 0, 512, 512 );
	SetGraphicAngle( 0, 0, 0 );
	SetGraphicScale( 5, 5 );
	DrawGraphic3D( 0, 0, -384 );
	SetGraphicScale( 1, 1 );

	ascent( let i in 0..2 ){
		SetTexture( imgMapWater );
		SetGraphicAngle( 90, 0, 0 );
		SetGraphicRect( [ 0, 64 ][ i ], nSpeed * ( i + 1 ), 512 + [ 0, 64 ][ i ], 512 + nSpeed * ( i + 1 ) );
		SetAlpha( [ 255, 144 ][ i ] );
		DrawGraphic3D( 0, [ 0, 30 ][ i ], 0 );
		if( i == 0 ){ DrawGraphic3D( 0, 0, -512 ); }
	}

	SetColor( 255, 255, 255 );
	SetAlpha( 255 );
	SetGraphicAngle( 0, 0, 0 );
}

/**
*	下位レイヤ絵画時に呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage2CDrawBottomObject( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
}

/**
*	上位レイヤ絵画時に呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage2CDrawTopObject( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
}
