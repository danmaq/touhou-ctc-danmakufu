//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		STAGE 1
//
//		※ステージライブラリから自動的にインクルードされます
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	固有処理部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	各シナリオ共通の初期化処理です。
*	(個別初期化前の動作)
*/
function Stage1CommonInitializeBefore(){
	SetCommonDataEx( FLAN_CDNS, FLAN_CD_PLAYER_SHOT_ENABLE, false );
	ForbidBomb( true );
	ForbidShot( true );
	ClearByteCodeCache();
}

/**
*	各シナリオ共通の初期化処理です。
*	(個別初期化後の動作)
*/
function Stage1CommonInitializeAfter(){
	DeleteCommonDataEx( CL_CDNS_TEMP, CL_CD_STAGE_BG_PARAMETER );
	SetTryHistory( 1 );
	SetStage( 1 );
	ForbidBomb( false );
	ForbidShot( false );
	SetCommonDataEx( FLAN_CDNS, FLAN_CD_PLAYER_SHOT_ENABLE, true );
}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	共通処理部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	ステージごとのメインタスクです。
*/
task Stage1(){
	Stage1CommonInitializeBefore();
	alternative( m_nScenario )
	case( 0 ){ Stage1AInitialize(); }
	case( 1 ){ Stage1BInitialize(); }
	case( 2 ){ Stage1CInitialize(); }
	case( 3 ){ Stage1DInitialize(); }
	Stage1CommonInitializeAfter();
	alternative( m_nScenario )
	case( 0 ){ Stage1A(); }
	case( 1 ){ Stage1B(); }
	case( 2 ){ Stage1C(); }
	case( 3 ){ Stage1D(); }
}

/**
*	毎フレームごとに呼ばれます。
*
*	@param nScenario シナリオ番号
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage1Loop( let nScenario, let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	alternative( nScenario )
	case( 0 ){ Stage1AMainLoop( nStage, nStageCount, nLevel, nCount, nPhase, nPhaseCount, nPrevPhase ); }
	case( 1 ){ Stage1BMainLoop( nStage, nStageCount, nLevel, nCount, nPhase, nPhaseCount, nPrevPhase ); }
	case( 2 ){ Stage1CMainLoop( nStage, nStageCount, nLevel, nCount, nPhase, nPhaseCount, nPrevPhase ); }
	case( 3 ){ Stage1DMainLoop( nStage, nStageCount, nLevel, nCount, nPhase, nPhaseCount, nPrevPhase ); }
}

/**
*	背景絵画時に呼ばれます。
*
*	@param nScenario シナリオ番号
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage1DrawBackGround( let nScenario, let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	alternative( nScenario )
	case( 0 ){ Stage1ADrawBackGround( nStage, nStageCount, nLevel, nCount, nPhase, nPhaseCount, nPrevPhase ); }
	case( 1 ){ Stage1BDrawBackGround( nStage, nStageCount, nLevel, nCount, nPhase, nPhaseCount, nPrevPhase ); }
	case( 2 ){ Stage1CDrawBackGround( nStage, nStageCount, nLevel, nCount, nPhase, nPhaseCount, nPrevPhase ); }
	case( 3 ){ Stage1DDrawBackGround( nStage, nStageCount, nLevel, nCount, nPhase, nPhaseCount, nPrevPhase ); }
}

/**
*	下位レイヤ絵画時に呼ばれます。
*
*	@param nScenario シナリオ番号
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage1DrawBottomObject( let nScenario, let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	alternative( nScenario )
	case( 0 ){ Stage1ADrawBottomObject( nStage, nStageCount, nLevel, nCount, nPhase, nPhaseCount, nPrevPhase ); }
	case( 1 ){ Stage1BDrawBottomObject( nStage, nStageCount, nLevel, nCount, nPhase, nPhaseCount, nPrevPhase ); }
	case( 2 ){ Stage1CDrawBottomObject( nStage, nStageCount, nLevel, nCount, nPhase, nPhaseCount, nPrevPhase ); }
	case( 3 ){ Stage1DDrawBottomObject( nStage, nStageCount, nLevel, nCount, nPhase, nPhaseCount, nPrevPhase ); }
}

/**
*	上位レイヤ絵画時に呼ばれます。
*
*	@param nScenario シナリオ番号
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage1DrawTopObject( let nScenario, let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	alternative( nScenario )
	case( 0 ){ Stage1ADrawTopObject( nStage, nStageCount, nLevel, nCount, nPhase, nPhaseCount, nPrevPhase ); }
	case( 1 ){ Stage1BDrawTopObject( nStage, nStageCount, nLevel, nCount, nPhase, nPhaseCount, nPrevPhase ); }
	case( 2 ){ Stage1CDrawTopObject( nStage, nStageCount, nLevel, nCount, nPhase, nPhaseCount, nPrevPhase ); }
	case( 3 ){ Stage1DDrawTopObject( nStage, nStageCount, nLevel, nCount, nPhase, nPhaseCount, nPrevPhase ); }
}
