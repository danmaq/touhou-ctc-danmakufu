//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		STAGE 3a
//
//		※ステージライブラリから自動的にインクルードされます
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数
//////////////////////////////////////////////////////////////////////

/**	読み込むステージ固有の背景グラフィックです。
*	背景無効時は無視されます。
*/
let STAGE_3A_LOAD_LIST_GRAPHIC_BG = [
	imgMapLibrary,
	imgMapLibraryWood,
] ~ LOADBGLIST_LITTLE	~ LOADBGLIST_PACHOULI;
/**	読み込むステージ固有のその他グラフィックです。 */
let STAGE_3A_LOAD_LIST_GRAPHIC = [
	IMAGE_THC_STAGE_LOGO[ 8 ],
] ~ IMAGE_LIST_DEVIL	~ IMAGE_LIST_PACHOULI;
/**	読み込むステージ固有の敵スクリプトです。 */
let STAGE_3A_LOAD_LIST_ENEMY = [
	z_g_16,
	z_m_12,
	z_g_18,
	z_s_11,
] ~ bossDevilList ~ bossPatchouliList;
/**	読み込むステージ固有の効果音です。 */
let STAGE_3A_LOAD_LIST_SOUND = [
];


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	固有処理
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	初期化
function Stage3AInitialize(){
	AllZakoEnemyKill( true );
	if( GetCommonDataDefaultEx( CL_CDNS_RESULT, FLAN_CD_STAGE, -1 ) >= 0 ){
		STAGE_3A_LOAD_LIST_GRAPHIC	= STAGE_DEFAULT_LOAD_GRAPHIC	~ STAGE_3A_LOAD_LIST_GRAPHIC;
		STAGE_3A_LOAD_LIST_SOUND	= STAGE_DEFAULT_LOAD_SE			~ STAGE_3A_LOAD_LIST_SOUND;
	}
	LoadProgress(
		STAGE_3A_LOAD_LIST_GRAPHIC	~ GetBGRealLoadList( STAGE_3A_LOAD_LIST_GRAPHIC_BG ),
		STAGE_3A_LOAD_LIST_ENEMY	~ STAGE_DEFAULT_LOAD_ENEMY,
		STAGE_3A_LOAD_LIST_SOUND
	);
	PlayMusicEx( 6 );
}

//	ここにステージの中身を書く
task Stage3A(){

	SetShotAutoDeleteClip( 32, 64, 32, 32 );
	__Wait( 120 );

//---------------------------------------------------------------

	CreateEnemyFromFile( z_m_12, GetCenterX(), GetClipMinY() - 20, 5, 90, 3 );

	WaitZeroEnemy();
	__Wait( 180 );

	DeleteEnemyShotToItem( ALL );
	AllZakoEnemyKill( true );
	StageLogo();
	__Wait( 500 );

	loop( 6 ){
		CreateEnemyFromFile( z_g_16, GetClipMaxX() + 20, GetCenterY() / 3 + RandBlur(10), 5, 180, 0 );
		__Wait( 15 );
	}
	__Wait( 130 );
	loop( 6 ){
		CreateEnemyFromFile( z_g_16, GetClipMinX() - 20, GetCenterY() / 3 + RandBlur(10), 5, 0, 0 );
		__Wait( 15 );
	}
	__Wait( 100 );
	loop( 6 ){
		CreateEnemyFromFile( z_g_16, GetClipMaxX() + 20, GetCenterY() / 3 + RandBlur(10), 5, 180, 0 );
		__Wait( 15 );
	}
	__Wait( 60 );
	loop( 6 ){
		CreateEnemyFromFile( z_g_16, GetClipMinX() - 20, GetCenterY() / 3 + RandBlur(10), 5, 0, 0 );
		__Wait( 15 );
	}
	__Wait( 150 );

//---------------------------------------------------------------


	loop( 4 ){
		CreateEnemyFromFile( z_s_11, GetClipMinX() - 20, GetCenterY() / 2, rand( 1, 1.7 ), 0, 1 );
		__Wait( 25 );
	}
	__Wait( 130 );
	loop( 4 ){
		CreateEnemyFromFile( z_s_11, GetClipMaxX() + 20, GetCenterY() / 2, rand( 1, 1.7 ), 180, -1 );
		__Wait( 25 );
	}
	__Wait( 50 );
	loop( 4 ){
		CreateEnemyFromFile( z_s_11, GetClipMinX() - 20, GetCenterY() / 2, rand( 1, 1.7 ), 0, 1 );
		__Wait( 25 );
	}
	__Wait( 150 );

//---------------------------------------------------------------

	CreateEnemyFromFile( z_m_12, GetCenterX(), GetClipMinY() - 20, 6, 90, 3 );
	__Wait( 320 );

	DeleteEnemyShotToItem( ALL );
	AllZakoEnemyKill( true );


///////////////////////////////////////////////////////////////////////
	CreateEnemyBossFromFile( bossDevil, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy();//敵が消えるまで停止
	CreateEnemyFromFile( bossDevil99, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy();//敵が消えるまで停止
///////////////////////////////////////////////////////////////////////

	SetShotAutoDeleteClip( 32, 64, 32, 32 );
	__Wait( 160 );

	CreateEnemyFromFile( z_g_18, GetCenterX() / 2, GetClipMinY() - 20, 3, 90, 3 );
	__Wait( 50 );
	CreateEnemyFromFile( z_g_16, GetCenterX(), GetClipMinY() - 20, 3, 90+RandBlur(3), 0 );
	CreateEnemyFromFile( z_g_16, GetCenterX() / 2, GetClipMinY() - 20, 3, 90+RandBlur(3), 0 );
	CreateEnemyFromFile( z_g_16, GetCenterX() * 1.5, GetClipMinY() - 20, 3, 90+RandBlur(3), 0 );
	__Wait( 250 );

	CreateEnemyFromFile( z_g_18, GetCenterX() * 1.5, GetClipMinY() - 20, 3, 90, 3 );
	__Wait( 50 );
	CreateEnemyFromFile( z_g_16, GetCenterX(), GetClipMinY() - 20, 3, 90+RandBlur(3), 0 );
	CreateEnemyFromFile( z_g_16, GetCenterX() / 2, GetClipMinY() - 20, 3, 90+RandBlur(3), 0 );
	CreateEnemyFromFile( z_g_16, GetCenterX() * 1.5, GetClipMinY() - 20, 3, 90+RandBlur(3), 0 );
	__Wait( 200 );

	CreateEnemyFromFile( z_g_18, GetCenterX() / 2, GetClipMinY() - 20, 3, 90, 3 );
	__Wait( 50 );
	CreateEnemyFromFile( z_g_16, GetCenterX(), GetClipMinY() - 20, 3, 90+RandBlur(3), 0 );
	CreateEnemyFromFile( z_g_16, GetCenterX() / 2, GetClipMinY() - 20, 3, 90+RandBlur(3), 0 );
	CreateEnemyFromFile( z_g_16, GetCenterX() * 1.5, GetClipMinY() - 20, 3, 90+RandBlur(3), 0 );
	__Wait( 150 );

	CreateEnemyFromFile( z_g_18, GetCenterX() * 1.5, GetClipMinY() - 20, 3, 90, 3 );
	__Wait( 50 );
	CreateEnemyFromFile( z_g_16, GetCenterX(), GetClipMinY() - 20, 3, 90+RandBlur(3), 0 );
	CreateEnemyFromFile( z_g_16, GetCenterX() / 2, GetClipMinY() - 20, 3, 90+RandBlur(3), 0 );
	CreateEnemyFromFile( z_g_16, GetCenterX() * 1.5, GetClipMinY() - 20, 3, 90+RandBlur(3), 0 );
	__Wait( 180 );

//---------------------------------------------------------------

	loop( 2 ){
		CreateEnemyFromFile( z_s_11, GetClipMinX() - 20, GetCenterY() / 2, rand( 0.8, 1.2 ), 0, 1 );
		CreateEnemyFromFile( z_s_11, GetClipMaxX() + 20, GetCenterY() / 2, rand( 0.8, 1.2 ), 180, -1 );
		__Wait( 25 );
	}
	__Wait( 80 );
	CreateEnemyFromFile( z_g_18, GetCenterX() / 2, GetClipMinY() - 20, 3, 90, 3 );
	CreateEnemyFromFile( z_g_18, GetCenterX() * 1.5, GetClipMinY() - 20, 3, 90, 3 );

	__Wait( 300 );

//---------------------------------------------------------------

	AllZakoEnemyKill( true );
	yield;


///////////////////////////////////////////////////////////////////////
	CreateEnemyBossFromFile( bossPatchouli, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy();//敵が消えるまで停止
	if( IsTryLastSpell() ){
		CreateEnemyBossFromFile( bossPatchouliL, GetCenterX(), GetCenterY() / 2, 0, 0, 0 );
		WaitZeroEnemy();//敵が消えるまで停止
	}
	SetCommonDataEx( FLAN_CDNS, FLAN_CD_PLAYER_SHOT_ENABLE, false );
	ForbidShot( true );
	CreateEnemyFromFile( bossPatchouli99, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy();//敵が消えるまで停止
//終了処理
///////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////

	FadeOutMusic( bgmList[ 7 ], 100 );
	SetClearHistory( 3 );

	if( !m_bStagePractice ){
		DeleteResource( STAGE_3A_LOAD_LIST_GRAPHIC ~ STAGE_3A_LOAD_LIST_GRAPHIC_BG, STAGE_3A_LOAD_LIST_SOUND );
		Stage4();
	}
	else{ Clear(); }

////////////////////////////////////////////////////

}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	共通処理
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	毎フレームごとに呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage3AMainLoop( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	if( !GetCommonDataDefaultEx( CL_CDNS_CONFIG, CL_CD_CONFIG_BGG, true ) ){ return; }
	if(
		!OnEnemySpell() &&
		GetCommonDataDefaultEx( CL_CDNS_CONFIG, CL_CD_CONFIG_BGG_EFFECT, true ) &&
		nStageCount % 10 == 0
	){
		let nRandX = m_anFlanRandomTable[ ( nCount + 37 ) % FLAN_RANDTABLE_LENGTH ];
		let nRandY = m_anFlanRandomTable[ ( nCount + 41 ) % FLAN_RANDTABLE_LENGTH ];
		let nRandZ = m_anFlanRandomTable[ ( nCount + 29 ) % FLAN_RANDTABLE_LENGTH ];
		Add3DEffect(
			nRandX / 2 - 64,		nRandY / 2 - 64,		( nStageCount % 1024 ) * -0.25 + nRandZ / 2 - 64,
			nRandX / 512 - 0.25,	nRandX / 512 - 0.25,	nRandZ / 512 - 0.25,
			120,					0,						0,
			0,						0,						0,
			300
		);
	}
}

/**
*	背景絵画時に呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage3ADrawBackGround( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	let nSpeed = ( nStageCount % 1024 ) * -0.25;
	let nClipLimit = 500;
	let nViewToX = 0 + GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_GAP_X, 0 );
	let nViewToY = 0 + GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_GAP_Y, 0 );
	let nViewToZ = nSpeed + GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_GAP_Z, 0 );
	SetTexture( IMAGE_CL_BLACK );
	SetFogEx( 0, nClipLimit, 0, 0, 64 );
	SetViewTo( nViewToX, nViewToY, nViewToZ );
	SetViewFrom( nClipLimit, 90, 30 );
	SetGraphicRect( 0, 0, 512, 512 );
	SetGraphicAngle( 0, 0, 0 );
	SetGraphicScale( 5, 5 );
	DrawGraphic3D( 0, 0, nSpeed - 64 );
	SetGraphicScale( 1, 1 );

	ascent( let j in 0..5 ){
		ascent( let i in 0..2 ){
			SetTexture( imgMapLibrary );
			SetGraphicRect( 0, 0, 512, 512 );
			SetGraphicAngle( 0, 0, 180 );
			DrawGraphic3D( 368 * [ 1, -1 ][ i ], 0, -j * 256 + 256 );
			SetTexture( imgMapLibraryWood );
			SetGraphicAngle( 0, -90, 0 );
			SetGraphicRect( 0, 0, 128, 512 );
			DrawGraphic3D( 112 * [ 1, -1 ][ i ], 0, -j * 256 - 64 + 256 );
		}
	}
	if( GetCommonDataDefaultEx( CL_CDNS_CONFIG, CL_CD_CONFIG_BGG_EFFECT, true ) ){
		SetTexture( imgMapChip );
		SetGraphicRect( 0, 0, 64, 64 );
		SetGraphicScale( 0.5, 0.5 );
		Draw3DEffect();
		SetGraphicScale( 1, 1 );
	}
	SetGraphicScale( 1, 1 );
	SetGraphicAngle( 0, 0, 0 );
}

/**
*	下位レイヤ絵画時に呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage3ADrawBottomObject( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
}

/**
*	上位レイヤ絵画時に呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage3ADrawTopObject( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
}
