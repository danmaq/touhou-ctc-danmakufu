//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		STAGE 3c
//
//		※ステージライブラリから自動的にインクルードされます
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数
//////////////////////////////////////////////////////////////////////

/**	読み込むステージ固有の背景グラフィックです。
*	背景無効時は無視されます。
*/
let STAGE_3C_LOAD_LIST_GRAPHIC_BG = [
	imgMapWater2,
	imgMapStonetile,
] ~ LOADBGLIST_KOMACHI ~ LOADBGLIST_EIKI;
/**	読み込むステージ固有のその他グラフィックです。 */
let STAGE_3C_LOAD_LIST_GRAPHIC = [
	IMAGE_THC_STAGE_LOGO[ 10 ],
] ~ IMAGE_LIST_KOMACHI ~ IMAGE_LIST_EIKI;
/**	読み込むステージ固有の敵スクリプトです。 */
let STAGE_3C_LOAD_LIST_ENEMY = [
	z_m_17,
	z_s_16,
	z_m_18,
] ~ bossKomachiList ~ bossEikiList;
/**	読み込むステージ固有の効果音です。 */
let STAGE_3C_LOAD_LIST_SOUND = [
];


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	固有処理
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	初期化
function Stage3CInitialize(){
	AllZakoEnemyKill( true );
	if( GetCommonDataDefaultEx( CL_CDNS_RESULT, FLAN_CD_STAGE, -1 ) >= 0 ){
		STAGE_3C_LOAD_LIST_GRAPHIC	= STAGE_DEFAULT_LOAD_GRAPHIC	~ STAGE_3C_LOAD_LIST_GRAPHIC;
		STAGE_3C_LOAD_LIST_SOUND	= STAGE_DEFAULT_LOAD_SE			~ STAGE_3C_LOAD_LIST_SOUND;
	}
	LoadProgress(
		STAGE_3C_LOAD_LIST_GRAPHIC	~ GetBGRealLoadList( STAGE_3C_LOAD_LIST_GRAPHIC_BG ),
		STAGE_3C_LOAD_LIST_ENEMY	~ STAGE_DEFAULT_LOAD_ENEMY,
		STAGE_3C_LOAD_LIST_SOUND
	);
	PlayMusicEx( 18 );
}

//	ここにステージの中身を書く
task Stage3C(){

	SetShotAutoDeleteClip( 32, 64, 32, 32 );
	__Wait( 100 );

//---------------------------------------------------------------

	CreateEnemyFromFile( z_m_17, GetCenterX(), GetClipMinY() - 20, 4, 90, 3 );

	__Wait( 300 );

	AllZakoEnemyKill( true );
	__Wait( 20 );
	StageLogo();
	__Wait( 330 );

//	音楽に合わせるためここまで12.5秒

	loop( 7 ){
		CreateEnemyFromFile( z_s_16, GetClipMaxX() + 20, GetCenterY(), 3, 225, 0 );
		__Wait( 9 );
	}
	__Wait( 150 );
	loop( 7 ){
		CreateEnemyFromFile( z_s_16, GetClipMinX() - 20, GetCenterY(), 3, -45, 0 );
		__Wait( 9 );
	}
	__Wait( 150 );
	loop( 7 ){
		CreateEnemyFromFile( z_s_16, GetClipMaxX() + 20, GetCenterY(), 3, 225, 0 );
		__Wait( 9 );
	}
	__Wait( 220 );

//---------------------------------------------------------------
	CreateEnemyFromFile( z_m_18, GetCenterX() / 2, GetClipMinY() - 20, 4, 90, 0 );
	__Wait( 50 );
	CreateEnemyFromFile( z_m_18, GetCenterX() * 1.5, GetClipMinY() - 20, 4, 90, 0 );
	__Wait( 170 );

//---------------------------------------------------------------

	loop( 5 ){
		CreateEnemyFromFile( z_s_16, GetClipMinX() - 20, GetCenterY(), 3, -45, 1 );
		__Wait( 9 );
	}
	__Wait( 50 );
	loop( 5 ){
		CreateEnemyFromFile( z_s_16, GetClipMaxX() + 20, GetCenterY(), 3, 225, 1 );
		__Wait( 9 );
	}
	__Wait( 230 );
//---------------------------------------------------------------

	CreateEnemyFromFile( z_m_18, GetCenterX() / 2, GetClipMinY() - 20, 4, 90, 0 );
	CreateEnemyFromFile( z_m_18, GetCenterX() * 1.5, GetClipMinY() - 20, 4, 90, 0 );
	__Wait( 150 );
//---------------------------------------------------------------

	AllZakoEnemyKill( true );


///////////////////////////////////////////////////////////////////////
	CreateEnemyBossFromFile( bossKomachi, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy();	//敵が消えるまで停止
	CreateEnemyFromFile( bossKomachi99, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy();	//敵が消えるまで停止
///////////////////////////////////////////////////////////////////////

	SetShotAutoDeleteClip( 32, 64, 32, 32 );
	__Wait( 100 );

//---------------------------------------------------------------

	loop( 7 ){
		CreateEnemyFromFile( z_s_16, GetClipMaxX() + 20, GetCenterY(), 3, 225, [ 0, 1 ][ rand( 0, 100 ) > 50 ] );
		__Wait( 9 );
	}
	__Wait( 120 );
	loop( 7 ){
		CreateEnemyFromFile( z_s_16, GetClipMinX() - 20, GetCenterY(), 3, -45, [ 0, 1 ][ rand( 0, 100 ) > 50 ] );
		__Wait( 9 );
	}
	__Wait( 80 );
	loop( 7 ){
		CreateEnemyFromFile( z_s_16, GetClipMaxX() + 20, GetCenterY(), 3, 225, [ 0, 1 ][ rand( 0, 100 ) > 50 ] );
		__Wait( 9 );
	}
	__Wait( 230 );

//---------------------------------------------------------------
	CreateEnemyFromFile( z_m_17, GetCenterX(), GetClipMinY() - 20, 4, 90, 3 );
	__Wait( 270 );
//---------------------------------------------------------------

	ascent( i in 0..3 ){
	CreateEnemyFromFile( z_m_18, GetCenterX() / 2 + i * 40, GetClipMinY() - 20, 4, 90, 0 );
	__Wait( 17 );
	}
	ascent( i in 0..3 ){
	CreateEnemyFromFile( z_m_18, GetCenterX() / 2 + i * 40, GetClipMinY() - 20, 4, 90, 0 );
	__Wait( 17 );
	}
	__Wait( 120 );
	ascent( i in 0..3 ){
	CreateEnemyFromFile( z_m_18, GetCenterX() * 1.5 - i * 40, GetClipMinY() - 20, 4, 90, 0 );
	__Wait( 17 );
	}
	ascent( i in 0..3 ){
	CreateEnemyFromFile( z_m_18, GetCenterX() * 1.5 - i * 40, GetClipMinY() - 20, 4, 90, 0 );
	__Wait( 17 );
	}
	__Wait( 150 );
//---------------------------------------------------------------
	loop( 10 ){
		CreateEnemyFromFile( z_s_16, GetClipMaxX() + 20, GetCenterY(), 3, 225, 1 );
		__Wait( 15 );
		CreateEnemyFromFile( z_s_16, GetClipMinX() - 20, GetCenterY(), 3, -45, 1 );
		__Wait( 15 );
	}
	__Wait( 40 );

	AllZakoEnemyKill( true );
	yield;


///////////////////////////////////////////////////////////////////////
	CreateEnemyBossFromFile( bossEiki, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy();	//敵が消えるまで停止
	if( IsTryLastSpell() ){
		CreateEnemyBossFromFile( bossEikiL, GetCenterX(), GetCenterY() / 2, 0, 0, 0 );
		WaitZeroEnemy();	//敵が消えるまで停止
	}
	SetCommonDataEx( FLAN_CDNS, FLAN_CD_PLAYER_SHOT_ENABLE, false );
	ForbidShot( true );
	CreateEnemyFromFile( bossEiki99, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy();	//敵が消えるまで停止
//終了処理
///////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////

	FadeOutMusic( bgmList[ 19 ], 100 );
	SetClearHistory( 3 );

	if( !m_bStagePractice ){
		DeleteResource( STAGE_3C_LOAD_LIST_GRAPHIC ~ STAGE_3C_LOAD_LIST_GRAPHIC_BG, STAGE_3C_LOAD_LIST_SOUND );
		Stage4();
	}
	else{ Clear(); }

////////////////////////////////////////////////////

}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	共通処理
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	毎フレームごとに呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage3CMainLoop( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	if( !GetCommonDataDefaultEx( CL_CDNS_CONFIG, CL_CD_CONFIG_BGG, true ) ){ return; }
}

/**
*	背景絵画時に呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage3CDrawBackGround( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	let nNowLoop = nPhaseCount % 4096;
	let nSpeed = -nNowLoop * 0.25;
	let nViewToX = -sin( nPhaseCount / 4 ) * 16 + GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_GAP_X, 0 );
	let nViewToY = 0 + GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_GAP_Y, 0 );
	let nViewToZ = MinMax( sin( nPhaseCount / 4 ) * 64, -48, 48 ) + GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_GAP_Z, 0 );

	SetViewTo( nViewToX, nViewToY, nViewToZ );
	SetViewFrom( 480, 30, 45 );

	if( nStageCount > 200 ){ SetFogEx( 0, 800, 220, 220, 220 ); }
	else{ SetFogEx( 0, Smooth( 0, 800, nStageCount, 200 ), 220, 220, 220 ); }

	SetTexture( imgMapWater2 );
	SetGraphicAngle( 90, 0, 0 );
	SetGraphicScale( 2, 1.2 );
	SetGraphicRect( nSpeed * 4, 0 , nSpeed * 4 - 512 , 512 );
	SetAlpha( 255 );
	DrawGraphic3D( -128, -5, -250 );

	SetTexture( imgMapStonetile );
	SetAlpha( 255 );
	SetGraphicAngle( 90, 90, 0 );
	SetGraphicRect( 0 , nSpeed * 3 , 512 , nSpeed * 3 - 512 );
	SetGraphicScale( 1, 1 );
	DrawGraphic3D( 128, -1, 200 );
	DrawGraphic3D( -384, -1, 200 );
	SetColor( 255, 255, 255 );
	SetAlpha( 255 );
	SetGraphicAngle( 0, 0, 0 );
	SetGraphicScale( 1, 1 );
}

/**
*	下位レイヤ絵画時に呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage3CDrawBottomObject( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
}

/**
*	上位レイヤ絵画時に呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage3CDrawTopObject( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
}
