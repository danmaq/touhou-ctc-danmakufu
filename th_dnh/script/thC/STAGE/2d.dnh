//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		STAGE 2d
//
//		※ステージライブラリから自動的にインクルードされます
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数
//////////////////////////////////////////////////////////////////////

/**	読み込むステージ固有の背景グラフィックです。
*	背景無効時は無視されます。
*/
let STAGE_2D_LOAD_LIST_GRAPHIC_BG = [
	imgMapCarpetBlue,
] ~ LOADBGLIST_YUKA;
/**	読み込むステージ固有のその他グラフィックです。 */
let STAGE_2D_LOAD_LIST_GRAPHIC = [
	IMAGE_THC_STAGE_LOGO[ 7 ],
] ~ IMAGE_LIST_YUKA;
/**	読み込むステージ固有の敵スクリプトです。 */
let STAGE_2D_LOAD_LIST_ENEMY = [
	z_j_02,
	z_s_02,
	z_o_07,
	z_s_13,
	z_m_06,
] ~ bossYukaAList ~ bossYukaBList;
/**	読み込むステージ固有の効果音です。 */
let STAGE_2D_LOAD_LIST_SOUND = [
];


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

let nBossCount = 0;	//	中ボスの経過fr


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	固有処理
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	初期化
function Stage2DInitialize(){
	AllZakoEnemyKill( true );
	if( GetCommonDataDefaultEx( CL_CDNS_RESULT, FLAN_CD_STAGE, -1 ) >= 0 ){
		STAGE_2D_LOAD_LIST_GRAPHIC	= STAGE_DEFAULT_LOAD_GRAPHIC	~ STAGE_2D_LOAD_LIST_GRAPHIC;
		STAGE_2D_LOAD_LIST_SOUND	= STAGE_DEFAULT_LOAD_SE			~ STAGE_2D_LOAD_LIST_SOUND;
	}
	LoadProgress(
		STAGE_2D_LOAD_LIST_GRAPHIC	~ GetBGRealLoadList( STAGE_2D_LOAD_LIST_GRAPHIC_BG ),
		STAGE_2D_LOAD_LIST_ENEMY	~ STAGE_DEFAULT_LOAD_ENEMY,
		STAGE_2D_LOAD_LIST_SOUND
	);
	PlayMusicEx( 22 );
}

//	ここにステージの中身を書く
task Stage2D(){
	SetShotAutoDeleteClip( 32, 64, 32, 32 );
	__Wait( 20 );
	StageLogo();
	__Wait( 300 );
//---------------------------------------------------------------

	loop( 6 ){
		CreateEnemyFromFile( z_s_02, GetClipMaxX() + 20, GetCenterY(), 0, 160, 0 );
		__Wait( 10 );
	}
	__Wait( 50 );
	loop( 6 ){
		CreateEnemyFromFile( z_s_02, GetClipMinX() - 20, GetCenterY(), 0, 20, 0 );
		__Wait( 10 );
	}
	__Wait( 50 );
	loop( 6 ){
		CreateEnemyFromFile( z_s_02, GetClipMaxX() + 20, GetCenterY(), 0, 160, 0 );
		__Wait( 10 );
	}
	__Wait( 50 );
	loop( 6 ){
		CreateEnemyFromFile( z_s_02, GetClipMaxX() + 20, GetCenterY(), 0, 160, 0 );
		CreateEnemyFromFile( z_s_02, GetClipMinX() - 20, GetCenterY(), 0, 20, 0 );
		__Wait( 10 );
	}
	__Wait( 110 );
//---------------------------------------------------------------

	loop( 3 ){
		let angle = rand( 0, 360 );
		let XX = GetCenterX() - 80 + RandBlur(40);
		let YY = GetCenterY() / 2 + RandBlur(40);
		CreateEnemyFromFile( z_o_07, XX, YY, 0, angle, 1 );
		CreateEnemyFromFile( z_o_07, XX, YY, 0, angle + 180, 0 );
		__Wait( 40 );
	}
	__Wait( 100 );
	loop( 5 ){
		CreateEnemyFromFile( z_s_13, GetClipMinX() - 20, GetCenterY() / 3, 2.8, 0, 1 );
		__Wait( 20 );
	}
	loop( 5 ){
		CreateEnemyFromFile( z_s_02, GetClipMaxX() + 20, GetCenterY() / 2, 0, 180 + rand( -45, 0 ), 0 );
		__Wait( 20 );
	}
	loop( 5 ){
		CreateEnemyFromFile( z_s_13, GetClipMinX() - 20, GetCenterY() / 3, 2.8, 0, 1 );
		__Wait( 20 );
	}
	loop( 3 ){
		let angle = rand( 0, 360 );
		let XX = GetCenterX() + 80 + RandBlur(40);
		let YY = GetCenterY() / 2 + RandBlur(40);
		CreateEnemyFromFile( z_o_07, XX, YY, 0, angle, 1 );
		CreateEnemyFromFile( z_o_07, XX, YY, 0, angle + 180, 0 );
		__Wait( 40 );
	}
	__Wait( 100 );
	loop( 5 ){
		CreateEnemyFromFile( z_s_02, GetClipMaxX() + 20, GetCenterY() / 2, 0, 180 + rand( -45, 0 ), 0 );
		__Wait( 20 );
	}
	loop( 5 ){
		CreateEnemyFromFile( z_s_13, GetClipMinX() - 20, GetCenterY() / 3, 2.8, 0, 1 );
		__Wait( 20 );
	}
	loop( 5 ){
		CreateEnemyFromFile( z_s_02, GetClipMaxX() + 20, GetCenterY() / 2, 0, 180 + rand( -45, 0 ), 0 );
		__Wait( 20 );
	}
	__Wait( 120 );
//---------------------------------------------------------------

	CreateEnemyFromFile( z_m_06, GetCenterX(), GetClipMinY() - 20, 3, 90, 0 );
	__Wait( 170 );

//---------------------------------------------------------------

	AllZakoEnemyKill( true );


///////////////////////////////////////////////////////////////////////
	CreateEnemyBossFromFile( bossYukaA, GetCenterX(), 0, 0, 0, 0 );
	while( GetEnemyNum() != 0 ){
		yield;
		nBossCount++;
	}
	CreateEnemyFromFile( bossYukaA99, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy();//敵が消えるまで停止
///////////////////////////////////////////////////////////////////////

	SetShotAutoDeleteClip( 32, 64, 32, 32 );

	let BaceTime=2400;
	__Wait( 100 );

//---------------------------------------------------------------

	let i = [
		0,
		[
			2,
			[
				4,
				[
					6, [ 8, 10 ][ nBossCount<BaceTime ]
				][ nBossCount < BaceTime + 200 ]
			][ nBossCount < BaceTime + 200 ]
		][ nBossCount < BaceTime + 300 ]
	][ nBossCount < BaceTime + 400 ];
	loop( i ){
		CreateEnemyFromFile( z_s_02, GetClipMaxX() + 20, GetCenterY() / 2, 0, 180 + rand( -45, 0 ), 0 );
		__Wait( 8 );
		CreateEnemyFromFile( z_s_02, GetClipMinX() - 20, GetCenterY() / 2, 0, rand( 0, 45 ), 0 );
		__Wait( 8 );
		CreateEnemyFromFile( z_s_13, GetClipMaxX() + 20, GetCenterY() / 2, 4, 180 + rand( -45, 0 ), -0.5 );
		__Wait( 8 );
		CreateEnemyFromFile( z_s_13, GetClipMinX() - 20, GetCenterY() / 2, 4, rand( 0, 45 ), 0.5 );
		__Wait( 8 );
	}
	__Wait( [ 0, 150][ nBossCount<BaceTime+400] );

//---------------------------------------------------------------

	loop( 2 ){
		loop( 7 ){
			CreateEnemyFromFile( z_s_13, GetClipMaxX() + 20, GetCenterY() / 3, 3, 180, -1 );
			CreateEnemyFromFile( z_s_13, GetClipMinX() - 20, GetCenterY() / 3, 3, 0, 1 );
			__Wait( 9 );
		}
		__Wait( 70 );
	}
	loop( 7 ){
		let XX = GetCenterX() + RandBlur(80);
		let YY = GetCenterY() / 2 + RandBlur(20);
		let angle = rand( 0, 360 );
		CreateEnemyFromFile( z_o_07, XX, YY, 0, angle, 1 );
		CreateEnemyFromFile( z_o_07, XX, YY, 0, angle + 180, 0 );
		__Wait( 40 );
	}
	loop( 2 ){
		loop( 7 ){
			CreateEnemyFromFile( z_s_13, GetClipMaxX() + 20, GetCenterY() / 3, 3, 180, -1 );
			CreateEnemyFromFile( z_s_13, GetClipMinX() - 20, GetCenterY() / 3, 3, 0, 1 );
			__Wait( 9 );
		}
		__Wait( 70 );
	}
	__Wait( 160 );
	CreateEnemyFromFile( z_m_06, GetClipMinX() - 20, GetCenterY() / 2, 6, 0, 0 );
	__Wait( 100 );
	CreateEnemyFromFile( z_m_06, GetClipMaxX() + 20, GetCenterY() / 2, 6, 180, 0 );
	__Wait( 180 );

//魔方陣----------------------------------------

	AllZakoEnemyKill( true );
	yield;

	ascent( i in 0..[ 5, 8, 10, 12 ][ m_nFlanLevel ] ){
		CreateEnemyFromFile(
			z_j_02,
			Smooth( GetClipMaxX() - 10, GetClipMinX() + 10, i, [ 5, 8, 10, 12 ][ m_nFlanLevel ] - 1 ),
			Smooth( GetClipMinY() + 10, GetClipMaxY() - 10, i, [ 5, 8, 10, 12 ][ m_nFlanLevel ] - 1 ),
			0, rand( 0, 360 ), 0
		);
		__Wait( 240 / [ 3, 6, 10, 15 ][ m_nFlanLevel ] );
	}
	__Wait( 350 );

	AllZakoEnemyKill( true );
	yield;

///////////////////////////////////////////////////////////////////////
	CreateEnemyBossFromFile( bossYukaB, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy();//敵が消えるまで停止
	if( IsTryLastSpell() ){
		CreateEnemyBossFromFile( bossYukaBL, GetCenterX(), GetCenterY() / 2, 0, 0, 0 );
		WaitZeroEnemy();//敵が消えるまで停止
	}
	SetCommonDataEx( FLAN_CDNS, FLAN_CD_PLAYER_SHOT_ENABLE, false );
	ForbidShot( true );
	CreateEnemyFromFile( bossYukaB99, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy();//敵が消えるまで停止
//終了処理
///////////////////////////////////////////////////////////////////////

	FadeOutMusic( bgmList[ 23 ], 100 );
	SetClearHistory( 2 );

	if( !m_bStagePractice ){
		DeleteResource( STAGE_2D_LOAD_LIST_GRAPHIC ~ STAGE_2D_LOAD_LIST_GRAPHIC_BG, STAGE_2D_LOAD_LIST_SOUND );
		Stage3();
	}
	else{ Clear(); }

////////////////////////////////////////////////////

}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	共通処理
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	毎フレームごとに呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage2DMainLoop( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	if( !GetCommonDataDefaultEx( CL_CDNS_CONFIG, CL_CD_CONFIG_BGG, true ) ){ return; }
	let nSpeedTable = [ 0.3, 2 ];
	let anBGParam = GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_BG_PARAMETER, [ 0, 90, 0, 0, 200, 0 ] );
	anBGParam[ BG_TO_Z ] = anBGParam[ BG_TO_Z ] - Smooth( nSpeedTable[ Max( nPhase - 1, 0 ) ], nSpeedTable[ nPhase ], nPhaseCount, 300 );
	if( !OnEnemySpell() && IsRenderFrame() && nPhase == 0 && nPhaseCount <= 1000 ){
		anBGParam[ BG_FROM_DISTANCE ] = SlowDown( 500, 300, nPhaseCount, 500 );
		anBGParam[ BG_FROM_PITCH ] = SlowDown( 60, 80, nPhaseCount, 1000 );
	}
	SetCommonDataEx( CL_CDNS_TEMP, CL_CD_STAGE_BG_PARAMETER, anBGParam );
}

/**
*	背景絵画時に呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage2DDrawBackGround( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	let anBGParam = GetCommonDataEx( CL_CDNS_TEMP, CL_CD_STAGE_BG_PARAMETER );
	if( nStageCount > 1000 ){ SetFogEx( 800, 1600, 64, 0, 64 ); }
	else{
		SetFogEx(
			Smooth( 50, 800, nStageCount, 600 ),
			Smooth( 100, 1600, nStageCount, 1000 ),
			Smooth( 0, 64, nStageCount, 1000 ),
			0,
			Smooth( 0, 64, nStageCount, 300 )
		);
	}
	SetViewFrom( anBGParam[ BG_FROM_DISTANCE ], anBGParam[ BG_FROM_YAW ], anBGParam[ BG_FROM_PITCH ] );
	let nViewToX = anBGParam[ BG_TO_X ] + GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_GAP_X, 0 );
	let nViewToY = anBGParam[ BG_TO_Y ] + GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_GAP_Y, 0 );
	let nViewToZ = anBGParam[ BG_TO_Z ] + GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_GAP_Z, 0 );
	SetViewTo( nViewToX, nViewToY, nViewToZ );
	let nSpace = 512;
	let nZ = truncEx( anBGParam[ BG_TO_Z ], nSpace ) - 1000;
	SetAlpha( 160 );
	loop( trunc( 1600 / nSpace ) ){
		let nUniqueNum = trunc( absolute( nZ ) / nSpace );
		let nDstX = m_anFlanRandomTable[ nUniqueNum % FLAN_RANDTABLE_LENGTH ] * 2 - 256;
		let nDstY = 128 - m_anFlanRandomTable[ ( nUniqueNum + 17 ) % FLAN_RANDTABLE_LENGTH ] * 2;
		let nDstZ = nZ + m_anFlanRandomTable[ nUniqueNum % FLAN_RANDTABLE_LENGTH ] / 5 + nSpace / 3;
		DrawCube( nDstX, nDstY, nDstZ );
		nZ += nSpace;
	}
	SetAlpha( 255 );
}

function DrawCube( let nX, let nY, let nZ ){
	SetTexture( imgMapCarpetBlue );
	SetGraphicAngle( 90, 0, 0 );
	SetGraphicRect( 0, 0, 256, 512 );
	ascent( let i in 0..2 ){ DrawGraphic3D( nX, nY + 128 * [ -1, 1 ][ i ], nZ ); }
	SetGraphicAngle( 0, 90, 0 );
	SetGraphicRect( 0, 0, 512, 256 );
	ascent( let i in 0..2 ){ DrawGraphic3D( nX + 128 * [ -1, 1 ][ i ], nY, nZ ); }
	SetGraphicAngle( 0, 0, 0 );
	SetGraphicRect( 0, 0, 256, 256 );
	ascent( let i in 0..2 ){ DrawGraphic3D( nX, nY, nZ + 256 * [ -1, 1 ][ i ] ); }
}

/**
*	下位レイヤ絵画時に呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage2DDrawBottomObject( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
}

/**
*	上位レイヤ絵画時に呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage2DDrawTopObject( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
}
