//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		STAGE 6
//
//		※ステージライブラリから自動的にインクルードされます
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数
//////////////////////////////////////////////////////////////////////

/**	読み込むステージ固有の背景グラフィックです。
*	背景無効時は無視されます。
*/
let STAGE_6_LOAD_LIST_GRAPHIC_BG = [
	imgMapFog,
	imgMapTree,
	imgMapTree3,
	imgMapWhite,
	imgMapCircle,
	imgMapChip2,
	imgSpellNoize01,
	imgSpellNoize02,
	imgSpellNoize03,
] ~ LOADBGLIST_YUYUKOYUKARI ~ LOADBGLIST_REIMU_W;
/**	読み込むステージ固有のその他グラフィックです。 */
let STAGE_6_LOAD_LIST_GRAPHIC = [
	IMAGE_THC_STAGE_LOGO[ 14 ],
	IMAGE_THC_WHITE_FRAME,	// あえてBGとして扱わない
] ~ IMAGE_LIST_YUYUKOYUKARI ~ IMAGE_LIST_REIMU_W;
/**	読み込むステージ固有の敵スクリプトです。 */
let STAGE_6_LOAD_LIST_ENEMY = [
	z_s_17,
	z_m_05,
] ~ bossYuyukoYukariList ~ bossReimuWList ~ bossReimuXList;
/**	読み込むステージ固有の効果音です。 */
let STAGE_6_LOAD_LIST_SOUND = [
];


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

/**	フェードアウト開始時の時間が格納されます。 */
let m_nStage6NoiseOutCount = -1;


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	固有処理
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	初期化
function Stage6Initialize(){
	SetCommonDataEx( FLAN_CDNS, FLAN_CD_PLAYER_SHOT_ENABLE, false );
	ForbidBomb( true );
	ForbidShot( true );
	ClearByteCodeCache();
	if( GetCommonDataDefaultEx( CL_CDNS_RESULT, FLAN_CD_STAGE, -1 ) >= 0 ){
		STAGE_6_LOAD_LIST_GRAPHIC	= STAGE_DEFAULT_LOAD_GRAPHIC	~ STAGE_6_LOAD_LIST_GRAPHIC;
		STAGE_6_LOAD_LIST_SOUND		= STAGE_DEFAULT_LOAD_SE			~ STAGE_6_LOAD_LIST_SOUND;
	}
	LoadProgress(
		STAGE_6_LOAD_LIST_GRAPHIC	~ GetBGRealLoadList( STAGE_6_LOAD_LIST_GRAPHIC_BG ),
		STAGE_6_LOAD_LIST_ENEMY		~ STAGE_DEFAULT_LOAD_ENEMY,
		STAGE_6_LOAD_LIST_SOUND
	);
	DeleteCommonDataEx( CL_CDNS_TEMP, CL_CD_STAGE_BG_PARAMETER );
	SetTryHistory( 6 );
	SetStage( 6 );
	ForbidBomb( false );
	ForbidShot( false );
	SetCommonDataEx( FLAN_CDNS, FLAN_CD_PLAYER_SHOT_ENABLE, true );

	AllZakoEnemyKill( true );

	PlayMusicEx( 30 );
}
//	ここにステージの中身を書く
task Stage6MainTask(){
	let bGoodEnding = true;
	SetShotAutoDeleteClip( 32, 64, 32, 32 );
	__Wait( 150 );
	StageLogo();
	__Wait( 400 );
//--------------------------------------------------------------------

	CreateEnemyFromFile( z_m_05, GetCenterX() * 1.5, GetClipMinY() - 20, 5, 90, 0 );
	__Wait( 200 );
	CreateEnemyFromFile( z_m_05, GetCenterX() / 2, GetClipMinY() - 20, 5, 90, 0 );
	__Wait( 250 );

//--------------------------------------------------------------------

	loop( 8 ){
		CreateEnemyFromFile( z_s_17, GetCenterX() / 2, GetClipMinY() - 20, rand( 2, 3.5 ), 90, 0 );
		__Wait( 12 );
	}
	__Wait( 200 );
	loop( 8 ){
		CreateEnemyFromFile( z_s_17, GetCenterX() * 1.5, GetClipMinY() - 20, rand( 2, 3.5 ), 90, 0 );
		__Wait( 12 );
	}
	NextPhase();
	__Wait( 300 );
	CreateEnemyFromFile( z_m_05, GetCenterX() * 1.5, GetClipMinY() - 20, 5, 90, 0 );
	loop( 6 ){
		CreateEnemyFromFile( z_s_17, GetCenterX() / 2, GetClipMinY() - 20, rand( 2, 3.5 ), 90, 0 );
		__Wait( 10 );
		CreateEnemyFromFile( z_s_17, GetCenterX() * 1.5, GetClipMinY() - 20, rand( 2, 3.5 ), 90, 0 );
		__Wait( 10 );
	}
	CreateEnemyFromFile( z_m_05, GetCenterX() / 2, GetClipMinY() - 20, 5, 90, 0 );
	loop( 6 ){
		CreateEnemyFromFile( z_s_17, GetCenterX() / 2, GetClipMinY() - 20, rand( 2, 3.5 ), 90, 0 );
		__Wait( 10 );
		CreateEnemyFromFile( z_s_17, GetCenterX() * 1.5, GetClipMinY() - 20, rand( 2, 3.5 ), 90, 0 );
		__Wait( 10 );
	}
	CreateEnemyFromFile( z_m_05, GetCenterX() * 1.5, GetClipMinY() - 20, 5, 90, 0 );
	loop( 6 ){
		CreateEnemyFromFile( z_s_17, GetCenterX() / 2, GetClipMinY() - 20, rand( 2, 3.5 ), 90, 0 );
		__Wait( 10 );
		CreateEnemyFromFile( z_s_17, GetCenterX() * 1.5, GetClipMinY() - 20, rand( 2, 3.5 ), 90, 0 );
		__Wait( 10 );
	}
	CreateEnemyFromFile( z_m_05, GetCenterX() * 1.5, GetClipMinY() - 20, 5, 90, 0 );
	CreateEnemyFromFile( z_m_05, GetCenterX() / 2, GetClipMinY() - 20, 5, 90, 0 );
	__Wait( 200 );

	NextPhase();
	AllZakoEnemyKill( true );
	__Wait( 50 );

/////////////////////////////////////////////////////////////////////// 
	CreateEnemyBossFromFile( bossYuyukoYukari, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy(); // 敵が消えるまで停止
	CreateEnemyFromFile( bossYuyukoYukari99, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy(); // 敵が消えるまで停止
/////////////////////////////////////////////////////////////////////// 

	SetShotAutoDeleteClip( 32, 100, 50, 50 );

//--------------------------------------------------------------------
	NextPhase();
	__Wait( 600 );
	SetFSDTimeLoop();
//--------------------------------------------------------------------

/////////////////////////////////////////////////////////////////////// 
	CreateEnemyBossFromFile( bossReimuW, GetCenterX(), 0, 0, 0, 0 );
	let nFSDTimer = 32767;
	while( GetEnemyNum() != 0 && nFSDTimer != 0 ){
		nFSDTimer = GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_BOSS_FSD_TIME, -1 );
		yield;
	}
	bGoodEnding = nFSDTimer != 0;
	if( bGoodEnding ){
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_FSD_TIME, -32767 );
		ForbidBomb( true );
		ForbidShot( true );
	 	CreateEnemyFromFile( bossReimuW99, GetCenterX(), 0, 0, 0, 0 );
		WaitZeroEnemy(); // 敵が消えるまで停止
// 終了処理
/////////////////////////////////////////////////////////////////////// 

//--------------------------------------------------------------------
		ForbidShot( false );
		__Wait( 250 );
//--------------------------------------------------------------------

/////////////////////////////////////////////////////////////////////// 
		CreateEnemyFromFile( bossReimuX0, GetCenterX(), 0, 0, 0, 0 );
		WaitZeroEnemy(); // 敵が消えるまで停止
		CreateEnemyBossFromFile( bossReimuX, GetCenterX(), 0, 0, 0, 0 );
		WaitZeroEnemy(); // 敵が消えるまで停止
	 	CreateEnemyFromFile( bossReimuX99, GetCenterX(), 0, 0, 0, 0 );
		WaitZeroEnemy(); // 敵が消えるまで停止

// 終了処理
/////////////////////////////////////////////////////////////////////// 
	}
	SetClearHistoryFinal( 6, bGoodEnding );

	FadeOutMusic( bgmList[ [ 31, 32 ][ bGoodEnding ] ], 6 );
	m_nStage6NoiseOutCount = m_nFlanCount;
	ScreenFade( true, 600 );
	ascent( let i in 0..600 ){
		let nBlur = Accelerate( 0, 2.5, i, 600 );
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_STAGE_GAP_X, RandBlur( nBlur ) );
		yield;
	}
	DeleteCommonDataEx( CL_CDNS_TEMP, CL_CD_STAGE_GAP_X );
	SetCommonDataEx( FLAN_CDNS, FLAN_CD_PLAYER_SHOT_ENABLE, false );
	ForbidShot( true );
	DeleteAllEnemyWithoutBoss();

	if( IsReplay() || m_bStagePractice ){ Clear(); }
	else{
		DeleteResource( STAGE_6_LOAD_LIST_GRAPHIC_BG, STAGE_6_LOAD_LIST_SOUND );
		Ending( bGoodEnding );
	}
}

/**
*	最終弾幕決闘の時間制限を設定し続けるループです。
*/
task SetFSDTimeLoop(){
	let nTime = -1;
	while( nTime == -1 ){
		yield;
		nTime = GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_BOSS_FSD_TIME, -1 );
	}
	let nRate = [ 29, 18, 11, 9 ][ GetCommonDataDefaultEx( FLAN_CDNS, FLAN_CD_STAGE_LEVEL, 1 ) ];
	let nHakurei = GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_ITEM_HAKUREI, 0 );
	let nHakureiPrev = nHakurei;
	nTime = 2000 + nHakurei * nRate;
	while( nTime >= 0 ){
		nHakurei = GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_ITEM_HAKUREI, 0 );
		let nHakureiGap = nHakurei - nHakureiPrev;
		nTime += nHakureiGap * nRate;
		nHakureiPrev = nHakurei;
		nTime = Max( nTime, 0 );
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_FSD_TIME, nTime );
		yield;
		if( GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_BOSS_FSD_TIME, -1 ) == -32767 ){ return; }
		nTime--;
	}
	while( GetCommonDataDefaultEx( FLAN_CDNS, FLAN_CD_STAGE, 0 ) == 6 ){ yield; }
	DeleteCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_FSD_TIME );
}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	共通処理
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	メインタスク
task Stage6(){
	Stage6Initialize();
	Stage6MainTask();
}

/**
*	毎フレームごとに呼ばれます。
*
*	@param nScenario シナリオ番号
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage6Loop( let nScenario, let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	if( !GetCommonDataDefaultEx( CL_CDNS_CONFIG, CL_CD_CONFIG_BGG, true ) ){ return; }
	let nSpeedTable = [ 0.3, 1, 0.6, 0, 0.05, 1, 1, 1, 1, 1, 1, 1, 1, 1 ];
	let anBGParam = GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_BG_PARAMETER, [ 800, 90, 50, 0, 0, 0 ] );
	let nSpeed = Smooth( nSpeedTable[ Max( nPhase - 1, 0 ) ], nSpeedTable[ nPhase ], nPhaseCount, 300 );
	anBGParam[ BG_TO_Z ] = anBGParam[ BG_TO_Z ] - nSpeed;
	if( !OnEnemySpell() ){
		if( IsRenderFrame() && nPhase == 1 && nPhaseCount <= 600 ){
			anBGParam[ BG_FROM_PITCH ] = SplineFakeSFS( 50, 20, nPhaseCount, 600 );
		}
		if(
			GetCommonDataDefaultEx( CL_CDNS_CONFIG, CL_CD_CONFIG_BGG_EFFECT, true ) &&
			nStageCount % [ 12, 16, 20, 60, 40, 30, 30, 30, 30, 10, 2 ][ nPhase ] == 0
		){
			let nRandX = m_anFlanRandomTable[ ( nCount + 37 ) % FLAN_RANDTABLE_LENGTH ];
			let nRandY = m_anFlanRandomTable[ ( nCount + 41 ) % FLAN_RANDTABLE_LENGTH ];
			let nRandZ = m_anFlanRandomTable[ ( nCount + 29 ) % FLAN_RANDTABLE_LENGTH ];
			let bChipSpeed = ( nPhase == 4 );
			Add3DEffect(
				anBGParam[ BG_TO_X ] + nRandX / 2 - 64,
				nRandY / 2,
				anBGParam[ BG_TO_Z ] + nRandZ,
				( nRandX / 128 - 1 ) * [ 1, 0.2 ][ bChipSpeed ],	nRandZ / 256 * [ 1, 3 ][ bChipSpeed ],	( nRandZ / 128 - 1 ) * [ 1, 0.2 ][ bChipSpeed ],
				-anBGParam[ BG_FROM_PITCH ],						0,										nRandZ,
				0,													0,										RandBlur( 1 ),
				300
			);
		}
	}
	SetCommonDataEx( CL_CDNS_TEMP, CL_CD_STAGE_BG_PARAMETER, anBGParam );
}

/**
*	背景絵画時に呼ばれます。
*
*	@param nScenario シナリオ番号
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage6DrawBackGround( let nScenario, let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	let anBGParam = GetCommonDataEx( CL_CDNS_TEMP, CL_CD_STAGE_BG_PARAMETER );
	alternative( nPhase )
	case( 0 ){
		SetFogEx(
			Smooth( 100, 300, nStageCount, 500 ),
			Smooth( 200, 1200, nStageCount, 500 ),
			0, 0, 16
		);
	}
	case( 1, 2, 3, 4 ){ SetFogEx( 300, 1200, 0, 0, 16 ); }
	others{
		let nColorCode = nPhase - 5;
		SetFogEx(
			300, 1200,
			[ 16,	0,	0,	32, 64, 88, 80	][ nColorCode ],
			[ 0,	0,	32, 0,	16,	0,	0	][ nColorCode ],
			[ 16,	32, 0,	0,	0,	32,	0	][ nColorCode ]
		);
	}
	SetViewFrom( anBGParam[ BG_FROM_DISTANCE ], anBGParam[ BG_FROM_YAW ], anBGParam[ BG_FROM_PITCH ] );
	let nViewToX = anBGParam[ BG_TO_X ] + GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_GAP_X, 0 );
	let nViewToY = anBGParam[ BG_TO_Y ] + GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_GAP_Y, 0 );
	let nViewToZ = anBGParam[ BG_TO_Z ] + GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_GAP_Z, 0 );
	if( m_nStage6NoiseOutCount > 0 ){
		let nColor = Smooth( 255, 0, m_nFlanCount - m_nStage6NoiseOutCount, 600 );
		SetColor( 255, nColor, nColor );
	}
	SetViewTo( nViewToX, nViewToY, nViewToZ );
	SetTexture( IMAGE_CL_BLACK );
	SetGraphicRect( 0, 0, 2048, 2048 );
	DrawGraphic3D( 0, 0, nViewToZ - 550 );
	SetGraphicAngle( 90, 0, 0 );
	SetGraphicRect( 0, 0, 2048, 2048 );
	DrawGraphic3D( 0, -500, nViewToZ + 128 );
	SetTexture( imgMapWhite );
	SetGraphicAngle( 90, 0, 0 );
	SetGraphicRect( 0, 0, 1536, 512 );
	SetGraphicScale( 1, 3 );
	DrawGraphic3D( 0, 0, nViewToZ );
	SetGraphicScale( 1, 1 );
	if( nPhase <= 3 ){
		SetTexture( imgMapFog );
		let nAlpha = 255;
		if( nPhase == 3 ){ nAlpha = Smooth( 128, 0, nPhaseCount, 500 ); }
		ascent( let y in 0..2 ){
			SetAlpha( Min( [ 255, 128 ][ y ], nAlpha ) );
			SetGraphicRectWidth( nStageCount / [ 1, 1.4 ][ y ] + [ 0, 256 ][ y ], -nStageCount / [ 2, 2.2 ][ y ] + [ 0, 256 ][ y ], 1536, 2048 );
			DrawGraphic3D( 0, [ 4, 10 ][ y ], nViewToZ - 512 );
		}
		SetAlpha( 255 );
	}
	SetTexture( imgMapTree3 );
	SetGraphicRect( 0, 0, 512, 512 );
	let nSpace = 512;
	let nIndex = [ 0, 19 ][ nPhase >= 1 ];
	ascent( let x in 0..2 ){
		let nZ = truncEx( anBGParam[ BG_TO_Z ], nSpace ) - 1100;
		loop( truncate( 2400 / nSpace ) ){
			let nUniqueNum = trunc( absolute( nZ ) / nSpace );
			let nDir = [ 1.5, -1 ][ x ];
			let nDstX = ( 180 + m_anFlanRandomTable[ ( nUniqueNum + 17 ) % FLAN_RANDTABLE_LENGTH ] / 2 ) * nDir;
			let nDstZ = nZ + m_anFlanRandomTable[ nUniqueNum % FLAN_RANDTABLE_LENGTH ] / 5 + x * nSpace / 3;
			let nBranch = 3;
			ascent( let i in 0..nBranch ){
				SetGraphicAngle( 0, Smooth( 0, -180, i, nBranch ) + m_anFlanRandomTable[ nUniqueNum % FLAN_RANDTABLE_LENGTH ], 180 );
				DrawGraphic3D(
					nDstX,
					264 + m_anFlanRandomTable[ ( nUniqueNum + i ) % FLAN_RANDTABLE_LENGTH ] / 8,
					nDstZ
				);
			}
			nZ += nSpace;
		}
	}
	if( nPhase >= 10 ){
		let nScroll = -nCount * 2.5;
		SetTexture( imgMapChip2 );
		SetGraphicAngle( 0, 0, 0 );
		SetColor( 255, 128, 128 );
		SetGraphicRect( 0, nScroll, 2048, nScroll + 2048 );
		DrawGraphic3D( 0, 0, nViewToZ - 250 );
		SetGraphicRect( 0, nScroll * 1.5, 2048, nScroll * 1.5 + 2048 );
		DrawGraphic3D( 0, 0, nViewToZ - 240 );
		SetColor( 255, 255, 255 );
	}
	if( nPhase == 4 && nPhaseCount < 120 ){
		ascent( let i in 0..4 ){
			let nScale = Smooth( 0, 1, nPhaseCount - i * 8, 120 );
			SetGraphicScale( nScale, nScale );
			SetAlpha( Accelerate( 255 / ( i + 1 ), 0, nPhaseCount, 120 ) );
			SetTexture( imgMapCircle );
			SetGraphicAngle( 90, 0, 0 );
			SetGraphicRect( 0, 0, 512, 512 );
			DrawGraphic3D( 0, 8, nViewToZ );
		}
		SetGraphicScale( 1, 1 );
	}
	if( m_nStage6NoiseOutCount > 0 ){
		let nColor = Smooth( 255, 0, m_nFlanCount - m_nStage6NoiseOutCount, 600 );
		SetColor( 255, nColor, nColor );
	}
	if( GetCommonDataDefaultEx( CL_CDNS_CONFIG, CL_CD_CONFIG_BGG_EFFECT, true ) ){
		SetTexture( imgMapChip );
		SetGraphicRect( 0, 0, 64, 64 );
		SetGraphicScale( 0.5, 0.5 );
		Draw3DEffect();
		SetGraphicScale( 1, 1 );
	}
	SetColor( 255, 255, 255 );
	SetGraphicAngle( 0, 0, 0 );
	SetAlpha( 255 );
}

/**
*	下位レイヤ絵画時に呼ばれます。
*
*	@param nScenario シナリオ番号
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage6DrawBottomObject( let nScenario, let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	if( !GetCommonDataDefaultEx( CL_CDNS_CONFIG, CL_CD_CONFIG_BGG, true ) || ( nStageCount > 3000 && m_nStage6NoiseOutCount < 0 ) ){ return; }
	let nDrawCount = GetCommonDataDefaultEx( FLAN_CDNS, FLAN_CD_COUNT_DRAW, 0 );
	SetColor( 128, 48, 64 );
	if( m_nStage6NoiseOutCount < 0 ){
		SetAlpha( Max( cos( nStageCount / 2.2 - 30 ) * Smooth( 1024, 768, nStageCount, 3000 ) - 768, Smooth( 40, 0, Max( nStageCount - 2700, 0 ), 300 ) ) );
	}
	else{
		let nAlphaGap = SlowDown( 128, 4, m_nFlanCount - m_nStage6NoiseOutCount, 600 );
		SetAlpha( Min( Smooth( 0, 255, m_nFlanCount - m_nStage6NoiseOutCount, 600 ) + m_anFlanRandomTable[ nCount % FLAN_RANDTABLE_LENGTH ] / nAlphaGap, 255 ) );
	}
	
	__DrawChrRect(
		[ imgSpellNoize01, imgSpellNoize02, imgSpellNoize03 ][ truncate( nDrawCount / 2 ) % 3 ],
		GetCenterX() + m_anFlanRandomTable[ ( nCount + 64 )	% FLAN_RANDTABLE_LENGTH ] / 8,
		GetCenterY() + m_anFlanRandomTable[ nCount			% FLAN_RANDTABLE_LENGTH ] / 8,
		0, 0, 512, 512
	);
	SetColor( 255, 255, 255 );
	SetAlpha( 255 );
}

/**
*	上位レイヤ絵画時に呼ばれます。
*
*	@param nScenario シナリオ番号
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage6DrawTopObject( let nScenario, let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
}
