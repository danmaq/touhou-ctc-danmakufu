//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		STAGE 2a
//
//		※ステージライブラリから自動的にインクルードされます
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数
//////////////////////////////////////////////////////////////////////

/**	読み込むステージ固有の背景グラフィックです。
*	背景無効時は無視されます。
*/
let STAGE_2A_LOAD_LIST_GRAPHIC_BG = [
	imgMapCarpet,
	imgMapKouma,
	imgMapWindowLight,
] ~ LOADBGLIST_SAKUYA ~ LOADBGLIST_REMILIA;

let STAGE_2A_LOAD_LIST_GRAPHIC = [
	IMAGE_THC_STAGE_LOGO[ 4 ],
] ~ IMAGE_LIST_SAKUYA ~ IMAGE_LIST_REMILIA;

let STAGE_2A_LOAD_LIST_ENEMY = [
	z_g_14,
	z_g_15,
	z_s_08,
	z_g_13,
	z_o_06,
] ~ bossSakuyaList ~ bossRemiliaList;
let STAGE_2A_LOAD_LIST_SOUND = [
	seSaku0,
];


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	固有処理
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	初期化
function Stage2AInitialize(){
	AllZakoEnemyKill( true );
	if( GetCommonDataDefaultEx( CL_CDNS_RESULT, FLAN_CD_STAGE, -1 ) >= 0 ){
		STAGE_2A_LOAD_LIST_GRAPHIC	= STAGE_DEFAULT_LOAD_GRAPHIC	~ STAGE_2A_LOAD_LIST_GRAPHIC;
		STAGE_2A_LOAD_LIST_SOUND	= STAGE_DEFAULT_LOAD_SE			~ STAGE_2A_LOAD_LIST_SOUND;
	}
	LoadProgress(
		STAGE_2A_LOAD_LIST_GRAPHIC	~ GetBGRealLoadList( STAGE_2A_LOAD_LIST_GRAPHIC_BG ),
		STAGE_2A_LOAD_LIST_ENEMY	~ STAGE_DEFAULT_LOAD_ENEMY,
		STAGE_2A_LOAD_LIST_SOUND
	);
	PlayMusicEx( 4 );
}

//	ここにステージの中身を書く
task Stage2A(){

	SetShotAutoDeleteClip( 32, 64, 32, 32 );
	__Wait( 120 );
	StageLogo();
	__Wait( 500 );

	loop( 4 ){
		CreateEnemyFromFile( z_g_14, GetClipMinX()-20, GetCenterY()/2+rand( 0, 50 ), rand( 2, 7.5 ), rand( 0, 10 ), 0 );
		__Wait( 25 );
	}
	__Wait( 80 );
	loop( 4 ){
		CreateEnemyFromFile( z_g_15, GetCenterX/2, GetClipMinY()-20, rand( 3, 6 ), rand( -10, 0 )+90, 0 );
		__Wait( 25 );
	}
	__Wait( 80 );
	loop( 4 ){
		CreateEnemyFromFile( z_g_14, GetClipMaxX()+20, GetCenterY()/2+rand( 0, 50 ), rand( 2, 7.5 ), rand( 180, 190 ), 0 );
		__Wait( 25 );
	}
	__Wait( 50 );
	loop( 4 ){
		CreateEnemyFromFile( z_g_15, GetCenterX*1.5, GetClipMinY()-20, rand( 3, 6 ), rand( 0, 10 )+90, 0 );
		__Wait( 25 );
	}
	__Wait( 120 );


//---------------------------------------------------------------

	loop( 8 ){
		CreateEnemyFromFile( z_s_08, GetCenterX/2, GetClipMinY()-20, 0, 0, 0 );
		__Wait( 15 );
	}
	__Wait( 70 );
	loop( 8 ){
		CreateEnemyFromFile( z_s_08, GetCenterX*1.5, GetClipMinY()-20, 0, 0, 0 );
		__Wait( 15 );
	}


	__Wait( 100 );

//---------------------------------------------------------------

	loop( 15 ){
		CreateEnemyFromFile( z_g_13, rand( GetClipMinX()+30, GetClipMaxX()-30 ), GetClipMinY()-20, rand( 3, 9 ), rand( -10, 10 )+90, 0 );
		__Wait( 21 );
	}
	__Wait( 120 );

	DeleteEnemyShotToItem( ALL );
	AllZakoEnemyKill( true );
	yield;

///////////////////////////////////////////////////////////////////////
	CreateEnemyBossFromFile( bossSakuya, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy();	//敵が消えるまで停止
	CreateEnemyFromFile( bossSakuya99, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy();	//敵が消えるまで停止
///////////////////////////////////////////////////////////////////////

	SetShotAutoDeleteClip( 32, 100, 50, 50 );

//---------------------------------------------------------------

	CreateEnemyFromFile( z_o_06, GetClipMinX()-50, GetClipMinY(), 0, 0, 0 );

	__Wait( 600 );

//---------------------------------------------------------------


	CreateEnemyFromFile( z_g_14, GetCenterX*1.5+RandBlur(60), GetClipMinY()-20, rand( 3, 7 ), rand( -10, +10 )+100, 0 );
	__Wait( 30 );
	CreateEnemyFromFile( z_g_14, GetCenterX/2+RandBlur(60), GetClipMinY()-20, rand( 3, 7 ), rand( -10, +10 )+80, 0 );
	__Wait( 30 );
	CreateEnemyFromFile( z_g_14, GetCenterX+RandBlur(60), GetClipMinY()-20, rand( 3, 7 ), rand( -10, +10 )+80, 0 );
	__Wait( 80 );
	CreateEnemyFromFile( z_g_15, GetCenterX/2+RandBlur(60), GetClipMinY()-20, rand( 3, 7 ), rand( -10, +10 )+80, 0 );
	__Wait( 30 );
	CreateEnemyFromFile( z_g_15, GetCenterX*1.5+RandBlur(60), GetClipMinY()-20, rand( 3, 7 ), rand( -10, +10 )+100, 0 );
	__Wait( 30 );
	CreateEnemyFromFile( z_g_15, GetCenterX+RandBlur(60), GetClipMinY()-20, rand( 3, 7 ), rand( -10, +10 )+100, 0 );
	__Wait( 100 );

	CreateEnemyFromFile( z_g_14, GetCenterX/2+RandBlur(60), GetClipMinY()-20, rand( 3, 7 ), rand( -10, +10 )+80, 0 );
	__Wait( 30 );
	CreateEnemyFromFile( z_g_14, GetCenterX*1.5+RandBlur(60), GetClipMinY()-20, rand( 3, 7 ), rand( -10, +10 )+100, 0 );
	__Wait( 30 );
	CreateEnemyFromFile( z_g_14, GetCenterX+RandBlur(60), GetClipMinY()-20, rand( 3, 7 ), rand( -10, +10 )+80, 0 );
	__Wait( 80 );
	CreateEnemyFromFile( z_g_15, GetCenterX*1.5+RandBlur(60), GetClipMinY()-20, rand( 3, 7 ), rand( -10, +10 )+100, 0 );
	__Wait( 30 );
	CreateEnemyFromFile( z_g_15, GetCenterX/2+RandBlur(60), GetClipMinY()-20, rand( 3, 7 ), rand( -10, +10 )+80, 0 );
	__Wait( 30 );
	CreateEnemyFromFile( z_g_15, GetCenterX+RandBlur(60), GetClipMinY()-20, rand( 3, 7 ), rand( -10, +10 )+100, 0 );
	__Wait( 125 );

	loop( 8 ){
		CreateEnemyFromFile( z_g_13, rand( GetClipMinX()+30, GetClipMaxX()-30 ), GetClipMinY()-20, rand( 3, 9 ), rand( -10, +10 )+90, 0 );
		__Wait( 50 );
	}
	__Wait( 125 );


//---------------------------------------------------------------

	loop( 25 ){
		CreateEnemyFromFile( z_s_08, rand( GetClipMinX()+30, GetClipMaxX()-30 ), GetClipMinY()-20, 0, 0, 0 );
		__Wait( 20 );
	}
	__Wait( 200 );


	AllZakoEnemyKill( true );
	yield;


///////////////////////////////////////////////////////////////////////
	CreateEnemyBossFromFile( bossRemilia, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy();	//敵が消えるまで停止
	if( IsTryLastSpell() ){
		CreateEnemyBossFromFile( bossRemiliaL, GetCenterX(), GetCenterY/2, 0, 0, 0 );
		WaitZeroEnemy();	//敵が消えるまで停止
	}
	SetCommonDataEx( FLAN_CDNS, FLAN_CD_PLAYER_SHOT_ENABLE, false );
	ForbidShot( true );
	CreateEnemyFromFile( bossRemilia99, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy();	//敵が消えるまで停止
//終了処理
///////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////

	FadeOutMusic( bgmList[ 5 ], 100 );
	SetClearHistory( 2 );

	if( !m_bStagePractice ){
		DeleteResource( STAGE_2A_LOAD_LIST_GRAPHIC ~ STAGE_2A_LOAD_LIST_GRAPHIC_BG, STAGE_2A_LOAD_LIST_SOUND );
		Stage3();
	}
	else{ Clear(); }

////////////////////////////////////////////////////

}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	共通処理
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	毎フレームごとに呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage2AMainLoop( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	if( !GetCommonDataDefaultEx( CL_CDNS_CONFIG, CL_CD_CONFIG_BGG, true ) ){ return; }
}

/**
*	背景絵画時に呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage2ADrawBackGround( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	let nSpeed = -nPhaseCount * 0.2;
	let nClipLimit = 1000;
	let nViewToX = 0 + GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_GAP_X, 0 );
	let nViewToY = 0 + GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_GAP_Y, 0 );
	let nViewToZ = 0 + GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_GAP_Z, 0 );
	SetTexture( IMAGE_CL_WHITE );
	if( nStageCount > 200 ){ SetFogEx( 0, 600, 128, 0, 0 ); }
	else{ SetFogEx( 0, Smooth( 0, 600, nStageCount, 200 ), Smooth( 32, 128, nStageCount, 200 ), 0, 0 ); }
	SetViewTo( nViewToX, nViewToY, nViewToZ );
	SetViewFrom( 500, 30, 45 );

	SetTexture( imgMapCarpet );
	SetGraphicRect( 0, nSpeed, 1024, nSpeed - 1024 );
	SetGraphicAngle( 90, 0, 0 );
	DrawGraphic3D( -128, 0, -256 );
	SetTexture( imgMapWindowLight );
	SetGraphicRect( 0, nSpeed, 512, nSpeed - 512 );
	SetGraphicScale( 2, 1 );
	SetAlpha( 160 );
	DrawGraphic3D( 128, 1, 96 );

	let nScale = 0.5;
	SetTexture( imgMapKouma );
	SetGraphicAngle( 90, 0, 90 );
	SetGraphicRect( nSpeed / nScale, 0, nSpeed / nScale - 1024, 256 );
	SetGraphicScale( nScale, nScale );
	SetAlpha( 255 );
	ascent( let i in 1..5 ){ DrawGraphic3D( -176, i * 30, i * 60 ); }

	SetGraphicScale( 1, 1 );
	SetGraphicAngle( 0, 0, 0 );
}

/**
*	下位レイヤ絵画時に呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage2ADrawBottomObject( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
}

/**
*	上位レイヤ絵画時に呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage2ADrawTopObject( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
}
