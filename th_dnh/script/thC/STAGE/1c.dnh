//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		STAGE 1c
//
//		※ステージライブラリから自動的にインクルードされます
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数
//////////////////////////////////////////////////////////////////////

/**	読み込むステージ固有の背景グラフィックです。
*	背景無効時は無視されます。
*/
let STAGE_1C_LOAD_LIST_GRAPHIC_BG = [
	imgMapFlower,
] ~ LOADBGLIST_LILY	~ LOADBGLIST_MEDICINE;
let STAGE_1C_LOAD_LIST_GRAPHIC = [
	IMAGE_THC_STAGE_LOGO[ 2 ],
] ~ IMAGE_LIST_LILY	~ IMAGE_LIST_MEDICINE;

let STAGE_1C_LOAD_LIST_ENEMY = [
	z_g_04,
	z_g_20,
	z_m_07,
	z_m_09,
] ~ bossLilyList ~ bossMedicineList;
let STAGE_1C_LOAD_LIST_SOUND = [
];


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	固有処理
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	初期化
function Stage1CInitialize(){
	AllZakoEnemyKill( true );
	LoadProgress(
		STAGE_DEFAULT_LOAD_GRAPHIC	~ STAGE_1C_LOAD_LIST_GRAPHIC ~ GetBGRealLoadList( STAGE_1C_LOAD_LIST_GRAPHIC_BG ),
		STAGE_DEFAULT_LOAD_ENEMY	~ STAGE_1C_LOAD_LIST_ENEMY,
		STAGE_DEFAULT_LOAD_SE		~ STAGE_1C_LOAD_LIST_SOUND
	);
	PlayMusicEx( 14 );
}

//	ここにステージの中身を書く
task Stage1C(){
	SetShotAutoDeleteClip( 32, 64, 32, 32 );
	__Wait( 20 );
	StageLogo();
	__Wait( 300 );

//---------------------------------------------------------------

	SetCommonDataEx( CL_CDNS_TEMP, CL_CD_STAGE_ITEM, [ 5, 12 ] );
	loop( 12 ){
		CreateEnemyFromFile( z_g_04, GetCenterX()*1.5+RandBlur(50), GetClipMinY()-20, rand( 1.8, 4.5 ), 90+rand( 0, 30 ), 0 );
		__Wait( 11 );
	}
	__Wait( 80 );
	SetCommonDataEx( CL_CDNS_TEMP, CL_CD_STAGE_ITEM, [ 5, 12 ] );
	loop( 12 ){
		CreateEnemyFromFile( z_g_04, GetCenterX()/2+RandBlur(50), GetClipMinY()-20, rand( 1.8, 4.5 ), 90+rand( -30, 0 ), 0 );
		__Wait( 11 );
	}
	__Wait( 30 );
	SetCommonDataEx( CL_CDNS_TEMP, CL_CD_STAGE_ITEM, [ 5, 12 ] );
	loop( 12 ){
		CreateEnemyFromFile( z_g_04, GetCenterX()*1.5+RandBlur(50), GetClipMinY()-20, rand( 1.8, 4.5 ), 90+rand( 0, 30 ), 0 );
		__Wait( 11 );
	}
	__Wait( 80 );
	SetCommonDataEx( CL_CDNS_TEMP, CL_CD_STAGE_ITEM, [ 11, 26 ] );
	loop( 13 ){
		CreateEnemyFromFile( z_g_04, GetCenterX()/2+RandBlur(50), GetClipMinY()-20, rand( 1.8, 4.5 ), 90+rand( -30, 0 ), 0 );
		CreateEnemyFromFile( z_g_04, GetCenterX()*1.5+RandBlur(50), GetClipMinY()-20, rand( 1.8, 4.5 ), 90+rand( 0, 30 ), 0 );
		__Wait( 13 );
	}
	__Wait( 150 );

//---------------------------------------------------------------

	CreateEnemyFromFile( z_m_09, GetCenterX()/2, GetClipMinY()-20, 6, 90, 3 );
	__Wait( 100 );

	CreateEnemyFromFile( z_m_09, GetCenterX()*1.5, GetClipMinY()-20, 6, 90, 3 );
	__Wait( 120 );

//---------------------------------------------------------------

	SetCommonDataEx( CL_CDNS_TEMP, CL_CD_STAGE_ITEM, [ 12, 25 ] );
	loop( 25 ){
		CreateEnemyFromFile( z_g_20, GetCenterX()+RandBlur(150), rand( GetClipMinY()-20, [ GetCenterY()/2, GetCenterY()/3*2, GetCenterY(), GetCenterY()+30 ] [ m_nFlanLevel ] ), 0, 0, 0 );
		__Wait( 8 );
	}

	CreateEnemyFromFile( z_m_07, GetCenterX()*1.5, GetClipMinY()-20, 5, 90, 3 );
	CreateEnemyFromFile( z_m_07, GetCenterX()/2, GetClipMinY()-20, 5, 90, 3 );
	__Wait( 400 );

	AllZakoEnemyKill( true );
	let BossCount_1C=0;

///////////////////////////////////////////////////////////////////////
	if( m_nFlanLevel<2 ){CreateEnemyBossFromFile( bossLilyE, GetCenterX(), 0, 0, 0, 0 );}
	if( m_nFlanLevel>1 ){CreateEnemyBossFromFile( bossLilyH, GetCenterX(), 0, 0, 0, 0 );}
	while( GetEnemyNum() != 0 ){
		yield;
		BossCount_1C++;
	}
	CreateEnemyFromFile( bossLily99, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy();
///////////////////////////////////////////////////////////////////////

	SetShotAutoDeleteClip( 32, 64, 32, 32 );
	__Wait( 100 );

	let BaceTime=[ 800, 1600 ] [ m_nFlanLevel>1 ] ;

//---------------------------------------------------------------

	if( BossCount_1C<BaceTime ){
		CreateEnemyFromFile( z_m_07, GetCenterX()*1.5, GetClipMinY()-20, 5, 90, 2 );
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_STAGE_ITEM, [ 10, 20 ] );
		ascent( i in 0..20 ){
			CreateEnemyFromFile( z_g_20, Smooth( GetClipMinX()+20, GetClipMaxX()-20, i, 10 ), rand( GetClipMinY()-20, GetCenterY() ), 0, 0, 0 );
			__Wait( 14 );
		}
	}

	if( BossCount_1C<BaceTime+300 ){
		CreateEnemyFromFile( z_m_07, GetCenterX()/2, GetClipMinY()-20, 5, 90, 0 );
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_STAGE_ITEM, [ 10, 20 ] );
		ascent( i in 0..20 ){
			CreateEnemyFromFile( z_g_20, Smooth( GetClipMaxX()-20, GetClipMinX()+20, i, 10 ), rand( GetClipMinY()-20, GetCenterY()*0.66 ), 0, 0, 0 );
			__Wait( 14 );
		}
	}

	if( BossCount_1C<BaceTime+600 ){
		CreateEnemyFromFile( z_m_07, GetCenterX()*1.5, GetClipMinY()-20, 5, 90, 2 );
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_STAGE_ITEM, [ 10, 20 ] );
		ascent( i in 0..20 ){
			CreateEnemyFromFile( z_g_20, Smooth( GetClipMinX()+20, GetClipMaxX()-20, i, 10 ), rand( GetClipMinY()-20, GetCenterY()*0.66 ), 0, 0, 0 );
			__Wait( 14 );
		}
		__Wait( 300 );
	}

//---------------------------------------------------------------

	CreateEnemyFromFile( z_m_09, GetCenterX()/2, GetClipMinY()-20, 6, 90, 3 );
	SetCommonDataEx( CL_CDNS_TEMP, CL_CD_STAGE_ITEM, [ 6, 16 ] );
	loop( 16 ){
		CreateEnemyFromFile( z_g_04, GetCenterX()*1.5+RandBlur(50), GetClipMinY()-20, rand( 1.8, 4.5 ), 90+rand( 0, 30 ), 0 );
		__Wait( 9 );
	}
	__Wait( 40 );

	CreateEnemyFromFile( z_m_09, GetCenterX()*1.5, GetClipMinY()-20, 6, 90, 3 );
	SetCommonDataEx( CL_CDNS_TEMP, CL_CD_STAGE_ITEM, [ 7, 16 ] );
	loop( 16 ){
		CreateEnemyFromFile( z_g_04, GetCenterX()/2+RandBlur(50), GetClipMinY()-20, rand( 1.8, 4.5 ), 90-rand( 0, 30 ), 0 );
		__Wait( 9 );
	}
	__Wait( 120 );

//----------------------------------------------------------------

	SetCommonDataEx( CL_CDNS_TEMP, CL_CD_STAGE_ITEM, [ 10, 20 ] );
	ascent( i in 0..10 ){
		CreateEnemyFromFile( z_g_20, Smooth( GetClipMinX()+30, GetClipMaxX()-30, i, 10 )+RandBlur(20), Smooth( GetClipMinY()+30, GetCenterY*1.5, i, 10 )+rand( -20, 20 ), 0, 0, 0 );
		__Wait( 8 );
	}
	__Wait( 70 );
	ascent( i in 0..10 ){
		CreateEnemyFromFile( z_g_20, Smooth( GetClipMinX()+30, GetClipMaxX()-30, i, 10 )+RandBlur(20), Smooth( GetCenterY*1.5, GetClipMinY()+30, i, 10 )+rand( -20, 20 ), 0, 0, 0 );
		__Wait( 8 );
	}

	__Wait( 200 );



	AllZakoEnemyKill( true );
	yield;

//82〜87秒
///////////////////////////////////////////////////////////////////////
	CreateEnemyBossFromFile( bossMedicine, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy();	//敵が消えるまで停止
	if( IsTryLastSpell() ){
		CreateEnemyBossFromFile( bossMedicineL, GetCenterX(), GetCenterY/2, 0, 0, 0 );
		WaitZeroEnemy();	//敵が消えるまで停止
	}
	SetCommonDataEx( FLAN_CDNS, FLAN_CD_PLAYER_SHOT_ENABLE, false );
	ForbidShot( true );
	CreateEnemyFromFile( bossMedicine99, GetCenterX(), 0, 0, 0, 0 );
	WaitZeroEnemy();	//敵が消えるまで停止
//終了処理
///////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////

	FadeOutMusic( bgmList[ 15 ], 100 );
	SetClearHistory( 1 );

	if( !m_bStagePractice ){
		DeleteResource( STAGE_1C_LOAD_LIST_GRAPHIC ~ STAGE_1C_LOAD_LIST_GRAPHIC_BG, STAGE_1C_LOAD_LIST_SOUND );
		Stage2();
	}
	else{ Clear(); }

////////////////////////////////////////////////////

}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	共通処理
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	毎フレームごとに呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage1CMainLoop( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	if( nPhaseCount > 600 || !GetCommonDataDefaultEx( CL_CDNS_CONFIG, CL_CD_CONFIG_BGG, true ) ){ return; }
	let anBGParam = GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_BG_PARAMETER, [ 500, 90, 30, 0, 0, 0 ] );
	if( !OnEnemySpell() && IsRenderFrame() && nPhase == 0 && nPhaseCount <= 600 ){
		anBGParam[ BG_FROM_PITCH ] = SlowDown( 30, 60, nPhaseCount, 600 );
	}
	SetCommonDataEx( CL_CDNS_TEMP, CL_CD_STAGE_BG_PARAMETER, anBGParam );
}

/**
*	背景絵画時に呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage1CDrawBackGround( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	let anBGParam = GetCommonDataEx( CL_CDNS_TEMP, CL_CD_STAGE_BG_PARAMETER );
	let nNowLoop = nPhaseCount % 2048;
	let nSpeed = -nNowLoop * 0.25;
	SetViewFrom( anBGParam[ BG_FROM_DISTANCE ], anBGParam[ BG_FROM_YAW ], anBGParam[ BG_FROM_PITCH ] );
	let nViewToX = anBGParam[ BG_TO_X ] + GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_GAP_X, 0 );
	let nViewToY = anBGParam[ BG_TO_Y ] + GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_GAP_Y, 0 );
	let nViewToZ = anBGParam[ BG_TO_Z ] + GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_STAGE_GAP_Z, 0 );
	SetViewTo( nViewToX, nViewToY, nViewToZ );

	SetTexture( IMAGE_CL_WHITE );
	if( nStageCount > 600 ){ SetFogEx( 100, 700, 160, 140, 200 ); }
	else{
		SetFogEx(
			SlowDown( 0,	100, nStageCount, 600 ),
			SlowDown( 200,	700, nStageCount, 300 ),
			SlowDown( 255,	160, nStageCount, 300 ),
			SlowDown( 255,	140, nStageCount, 300 ),
			SlowDown( 255,	200, nStageCount, 300 )
		);
	}
	SetGraphicRect( 0, 0, 512, 512 );
	SetGraphicAngle( 0, 0, 0 );
	SetGraphicScale( 5, 5 );
	DrawGraphic3D( 0, 0, -384 );
	SetGraphicScale( 1, 1 );

	ascent( let i in 0..2 ){
		SetTexture( imgMapFlower );
		SetGraphicAngle( 90, 0, 0 );
		SetGraphicRect( [ 0, 64 ][ i ], nSpeed * ( i + 1 ), 512 + [ 0, 64 ][ i ], 512 + nSpeed * ( i + 1 ) );
		SetAlpha( [ 255, 96 ][ i ] );
		DrawGraphic3D( 0, [ 0, 20 ][ i ], 0 );
		if( i == 0 ){ DrawGraphic3D( 0, 0, -512 ); }
	}

	SetColor( 255, 255, 255 );
	SetAlpha( 255 );
	SetGraphicAngle( 0, 0, 0 );
}

/**
*	下位レイヤ絵画時に呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage1CDrawBottomObject( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
}

/**
*	上位レイヤ絵画時に呼ばれます。
*
*	@param nStage 現在のステージ
*	@param nStageCount 現在のステージカウンタ値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*/
function Stage1CDrawTopObject( let nStage, let nStageCount, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
}

