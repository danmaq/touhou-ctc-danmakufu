script_enemy_main{

	// 共通関数読み込み
	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\_index_UserShot.dnh"

	// 画像及び効果音ファイル
	let userShot=shotAll;
	let imgBoss=dotBossPatchouli;
	let imgCutIn=cutPatchouli;
	let imgFontList=[imgSystemFontSmall,imgSystemFont]~imgSystemFontSJIS16;
	let imgList=[imgBoss,imgCutIn];
	let seList=[];

	// 各種設定値（難易度等）
	let THC=GetCommonDataDefault(CD_THC_STAGE,false);
	let Practice=GetCommonDataDefault(CD_STAGE_PRACTICE,false); 
	Debug_SetLevel;
	let Lv=GetCommonDataDefault(CD_STAGE_LEVEL,0);

	// -------------------------------------------------------------------------
	@Initialize{

		// ボス初期設定（ファイルのロード他）
		if(!THC){
			LoadUserShotData(userShot);
			imgList=imgList~LOADBGLIST_PACHOULI~imgFontList;
			seList=seList~seListEnemy;
		}
		InitializeBoss(imgList,seList);

		// スペルカード設定
		SetTimer(63);
		SetLife(500);
		SetDamageRate(14,14);
		SetShotAutoDeleteClip(64,64,64,32);

		// ボス基本処理、メイン処理
		CountTimer(seTimeOut);
		BehaviorBoss(ACT_STAND3);
		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{
		m_nSpellBonus = GetSpellCardBonusScore();

		// 当たり判定（自弾,体当たり）
		Collision(32,24);

		// ダメージ音
		PlayDamageSE(seDamage);

		// カウンタ加算
		m_nCount++;

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		SetInvincibility(182);
		_Wait(2);

		// 初期移動
		let fr=45;
		let x=cenX;
		let y=minY+130+RandBlur(0.1);
		SetMovePosition02(x,y,fr);
		SetAction(ACT_MOVE,fr);
		_Wait(55);

		// スペルカード発動
		let spellName=[
			"日符「プロミネンスリング−Ｅａｓｙ−」",
			"日符「プロミネンスリング」",
			"日符「プロミネンスリング−Ｈａｒｄ−」",
			"日符「プロミネンスリング−Ｌｕｎａｔｉｃ−」"
		];
		CutInEnemy(spellName[Lv],imgCutIn,192,256);
		SetScore(100000);
		SetAction(ACT_SPELL5,0);
		_Wait(125);

		let turn=0;
		let assign=1;

		loop{

			// 放射弾
			SetAction(ACT_SHOT_B5,100);
			Concentration01(30);
			_Wait(30);
			RadiateShot(turn,assign);
			_Wait(90);

			// 移動
			move(60);
			_Wait(60);

			turn++;
			assign*=-1;

		}

	}

	// 放射弾 ------------------------------------------------------------------
	task RadiateShot(let turn, let assign){

		let way=25+6*Lv;
		let baseAngle=-90;
		let wayAngle=360/way*assign;
		let _way=10;

		ascent(let i in 0 .. way){
			let angle=baseAngle+wayAngle*i*(4-turn%3);
			_RadiateShot(angle,_way,i,assign);
			yield;
		}

	}

	task _RadiateShot(let angle, let way, let count, let assign){

		// 大弾
		let speed=7.5;
		let addSpeed=-speed/30;
		let graphic=US_BALL_L_RED;
		let delay=0;
		let fr=90;

		// 小弾
		let _fr=75;
		let _speed=5.5;
		let _addSpeed=-_speed/_fr;
		let _maxSpeed=1.6;
		let _baseAngle=angle-180;
		let _wayAngle=360/way;
		let _addAngle=360/_fr*assign;
		let _graphic=US_FIRE_RED;

		CreateShotA(0,GetX,GetY,delay);
		SetShotDataA(0,0,speed,angle,0,addSpeed,0,graphic);
		ascent(let i in 0 .. way){
			let _angle=_baseAngle+_wayAngle*i;
			CreateShotA(1,0,0,0);
			SetShotDataA(1,0,_speed,_angle,_addAngle,_addSpeed,_maxSpeed,_graphic);
			SetShotDataA(1,_fr,NULL,NULL,0,_addSpeed,_maxSpeed,_graphic);
			AddShot(fr,0,1,0);
		}
		SetShotKillTime(0,fr+1);
		FireShot(0);
		if(count%6==0){
			PlaySE(seShot1);
			loop(fr){yield;}
			PlaySE(seShot2);
		}

	}

	// 移動 --------------------------------------------------------------------
	function move(let fr){

		let x=GetX;
		let y=GetY;
		let mx=rand(40,80);
		let my=rand(0,10);
		if(x>=GetPlayerX){
			if(x-mx>=minX+100){mx=-mx;}
		}
		else{
			if(x+mx>=maxX-100){mx=-mx;}
		}
		if(y>=minY+130){my=-my;}
		x+=mx;
		y+=my;
		let power=GetGapLength(GetX,GetY,x,y)*2;
		let angle=GetGapAngle(GetX,GetY,x,y);
		SetMovePositionHermite(x,y,power,angle,0,0,fr);
		SetAction(ACT_MOVE,fr);

	}

	// -------------------------------------------------------------------------
	@Finalize{

		// カットイン消去
		SetCommonData(CD_CUTIN_SPELL_END,true);

		// アイテム放出
		if(THC&&!Practice&&Lv>0){DropItem(18,80);}

		// ロードしたファイルを削除
		DeleteGraphicList(imgList,seList);

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// ボス描画
		DrawBoss(imgBoss);
		DrawCutIn( m_nCount );

	}

	// -------------------------------------------------------------------------
	@BackGround{

		// 背景描画
		OnBGPachouli;

	}

}
