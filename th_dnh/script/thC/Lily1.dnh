//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ1C　中ボス　リリー・ホワイト　通常攻撃1
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Lily - 通常攻撃1]
#Text[ステージ1C 中ボス
リリー・ホワイト]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Lily.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 80;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 0;
	FLAN_ESS_NOCALL_MAINLOOP = false;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** ダメージ率（スペルプラクティス及び単体テスト時に固くする） */
	let m_nDamageRate = 1;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			SetPosition( FLAN_BOSS_HOME_X, FLAN_BOSS_HOME_Y );
			m_nDamageRate = 0.3;
		}
		else{
			if( m_nLevel < 2 ){ CheckTimer(); }
			if( m_bStagePractice ){ m_nDamageRate = 0.3; }
		}
		SetTimer( 29 );
		SetLife( 750 );
		SetDamageRate( 75 * m_nDamageRate, 75 * m_nDamageRate );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 121 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KAEI + CL_TTH_CHARACTER_NAME_KAEI_LILY;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 当たり判定 */
		if( m_nWarpStatus != 2 ){
			FLAN_ENEMY_COLLISION_A = 32;
			FLAN_ENEMY_COLLISION_B = 16;
		}
		else{
			FLAN_ENEMY_COLLISION_A = 0;
			FLAN_ENEMY_COLLISION_B = 0;
		}

	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice && m_nLevel < 2 ){ DropItemTHC( 6 ); }

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		SetDrawDataLily();
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		__Wait( 60 );

		let nAssign = 1;
		let nWarpFrame = 50;

		loop( 2 ){

			/** ワープ移動 */
			let nArea = 1;
			if( GetPlayerX() > GetX() ){ nArea = 2; }
			Warp( nWarpFrame, nArea );
			__Wait( 70 );

			/** 花弾 */
			SetAction( ACT_SHOT_A3_B, 60 );
			__Wait( 20 );
			FlowerShot( nAssign );
			nAssign = - nAssign;
			__Wait( 90 );

			/** ワープ移動 */
			Warp( nWarpFrame, 0 );
			__Wait( 70 );

			/** 花弾 */
			SetAction( ACT_SHOT_A3_B, 60 );
			__Wait( 20 );
			FlowerShot( nAssign );
			nAssign = - nAssign;
			__Wait( 90 );

			/** ワープ移動 */
			nArea = 3 - nArea;
			Warp( nWarpFrame, nArea );
			__Wait( 70 );

			/** 花弾 */
			SetAction( ACT_SHOT_A3_B, 60 );
			__Wait( 20 );
			FlowerShot( nAssign );
			nAssign = - nAssign;
			__Wait( 90 );

			/** ワープ移動 */
			Warp( nWarpFrame, 3 );
			__Wait( 120 );

			/** 対称弾＆移動 */
			SetDamageRate( 100 * m_nDamageRate, 100 * m_nDamageRate );
			SymmetryShot();
			Move;
			__Wait( 180 );

		}

	}

	/**
	*	花弾
	*	@param nAssign	割り振り係数
	*/
	task FlowerShot( let nAssign ){

		let nNum = [ 2, 3, 5, 7 ][ m_nLevel ];
		let _nWay = 8;
		let nWay = _nWay * 6;
		let nX = GetX();
		let nY = GetY();
		let nSpeed0 = 0.8;
		if( m_nLevel == 0 ){ nSpeed0 = 1.2; }
		let nNumSpeed0 = ( 2.4 + 0.2 * m_nLevel - nSpeed0 ) / ( nNum - 1 );
		let nSpeed1 = 1.4 + 0.2 * m_nLevel;
		let nAngle = rand( 0, 360 );
		let nNumAngle = 10 * nAssign;
		let nWayAngle = 360 / nWay * nAssign;
		let anGraphic = [ US_SCALE_PURPLE, US_RICE_S_SKY ];
		let nDelay = 15;
		let nFrame = 90;

		PlaySEEx( seShot1 );
		PlaySEDelay( seKira1, nFrame + nDelay );
		loop( nNum ){
			let nAccelSpeed0 = - nSpeed0 / nFrame;
			let _nAngle = nAngle;
			ascent( let i in 0 .. nWay ){
				CreateShotA( 0, nX, nY, nDelay );
				if( i % _nWay < _nWay / 2 ){
					SetShotDataA( 0, 0, nSpeed0, _nAngle, 0, nAccelSpeed0, 0, anGraphic[ 0 ] );
					SetShotDataA( 0, nFrame, nSpeed1, _nAngle, 0, 0, 0, anGraphic[ 0 ] );
				}
				else{
					SetShotDataA( 0, 0, nSpeed0, _nAngle, 0, nAccelSpeed0, 0, anGraphic[ 1 ] );
					SetShotDataA( 0, nFrame, nSpeed1 * 0.75, _nAngle, 0, 0, 0, anGraphic[ 1 ] );
				}
				FireShot( 0 );
				_nAngle += nWayAngle;
			}
			nSpeed0 += nNumSpeed0;
			nAngle += nNumAngle;
		}

	}

	/**
	*	対称弾
	*/
	task SymmetryShot{

		let nNum = 30;
		let nFrame = 4;
		let nWay = [ 1, 2, 3, 9 ][ m_nLevel ];
		let anSymX = [ -18, 18 ];
		let nMinSpeed = 0.8;
		let nMaxSpeed = 1.6 + 0.4 * m_nLevel;
		let nNumSpeed = 0.02;
		let nWideAngle = 0;
		let nNumAngle = ( 225 - nWideAngle ) / ( nNum - 1 );
		let nWayAngle = 0;
		if( m_nLevel > 0 ){ nWayAngle = nWideAngle / ( nWay - 1 ); }
		let anBaseAngle = [ 0, 180 ];
		let anGraphic = [ US_BALL_BS_RED, US_BALL_BS_BLUE ];
		let nDelay = 5;
		let anAssign = [ 1, -1 ];

		SetAction( ACT_SHOT_B3, nFrame * nNum + 30 );
		PlaySELoop( seShot3, nFrame * nNum, 6 );
		ascent( let i in 0 .. nNum ){
			let _nX = GetX();
			let _nY = GetY() - 18;
			ascent( let j in 0 .. nWay ){
				let nSpeed = rand( nMinSpeed, nMaxSpeed ) + nNumSpeed * i;
				ascent( let k in 0 .. 2 ){
					let nX = _nX + anSymX[ k ];
					let nAngle = anBaseAngle[ k ] + ( nNumAngle * i + nWayAngle * j ) * anAssign[ k ];
					CreateShot01( nX, _nY, nSpeed, nAngle, anGraphic[ k ], nDelay );
				}
			}
			__Wait( nFrame );
		}

	}

	/**
	*	移動
	*/
	function Move{

		let nForce = 300;
		let nAngle = 90;
		SetMovePositionHermite( CL_CEN_X, CL_MIN_Y + 40, nForce, nAngle, nForce, -nAngle, 120 );

	}

}
