//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ2A　ボス　レミリア・スカーレット　スペル3
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Remilia - スペル3]
#Text[ステージ2A ボス
レミリア・スカーレット]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Remilia.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		m_bDeadEffect = true;
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		SetTimer( 50 );
		SetLife( 500 );
		SetDamageRate( 5, 5 );
		SetShotAutoDeleteClip( 64, 64, 64, 64 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND4 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KOUMA + CL_TTH_CHARACTER_NAME_KOUMA_REMILIA;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){
			if( IsTryLastSpell() ){ DropItemTHC( 14 ); }
		}

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 55 );
		if( m_bDead ){ break; }

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_KOUMA + CL_TTH_SPELL_STAGE2_BOSS_3 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );
		if( m_bDead ){ break; }

		let nAssign = 1;

		loop{

			/** 扇状トラップ弾 */
			PlaySEEx( sePower );
			Concentration01( 120 );
			__Wait( 110 );
			if( m_bDead ){ break; }
			SetAction( ACT_SHOT_A5, 100 );
			__Wait( 10 );
			if( m_bDead ){ break; }
			WideTrapShot( nAssign );
			__Wait( 300 );
			if( m_bDead ){ break; }

			/** 移動 */
			Move( 90 );
			__Wait( 60 );
			if( m_bDead ){ break; }

			SetDamageRate( 17, 17 );
			nAssign = - nAssign;

		}

	}

	/**
	*	扇状トラップ弾
	*	@param nAssign	割り振り係数
	*/
	function WideTrapShot( let nAssign ){

		let nWay = 5 + 2 * m_nLevel;
		let nX = GetX();
		let nY = GetY();
		let nWayAngle = ( 165 + 15 * m_nLevel ) / ( nWay - 1 );
		let nAngle = GetAngleToPlayer() - nWayAngle * ( nWay - 1 ) / 2;

		PlaySEEx( seShot1 );
		loop( nWay ){
			TrapShot( nX, nY, nAngle, nAssign );
			nAngle += nWayAngle;
		}

	}

	/**
	*	トラップ弾
	*	@param nX		弾源x座標
	*	@param nY		弾源y座標
	*	@param nAngle	角度
	*	@param nAssign	割り振り係数
	*/
	task TrapShot( let  nX, let  nY, let nAngle, let nAssign ){

		let obj = Obj_Create( OBJ_SHOT );
		Obj_SetPosition( obj, nX, nY );
		Obj_SetAngle( obj, nAngle );
		ObjShot_SetGraphic( obj, US_BALL_L_RED );
		Obj_SetAutoDelete( obj, false );

		/** 減速 */
		let nFrame = 105;
		let nSpeed = 5.8;
		let nAccelSpeed = - nSpeed / nFrame;
		loop( nFrame ){
			if( Obj_BeDeleted( obj ) ){ break; }
			nSpeed += nAccelSpeed;
			Obj_SetSpeed( obj, nSpeed );
			yield;
		}

		/** 方向転換 */
		if( !Obj_BeDeleted( obj ) ){
			Obj_SetSpeed( obj, 3 );
			Obj_SetAngle( obj, nAngle + 172 * nAssign );
		}

		/** 消滅設定 */
		SetAutoDelete();

		/** トラップ設置 */
		nFrame = 20;
		let nWay = 6;
		let nGapLength = 25;
		nSpeed = 0;
		let nMaxSpeed = 1.2;
		nAccelSpeed = nMaxSpeed / 120;
		let nWayAngle = 360 / nWay;
		let nGraphic = US_SCALE_RED;
		let nDelay = 20;

		loop{
			if( Obj_BeDeleted( obj ) ){ break; }
			nX = Obj_GetX( obj );
			nY = Obj_GetY( obj );
			let _nAngle = nAngle;
			loop( nWay ){
				let _nX = GetGapX( nX, nGapLength, _nAngle );
				let _nY = GetGapY( nY, nGapLength, _nAngle );
				let nAddAngle = 0;
				if( m_nLevel >= 2 ){ nAddAngle = 155 * nAssign; }
				CreateShot02( _nX, _nY, nSpeed, _nAngle + nAddAngle, nAccelSpeed, nMaxSpeed, nGraphic, nDelay );
				_nAngle += nWayAngle;
			}
			PlaySEEx( seKira1 );
			loop( nFrame ){ yield; }
		}

		/** 消滅設定 */
		task SetAutoDelete{
			loop( 180 ){ yield; }
			if( !Obj_BeDeleted( obj ) ){ Obj_SetAutoDelete( obj, true ); }
		}

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 10;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}
