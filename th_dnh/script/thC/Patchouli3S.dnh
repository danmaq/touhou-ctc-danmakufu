//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ3A　ボス　パチュリー・ノーレッジ　スペル3
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////


#ScriptVersion[2]
#BackGround[User]
#Title[Patchouli - スペル3]
#Text[ステージ3A ボス
パチュリー・ノーレッジ]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Patchouli.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** プリズム弾配列 */
	let m_aobjPrism = [];
	/** プリズムシード弾がプリズム弾に触れたか */
	let m_bPrism = false;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		SetTimer( 61 );
		SetLife( 500 );
		SetDamageRate( 5, 5 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KOUMA + CL_TTH_CHARACTER_NAME_KOUMA_PACHOULI;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){ DropItemTHC( 16 ); }

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 55 );

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_KOUMA + CL_TTH_SPELL_STAGE3_BOSS_3 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );

		/** プリズム弾 */
		SetAction( ACT_SHOT_B5, 180 );
		PlaySEEx( sePower );
		Concentration01( 120 );
		__Wait( 60 );
		PrismShot();
		__Wait( 120 );

		/** プリズムシード弾 */
		Concentration01( 30 );
		__Wait( 30 );
		PrismSeedShot();
		PrismSE();
		SetDamageRate( 14, 14 );

		loop{

			SetAction( ACT_SHOT_A3,120 );
			__Wait( 120 );

			/** 移動 */
			Move( 60 );
			__Wait( 60 );

		}

	}

	/**
	*	プリズム弾
	*/
	task PrismShot{

		let nAssign = 1;
		let nNum = [ 2, 4, 4, 6 ][ m_nLevel ];
		let nFrame = [ 90, 30, 30, 15 ][ m_nLevel ];
		loop( nNum ){
			_PrismShot( nAssign );
			PlaySE( seKira4 );
			__Wait( nFrame );
			nAssign = - nAssign;
		}

	}

	/**
	*	プリズム弾（1発）
	*	@param nAssign	割り振り係数
	*/
	task _PrismShot( let nAssign ){

		let obj = Obj_Create( OBJ_SHOT );
		m_aobjPrism = m_aobjPrism ~ [ obj ];
		ObjShot_SetGraphic( obj, US_LIGHT_YELLOW );
		Obj_SetAutoDelete( obj, false );
		ObjShot_SetBombResist( obj, true );

		let nXTurnAngle = 20;
		let nZTurnAngle = - 45 * nAssign;
		let nGapLength = 0;
		let nGapAngle = 0;
		_SetGapLength();
		_SetGapAngle();
		_SetLocation();
		_SetAlpha();

		/** 間隔長さ設定 */
		task _SetGapLength{
			let nFrame = 60;
			let nAddGapLength = 100 / nFrame;
			loop( nFrame ){
				nGapLength += nAddGapLength;
				yield;
			}
		}

		/** 間隔角度設定 */
		task _SetGapAngle{
			let nAddGapAngle = 360 / 120 * nAssign;
			loop{
				nGapAngle += nAddGapAngle;
				yield;
			}
		}

		/** 位置設定 */
		task _SetLocation{
			loop{
				let nX = GetX();
				let nY = GetY();
				let _nX = GetGapX( nX, nGapLength, nGapAngle);
				let _nY = GetGapY( nY, nGapLength * sin( nXTurnAngle ), nGapAngle );
				let _nGapLength = GetGapLength( nX, nY, _nX, _nY );
				let _nGapAngle = GetGapAngle( nX, nY, _nX, _nY ) + nZTurnAngle;
				let __nX = GetGapX( nX, _nGapLength, _nGapAngle );
				let __nY = GetGapY( nY, _nGapLength, _nGapAngle );
				Obj_SetPosition( obj, __nX, __nY );
				yield;
			}
		}

		/** α設定 */
		task _SetAlpha{
			let nFrame = 60;
			let nAlpha = 0;
			let nAddAlpha = 255 / nFrame;
			loop( nFrame ){
				nAlpha += nAddAlpha;
				Obj_SetAlpha( obj, nAlpha );
				yield;
			}
		}

	}

	/**
	*	プリズムシード弾
	*/
	task PrismSeedShot{

		let nWay = [ 30, 40, 30, 40 ][ m_nLevel ];
		loop{
			_PrismSeedShot( nWay );
			__Wait( nWay );
		}

	}

	/**
	*	プリズムシード弾（1セット）
	*	@param nWay	Way数
	*/
	task _PrismSeedShot( let nWay ){

		let anSortSpeed = CreateMixOrderArray( nWay );
		let anSortAngle = CreateMixOrderArray( nWay );
		let nBaseSpeed = 2;
		let nWaySpeed = ( 3.2 - nBaseSpeed ) / ( nWay - 1 );
		let nBaseAngle = rand( 0, 360 );
		let nWayAngle = 360 / nWay;
		let nGapLength = 15;

		ascent( let i in 0 .. nWay ){
			let nSpeed = nBaseSpeed + nWaySpeed * anSortSpeed[ i ];
			let nAngle = nBaseAngle + nWayAngle * anSortAngle[ i ];
			let nX = GetGapX( GetX(), nGapLength, nAngle );
			let nY = GetGapY( GetY(), nGapLength, nAngle );
			__PrismSeedShot( nX, nY, nSpeed, nAngle );
			yield;
		}

	}

	/**
	*	プリズムシード弾（1発）
	*	@param nX		弾源x座標
	*	@param nY		弾源y座標
	*	@param nSpeed	速度
	*	@param nAngle	角度
	*/
	task __PrismSeedShot( let nX, let nY, let nSpeed, let nAngle ){

		let obj = Obj_Create( OBJ_SHOT );
		let nDelay = 5;
		Obj_SetPosition( obj, nX, nY );
		Obj_SetSpeed( obj, nSpeed );
		Obj_SetAngle( obj, nAngle );
		ObjShot_SetDelay( obj, nDelay );
		ObjShot_SetGraphic( obj, US_ICE_SKY );

		/** 遅延 */
		loop( nDelay ){ yield; }

		/** プリズム弾に触れたらレーザー化 */
		let nFrame = trunc( 200 / nSpeed );
		loop( nFrame ){
			if( Obj_BeDeleted( obj ) ){ break; }
			ascent( let i in 0 .. length( m_aobjPrism ) ){
				if( Collision_Obj_Obj( obj, m_aobjPrism[ i ] ) ){
					nX = Obj_GetX( obj );
					nY = Obj_GetY( obj );
					nSpeed = 4 + 0.4 * m_nLevel;
					let nLength = 180;
					let nWidth = 8;
					let nGraphic = US_BALL_M_A_YELLOW;
					CreateLaser01( nX, nY, nSpeed, nAngle, nLength, nWidth, nGraphic, 0 );
					if( m_nLevel >= 2 ){ CreateLaser01( nX, nY, nSpeed, nAngle + 180, nLength, nWidth, nGraphic, 0 ); }
					m_bPrism = true;
					Obj_Delete( obj );
					break;
				}
			}
			yield;
		}

	}

	/**
	*	プリズムSE
	*/
	task PrismSE{

		let nCount = m_nFlanCount;
		let nWaitCount = 8 - m_nLevel;
		loop{
			if( m_bPrism ){
				if( nCount < m_nFlanCount ){
					PlaySEEx( seLaser2 );
					nCount = m_nFlanCount + nWaitCount;
				}
				m_bPrism = false;
			}
			yield;
		}

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 60;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 10;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}
