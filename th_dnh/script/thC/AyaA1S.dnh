//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ2C　中ボス　射命丸 文　スペル1
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[AyaA - スペル1]
#Text[ステージ2C 中ボス
射命丸 文]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Aya.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 80;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 0;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** ダメージ率（スペルプラクティス及び単体テスト時に固くする） */
	let m_nDamageRate = 1;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
			m_nDamageRate = 0.9;
		}
		else{
			CheckTimer();
			if( m_bStagePractice ){ m_nDamageRate = 0.9; }
		}
		SetTimer( 63 );
		SetLife( 400 );
		SetDamageRate( 20 * m_nDamageRate, 20 * m_nDamageRate );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KAEI + CL_TTH_CHARACTER_NAME_KAEI_AYA;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){
			DropItemTHC( 8 );
			DropItemBombTHC();
		}

		/** 共通終了設定 */
		FinalizeBoss();

		/** 個別終了設定 */
		if( m_bStage && !m_bSpellPractice ){
			SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_X, GetX() ); 
			SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_Y, GetY() ); 
		}

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 残像描画 */
		DrawBlur( m_szImageBoss );

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, false );
		__Wait( 55 );

		/** スペルカード発動 */
		SetAction( ACT_SPELL3, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_KAEI + CL_TTH_SPELL_STAGE2_HALFWAY_1 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );

		/** 画面外チェック */
		CheckIsOut;

		loop{

			/** 移動＋使い魔召喚 */
			SetAction( ACT_SHOT_B5, 120 );
			PlaySEEx( sePower );
			Concentration01( 120 );
			__Wait( 120 );
			SummonShadow();
			Move;
			__Wait( 145 );
			PlaySEEx( seKira1 );

			/** 扇状弾 */
			WideShotEx();
			__Wait( 95 );

		}

	}

	/**
	*	使い魔召喚
	*/
	task SummonShadow{

		let nNum = 14;
		let nFrame = 3;
		let nWay = 2;
		let nWayAngle = 180;
		let nCount = 125;

		__Wait( nFrame * 2 );
		PlaySELoop( seShadow, nFrame * nNum, 6 );
		loop( nNum ){
			nCount -= nFrame;
			__Wait( nFrame );
			let nX = GetX();
			let nY = GetY();
			let nAngle = GetAngle() - nWayAngle * ( nWay - 1 ) / 2;
			let nAssign = 1;
			loop( nWay ){
				let nSpeed = rand( 3, 5 );
				let _nAngle = nAngle + rand( -70, 30 ) * nAssign;
				CreateEnemyFromScript( "Shadow", nX, nY, nSpeed, _nAngle, nCount );
				nAssign = - nAssign;
				nAngle += nWayAngle;
			}
		}

	}

	/**
	*	扇状弾
	*/
	task WideShotEx{

		let nFrame = 6;
		let nNum = 10 + 2 * m_nLevel;
		let nWay = 5 + 2 * m_nLevel;
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 1.5 + 0.6 * m_nLevel;
		let nNumSpeed = ( 5 + 0.6 * m_nLevel - nSpeed ) / ( nNum - 1 );
		let nWayAngle = 1.5;
		let nWideAngle = nWayAngle * ( nWay - 1 );
		let nGraphic = US_SCALE_RED;
		let nDelay = 8;

		SetAction( ACT_SHOT_A3, nFrame * nNum );
		loop( nNum ){
			let nAngle = GetAngleToPlayer();
			_WideShot01( nX, nY, nSpeed, nAngle, nWideAngle, nWay, nGraphic, nDelay );
			PlaySEEx( seShot1 );
			__Wait( nFrame );
			nSpeed += nNumSpeed;
		}

	}

	/**
	*	画面外チェック
	*/
	task CheckIsOut{

		loop{
			if( IsOut( -40 ) ){ SetInvincibility( 2 ); }
			yield;
		}

	}

	/**
	*	移動
	*/
	task Move{

		let nX = GetX();
		let nY = GetY();
		let _nX = rand( CL_MIN_X + 64, CL_CEN_X - 16 );
		if( GetPlayerX() < CL_CEN_X ){ _nX = rand( CL_CEN_X + 16, CL_MAX_X - 64 ); }
		let nY1 = CL_MAX_Y + 300;
		let nY2 = CL_MIN_Y - 300;
		let nRatio = ( nY1 - nY ) / ( CL_MAX_Y - nY );
		let nX1 = ( _nX - nX ) * nRatio + nX;
		nRatio = ( nY2 - nY ) / ( CL_MAX_Y - nY );
		let nX2 = ( _nX - nX ) * nRatio + nX;
		let nFrame1 = 90;
		let nFrame2 = 45;

		SetBlur( nFrame1 + nFrame2 + 5 );
		if( nX1 < nX ){ SetAction( ACT_MOVE_R, nFrame1 + nFrame2 ); }
		else{ SetAction( ACT_MOVE_L, nFrame1 + nFrame2 ); }
		SetMovePosition02( nX1, nY1, nFrame1 );
		__Wait( nFrame1 );
		SetPosition( nX2, nY2 );
		SetMovePosition02( nX, nY, nFrame2 );
		__Wait( nFrame2 - 10 );
		SlowMove( nX, nY, 20 );

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	使い魔
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy Shadow{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shadow.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = false;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_SHADOW_LIGHTING = false;
	FLAN_SHADOW_COLLISION = false;
	FLAN_SHADOW_DELETE_SHOT = 20;
	FLAN_ENEMY_COLLISION_A = 24;
	FLAN_ENEMY_COLLISION_B = 18;
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** ダメージ率（スペルプラクティス及び単体テスト時に固くする） */
	let m_nDamageRate = 1;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice || m_bStagePractice ){ m_nDamageRate = 0.9; }
		SetLife( 16 );
		_SetDamageRateDelayEx( 20 * m_nDamageRate, 20 * m_nDamageRate, 25, 25, 30 );
		if( m_nLevel >= 2 ){ FLAN_SHADOW_COLLISION = true; }
		BehaviorShadow( CHAR_SHADOW_CROW );

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*	@param bIsAppear 具現化中かどうか
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*	@param bIsAppear 具現化中かどうか
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){

		/** 弾消し */
		if( GetLife() <= 0 ){ DeleteEnemyShotToItem( CHILD ); }
		else{ DeleteEnemyShot( CHILD ); }

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*	@param bIsAppear 具現化中かどうか
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){

		/** 使い魔描画 */
		let nShadowImage = SHADOW_IMAGE_6S;
		let nShadowColor = SHADOW_COLOR_BLUE;
		if( m_nLevel >= 2 ){ nShadowColor = SHADOW_COLOR_RED; }
		let nAngle = 2 * m_nFlanCount;
		let nScale = 0.8;
		DrawShadow( nShadowImage, nShadowColor, nAngle, nScale, nScale );
		DrawShadowCharFloat();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 速度設定 */
		_SetSpeed( 90 );
		let nCount = nArgv;
		loop( nCount ){ yield; }

		/** トラップ弾 */
		TrapShot();
		loop( 180 ){ yield; }

		/** 消滅 */
		let nFrame = 30;
		let nDecelAlpha = 255 / nFrame;
		let nAccelScale = 0.05;
		Explosion01( GetX(), GetY(), nDecelAlpha, nAccelScale, nFrame );
		VanishEnemy();

	}

	/**
	*	トラップ弾
	*/
	function TrapShot{

		let nWay = 20;
		let nX = GetX();
		let nY = GetY();
		let nMinSpeed = 0.4 + 0.2 * m_nLevel;
		let nMaxSpeed = 1.4 + 0.4 * m_nLevel;
		let nAngle = rand( 0, 360 );
		let nWayAngle = 360 / nWay;
		let nGraphic = US_BALL_BS_ORANGE;
		if( m_nLevel >= 2 ){ nGraphic = US_LIGHT_ORANGE; }
		let nDelay = 20;

		loop( nWay ){
			let nSpeed = rand( nMinSpeed, nMaxSpeed );
			let nAccelSpeed = - nSpeed / 60;
			CreateShot02( nX, nY, nSpeed, nAngle, nAccelSpeed, 0, nGraphic, nDelay );
			nAngle += nWayAngle;
		}

	}

	/**
	*	速度設定
	*	@param nFrame	停止までのフレーム数
	*/
	task _SetSpeed( let nFrame ){

		let nSpeed = GetSpeed();
		let nAccelSpeed = - 5 / nFrame;

		while( nSpeed > 0 ){
			nSpeed += nAccelSpeed;
			if( nSpeed <= 0 ){ nSpeed =0; }
			SetSpeed( nSpeed );
			yield;
		}

	}

}
