//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		STAGE 5(妖精雑魚)
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	スクリプトここから
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	THCELをインクルード
//	(FLAN/THCELへのインクルードはTHCELが勝手にやってくれます)
//////////////////////////////////////////////////////////////////////

#include_function ".\INCLUDE\Zako.dnh"


//////////////////////////////////////////////////////////////////////
//	設定定義
//////////////////////////////////////////////////////////////////////

	/**	デフォルトアイテムの落下量を設定します。 */
	ENEMY_ITEMEX_NUM_DEFAULT = 4;
	/**	被弾判定の大きさを設定します。 */
	FLAN_ENEMY_COLLISION_A = 0;
	/**	接触判定の大きさを設定します。 */
	FLAN_ENEMY_COLLISION_B = 0;
	/**	onMainLoopへ処理をまわさないよう設定します。(まわしても何の処理も無い) */
	FLAN_ESS_NOCALL_MAINLOOP = false;


//////////////////////////////////////////////////////////////////////
//	定数宣言
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数宣言
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	固有動作実装部
//////////////////////////////////////////////////////////////////////

	/**
	*	敵の移動を管理するタスクです。
	*
	*	@param nLevel レベル(0〜3)
	*/
	task DoMove( let nLevel ){
		let stert_ef=rand(0,360);
		ef_zako(GetSpeed(),GetAngle(),stert_ef);
		ascent(i in 0..150){
			SetAngle(GetAngle()+0.3*cos((i*2+stert_ef)%360));
			yield;
		}
		let spmax=GetSpeed();
		ascent(i in 0..40){
			SetSpeed(SlowDown( spmax , 0 , i , 40 ));
			yield;
		}
		__Wait(50);
		let XX=GetX+rand(-100,100);
		SetMovePositionHermite(XX,GetClipMinY()-50,6*(XX-GetX()),0,100,-90,200);
	}

	/**
	*	出現時のエフェクトオブジェクト
	*
	*	@speed エフェクトの移動スピード
	*	@angle エフェクトの移動角度
	*	@hikisu エフェクトの初期のずれ
	*/
	task ef_zako(let speed, let angle, let hikisu){
		let obj = Obj_Create(OBJ_SINUATE_LASER);
		Obj_SetX(obj, GetX());
		Obj_SetY(obj, GetY());
		Obj_SetSpeed(obj, speed);
		Obj_SetAngle(obj, angle);
		ObjShot_SetGraphic(obj, US_BALL_S_A_WHITE );
		ObjSinuateLaser_SetLength(obj,100);
		ObjSinuateLaser_SetWidth(obj,8);
		Obj_SetCollisionToPlayer(obj,false);
		ObjShot_SetBombResist(obj,true);
	
		ascent(i in 0..150){
			Obj_SetAngle(obj,Obj_GetAngle(obj)+0.3*cos((i*2+hikisu)%360));
			Obj_SetAlpha(obj,Smooth(0,255,i,150));
			yield;
		}
		ObjShot_FadeDelete(obj);
	}


//////////////////////////////////////////////////////////////////////
//	共通動作実装部
//////////////////////////////////////////////////////////////////////

	/**
	*	敵固有のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTask( let nArgv, let nLevel ){
		DoMove( nLevel );
		__Wait(150);
		let speed = [1,2,3,4][nLevel];
		while(speed>=1){
			let angle=-0;
			while(angle<360){
				CreateShotA(0,GetX(),GetY(),10);
				SetShotDataA(0,0,speed,GetAngleToPlayer()-40+angle,0.65,0,0,US_SCALE_ORANGE);
				SetShotDataA(0,100/speed,NULL,NULL,0,-0.02,1.5,US_SCALE_ORANGE);
				FireShot(0);
				CreateShotA(0,GetX(),GetY(),10);
				SetShotDataA(0,0,speed,GetAngleToPlayer()+40+angle,-0.65,0,0,US_SCALE_ORANGE);
				SetShotDataA(0,100/speed,NULL,NULL,0,-0.02,1.5,US_SCALE_ORANGE);
				FireShot(0);
				angle+=[180,120,120,120][nLevel];
			}
			speed=speed/1.2;
			loop(3){yield;}
			PlaySEEx(seShot2);
		}
	}

	/**
	*	初期化時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( let nArgv, let nLevel ){
//		CreateDebugWindow();
		SetLife(13);
		SetInvincibility( 155 );
	}

	/**
	*	毎フレームごとに呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
		if(nCount > 150){
			FLAN_ENEMY_COLLISION_A = 13;
			FLAN_ENEMY_COLLISION_B = 8;
		}
	}

	/**
	*	終了時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
		if(nCount>150){DrawYousei( RECT_YOUSEI_RED );}
	}

}
