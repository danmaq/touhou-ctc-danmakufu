//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ1C　ボス　メディスン・メランコリー　スペル2
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Medicine - スペル2]
#Text[ステージ1C ボス
メディスン・メランコリー]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\BossSub.dnh"
	#include_function ".\INCLUDE\BOSS\Medicine.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 110;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;
	FLAN_ESS_NOCALL_MAINLOOP = false;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** サブキャラ間隔角度 */
	let m_nDollGapAngle = 0;

	/** ダメージ率（スペルプラクティス及び単体テスト時に固くする） */
	let m_nDamageRate = 1;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		m_bDeadEffect = true;
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
			m_nDamageRate = 0.8;
		}
		else if( m_bStagePractice ){ m_nDamageRate = 0.8; }
		SetTimer( 45 );
		SetLife( 400 );
		SetDamageRate( 13 * m_nDamageRate, 13 * m_nDamageRate );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );
		BehaviorSub( ACT_STAND3 );
		m_nDollGapAngle = GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_BOSS_ANGLE, -90 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KAEI + CL_TTH_CHARACTER_NAME_KAEI_MEDICINE;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** サブキャラ間隔角度設定 */
		m_nDollGapAngle += 360 / 240;

	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){
			if( IsTryLastSpell() ){ DropItemTHC( 10 ); }
		}

		/** 共通終了設定 */
		FinalizeBoss();

		/** 個別終了設定 */
		if( !m_bStage || m_bSpellPractice || !IsTryLastSpell() ){
			DeleteCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ANGLE );
		}
		else{
			SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ANGLE, m_nDollGapAngle );
		}

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス＆サブキャラ描画 */
		let nDollGapLength = 32;
		let nX = GetGapX( GetX(), nDollGapLength, m_nDollGapAngle );
		let nY = GetGapY( GetY(), nDollGapLength * 0.4, m_nDollGapAngle * 2 );
		if( sin( m_nDollGapAngle ) > 0 ){
			DrawBoss( m_szImageBoss );
			DrawSub( m_szImageBoss, CHAR_DOLL, nX, nY );
		}
		else{
			DrawSub( m_szImageBoss, CHAR_DOLL, nX, nY );
			DrawBoss( m_szImageBoss );
		}

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 55 );
		if( m_bDead ){ break; }

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetSubAction( ACT_SPELL3, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_KAEI + CL_TTH_SPELL_STAGE1_BOSS_2 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );
		if( m_bDead ){ break; }

		let nAssign = - 1;

		loop{

			/** 扇状毒霧 */
			SetAction( ACT_SHOT_A5, 120 );
			Concentration01( 30 );
			__Wait( 30 );
			if( m_bDead ){ break; }
			WidePoisonShot( nAssign );
			__Wait( 90 );
			if( m_bDead ){ break; }

			/** 隠れ弾 */
			SetAction( ACT_SHOT_B5, 80 );
			HiddenShot( - 1 );
			HiddenShot( 1 );
			__Wait( 80 );
			if( m_bDead ){ break; }

			/** 全方向隠れ弾 */
			SetAction( ACT_SHOT_A5, 100 );
			RoundHiddenShot( nAssign );
			__Wait( 100 );
			if( m_bDead ){ break; }

			/** 移動 */
			Move( 60 );
			__Wait( 60 );
			if( m_bDead ){ break; }

			nAssign = - nAssign;

		}

	}

	/**
	*	隠れ弾
	*	@param nAssign	割り振り係数
	*/
	task HiddenShot( let nAssign ){

		let _nX = GetX();
		let _nY = GetY();
		let nGapLength = 70;
		let nGapAngle = GetGapAngle( _nX, _nY, CL_CEN_X, CL_CEN_Y ) - 90 * nAssign;
		let nX = GetGapX( _nX, nGapLength, nGapAngle );
		let nY = GetGapY( _nY, nGapLength, nGapAngle );
		let nWay = [ 19, 22, 30, 32 ][ m_nLevel ];
		let nFrame = 3;
		let nNum = 8;
		let nSpeed = 1.5;
		let nMaxSpeed = 3.5;
		let nAngle = nGapAngle - 165 * nAssign;
		let nWayAngle = 330 / ( nWay - 1 ) * nAssign;
		let nGraphic = US_BALL_S_A_BLUE;
		let nDelay = 15;

		PlaySELoopEx( seShot1, nFrame * nWay, 10 );
		loop( nWay ){
			_LineShot( nX, nY, nSpeed, nMaxSpeed, nAngle, nNum, nGraphic, nDelay );
			__Wait( nFrame );
			if( m_bDead ){ break; }
			nAngle += nWayAngle;
		}

	}

	/**
	*	全方向隠れ弾
	*	@param nAssign	割り振り係数
	*/
	task RoundHiddenShot( let nAssign ){

		let nNum = [ 15, 30, 45, 90 ][ m_nLevel ];
		let nFrame = 4 - m_nLevel;
		let nWay = 3;
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 4;
		let nMaxSpeed = 1.6 + 0.2 * m_nLevel;
		let nAccelSpeed = ( nMaxSpeed - nSpeed ) / 10;
		let nAngle = -90;
		let nWayAngle = 360 / nWay;
		let nNumAngle = nWayAngle / 3.3 * nAssign;
		let nGraphic = US_BALL_S_A_RED;
		let nDelay = 5;
		let nSlowFrame = 15;

		PlaySELoopEx( seShot3, nFrame * nNum, 6 );
		loop( nNum ){
			let _nAngle = nAngle;
			loop( nWay ){
				CreateShotA( 0, nX, nY, nDelay );
				SetShotDataA( 0, 0, nSpeed, _nAngle, 0, 0, 0, nGraphic );
				SetShotDataA( 0, nSlowFrame, NULL, NULL, 0, nAccelSpeed, nMaxSpeed, nGraphic );
				FireShot( 0 );
				_nAngle += nWayAngle;
			}
			__Wait( nFrame );
			if( m_bDead ){ break; }
			nAngle += nNumAngle;
		}

	}

	/**
	*	扇状毒霧
	*	@param nAssign	割り振り係数
	*/
	task WidePoisonShot( let nAssign ){

		let nWay = 21;
		let nFrame = 3;
		let nGapLength = 10;
		let _nX = GetX();
		let _nY = GetY();
		let nAngle = GetGapAngle( GetX(), GetY(), CL_CEN_X, CL_CEN_Y ) - 90 * nAssign;
		let nWayAngle = 170 / ( nWay - 1 ) * nAssign;

		PlaySELoopEx( seShot2, nFrame * nWay, 8 );
		loop( nWay ){
			let nSpeed = 5.2 + rand( -2, 2 );
			let nX = GetGapX( _nX, nGapLength, nAngle );
			let nY = GetGapY( _nY, nGapLength, nAngle );
			PoisonSeed( nX, nY, nSpeed, nAngle );
			__Wait( nFrame );
			if( m_bDead ){ break; }
			nAngle += nWayAngle;
		}

	}

	/**
	*	毒霧弾
	*	@param nX		弾源x座標
	*	@param nY		弾源y座標
	*	@param nSpeed	速度
	*	@param nAngle	角度
	*/
	task PoisonSeed( let nX, let nY, let nSpeed, let nAngle ){

		let obj = Obj_Create( OBJ_SHOT );
		let nDelay = 15;
		Obj_SetPosition( obj, nX, nY );
		Obj_SetSpeed( obj, nSpeed );
		Obj_SetAngle( obj, nAngle );
		ObjShot_SetDelay( obj, nDelay );
		ObjShot_SetGraphic( obj, US_BALL_M_BLUE );
		ObjShot_SetBombResist( obj, true );

		/** 遅延 */
		loop( nDelay ){ yield; }

		/** 透過 */
		let nFrame = 30;
		let nAlpha = 63;
		let nAddAlpha = ( 255 - nAlpha ) / nFrame;
		loop( nFrame ){
			nAlpha += nAddAlpha;
			Obj_SetAlpha( obj, nAlpha );
			yield;
		}
		PoisonMist( Obj_GetX(obj), Obj_GetY(obj) );
		Obj_Delete( obj );

	}

	/**
	*	毒霧
	*	@param nX	x座標
	*	@param nY	y座標
	*/
	task PoisonMist( let nX, let  nY ){

		let obj = CreateSquareEffectObject( m_szImageShot, 0, 0, 256, 256, 256, 256 );
		Obj_SetX( obj, nX );
		Obj_SetY( obj, nY );
		ObjEffect_SetRenderState( obj, ADD );
		ObjEffect_SetAngle( obj, 0, 0, rand( 0, 360 ) );

		/** 拡大 */
		let nFrame = 180;
		let nScale = 0.15;
		let nAddScale=( 0.65 + 0.075 * m_nLevel - nScale ) / nFrame;
		loop( nFrame ){
			nScale += nAddScale;
			ObjEffect_SetScale( obj, nScale, nScale );
			yield;
		}

		/** 消滅 */
		nFrame = 20 + 20 * m_nLevel;
		nAddScale = - nScale / nFrame;
		loop( nFrame ){
			nScale += nAddScale;
			ObjEffect_SetScale( obj, nScale, nScale );
			yield;
		}
		Obj_Delete( obj );

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}
