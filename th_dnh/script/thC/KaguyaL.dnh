//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ1B　ボス　蓬莱山 輝夜　ラストスペル
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////


#ScriptVersion[2]
#BackGround[User]
#Title[Kaguya - ラストスペル]
#Text[ステージ1B ボス
蓬莱山 輝夜]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Kaguya.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 110;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** ダメージ率（スペルプラクティス及び単体テスト時に固くする） */
	let m_nDamageRate = 1;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		m_bDeadEffect = true;
		InitializeBoss();

		/** 個別初期設定 */
		if( m_nLevel > 0 ){ m_nLevel --; }
		SetTimer( 62 );
		SetLife( 375 );
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
			m_nDamageRate = 0.75;
			let nBossID = CL_TTH_CHARACTER_NAME_EIYA + CL_TTH_CHARACTER_NAME_EIYA_KAGUYA;
			SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 
		}
		else{
			if( m_bStagePractice ){ m_nDamageRate = 0.8; }
			SetPosition( FLAN_BOSS_HOME_X, FLAN_BOSS_HOME_Y + RandBlur( 0.1 ) );
			LastSpellEffect();
		}
		SetDamageRate( 5 * m_nDamageRate, 0 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		if( m_nFlanCount < 300 ){ DrawBoss( m_szImageBoss ); }
		else{ DrawBossFloat( m_szImageBoss ); }

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		if( !m_bStage || m_bSpellPractice ){
			SetAction( ACT_MOVE, nFrame );
			BossMoveHome( nFrame, true );
		}
		__Wait( 55 );
		if( m_bDead ){ break; }

		/** ボスID設定 */
		if( m_bStage && !m_bSpellPractice ){
			let nBossID = CL_TTH_CHARACTER_NAME_EIYA + CL_TTH_CHARACTER_NAME_EIYA_KAGUYA;
			SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 
		}

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_EIYA + CL_TTH_SPELL_STAGE1_BOSS_LAST + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );
		if( m_bDead ){ break; }

		SetAction( ACT_SHOT_B5, 120 );
		PlaySEEx( sePower );
		Concentration01( 120 );
		__Wait( 60 );
		if( m_bDead ){ break; }

		/** 翼弾 */
		WingShot( 1 );
		WingShot( - 1 );
		__Wait( 60 );
		if( m_bDead ){ break; }
		SetDamageRate( 13.5 * m_nDamageRate, 0 );
		__Wait( 270 );
		if( m_bDead ){ break; }

		loop{

			/** 移動 */
			Move( 180 );
			__Wait( 270 );
			if( m_bDead ){ break; }

		}

	}

	/**
	*	翼弾
	*	@param nAssign	割り振り係数
	*/
	task WingShot( let nAssign ){

		let nAngle = - 90 + 90 * nAssign;
		_SetAngle();
		loop{
			WideShotEx( nAngle );
			yield;
			if( m_bDead ){ break; }
		}

		/** 角度設定 */
		task _SetAngle{

			let nFlapFrame = [ 60, 20, 40, 15, 60 ];
			let nAddAngle = [
				- 90 / nFlapFrame[ 0 ] * nAssign,
				( 157.5 - 8 * m_nLevel ) / nFlapFrame[ 1 ] * nAssign,
				- ( 157.5 - 8 * m_nLevel ) / nFlapFrame[ 2 ] * nAssign,
				90 / nFlapFrame[ 3 ] * nAssign,
				720 / nFlapFrame[ 4 ]
			];
			let _nAssign = 1;

			/** 羽ばたき開始 */
			if( nAssign == 1 ){ PlaySELoopEx( seShot3, nFlapFrame[ 0 ], 6 ); }
			loop( nFlapFrame[ 0 ] ){
				yield;
				nAngle += nAddAngle[ 0 ];
			}
			if( m_bDead ){ break; }
			loop{
				/** 羽ばたき */
				if( nAssign == 1 ){ PlaySELoopEx( seShot3, ( nFlapFrame[ 1 ] + nFlapFrame[ 2 ]) * 3, 6 ); }
				loop( 3 ){
					nAngle = - 90;
					if( m_nLevel > 0 ){ WideShotEx2(); }
					loop( nFlapFrame[ 1 ] ){
						yield;
						nAngle += nAddAngle[ 1 ];
					}
					loop( nFlapFrame[ 2 ] ){
						yield;
						nAngle += nAddAngle[ 2 ];
					}
					if( m_bDead ){ break; }
				}
				if( m_bDead ){ break; }
				/** 回転 */
				if( nAssign == 1 ){ SetAction( ACT_SHOT_A3, 90 ); }
				nAngle = - 90 + RandBlur( 1 );
				loop( nFlapFrame[ 3 ] ){
					yield;
					nAngle += nAddAngle[ 3 ];
				}
				if( m_bDead ){ break; }
				if( nAssign == 1 ){ PlaySELoopEx( seShot2, nFlapFrame[ 4 ], 6 ); }
				loop( nFlapFrame[ 4 ] ){
					yield;
					nAngle += nAddAngle[ 4 ] * _nAssign;
				}
				loop( nFlapFrame[ 3 ] ){
					yield;
					nAngle -= nAddAngle[ 3 ];
				}
				_nAssign = - _nAssign;
				if( m_bDead ){ break; }
			}

		}

	}

	/**
	*	扇状弾（翼）
	*	@param nAngle	角度
	*/
	task WideShotEx( let nAngle ){

		let nGapLength = 20;
		let nX = GetGapX( GetX(), nGapLength, nAngle );
		let nY = GetGapY( GetY(), nGapLength, nAngle );
		let nWay = 3 + m_nLevel;
		let nSpeed = 3.8;
		let nWideAngle = 19 * ( nWay - 1 );
		let nGraphic = US_LIGHT_BLUE;
		let nDelay = 8;

		_WideShot01( nX, nY, nSpeed, nAngle, nWideAngle, nWay, nGraphic, nDelay );

	}

	/**
	*	扇状弾2
	*/
	function WideShotEx2{

		let nWay = 3 + 6 * ( m_nLevel - 1 );
		let nSpeed = 1.8;
		let nAngle = GetAngleToPlayer();
		let nWideAngle = 30 + 30 * ( m_nLevel - 1 );
		let nGraphic = US_LIGHT_YELLOW;
		let nDelay = 10;

		_WideShot01( GetX(), GetY(), nSpeed, nAngle, nWideAngle, nWay, nGraphic, nDelay );
		PlaySEEx( seShot1 );

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 60;
		let nMaxMoveX = 100;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}
