//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ1A　ボス　紅 美鈴　通常攻撃1
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Meirin - 通常攻撃1]
#Text[ステージ1A ボス
紅 美鈴]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Meirin.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 80;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** ダメージ率（スペルプラクティス及び単体テスト時に固くする） */
	let m_nDamageRate = 1;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			SetPosition( FLAN_BOSS_HOME_X, FLAN_BOSS_HOME_Y );
			m_nDamageRate = 0.8;
		}
		else if( m_bStagePractice ){ m_nDamageRate = 0.8; }
		SetTimer( 43 );
		SetLife( 2000 );
		SetDamageRate( 85 * m_nDamageRate, 85 * m_nDamageRate );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 61 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KOUMA + CL_TTH_CHARACTER_NAME_KOUMA_MEIRING;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		__Wait( 60 );

		loop{

			/** ランダム全方向弾 */
			SetAction( ACT_SHOT_A3_B, 120 );
			loop( 3 ){
				RandomRoundShot();
				__Wait( 30 );
			}
			__Wait( 60 );

			/** キック移動＋ランダム弾＋キック弾 */
			Concentration01( 30 );
			__Wait( 30 );
			PlaySEEx( seShot2 );
			MoveKick();
			RandomShot();
			__Wait( 90 );
			KickShot();

			/** 戻り移動＋全方向弾 */
			MoveReverse;
			RoundShotEx();
			__Wait( 150 );

		}

	}

	/**
	*	ランダム全方向弾
	*/
	task RandomRoundShot{

		let nNum = [ 1, 2, 4, 7 ][ m_nLevel ];
		let nWay = 18;
		let nX = GetX();
		let nY = GetY();
		let nBaseSpeed = 0.8;
		let nMaxSpeed = 3;
		let nWaySpeed = ( nMaxSpeed - nBaseSpeed ) / ( nWay - 1 );
		let nWayAngle = 360 / nWay;
		let nGraphic = US_BALL_S_BLUE;
		let nDelay = 20;

		PlaySEDelay( seShot1, nDelay );
		loop( nNum ){
			let _nAngle = rand( 0, 360 );
			let anSort = CreateMixOrderArray( nWay );
			ascent( let i in 0 .. nWay ){
				let nSpeed = nBaseSpeed + nWaySpeed * anSort[ i ];
				CreateShot01( nX, nY, nSpeed, _nAngle, nGraphic, nDelay );
				_nAngle += nWayAngle;
			}
		}

	}

	/**
	*	ランダム弾
	*/
	task RandomShot{

		let nNum = 45;
		let nFrame = 2;
		if( m_nLevel == 3 ){
			nNum = 90;
			nFrame = 1;
		}
		let nGapLength = 30;
		let nGapAngle = GetAngle();
		let nMinSpeed = 0.5 + 0.2 * m_nLevel;
		let nMaxSpeed = 1 + 0.4 * m_nLevel;
		let nGraphic = US_BALL_S_GREEN;
		let nDelay = 5;

		loop( nNum ){
			let nX = GetGapX( GetX(), nGapLength, nGapAngle );
			let nY = GetGapY( GetY(), nGapLength, nGapAngle );
			let nSpeed = rand( nMinSpeed, nMaxSpeed );
			let nAngle = rand( 0, 360 );
			CreateShot01( nX, nY, nSpeed, nAngle, nGraphic, nDelay );
			__Wait( nFrame );
		}

	}

	/**
	*	キック弾
	*/
	task KickShot{

		let nNum = 3;
		let nWay = 3 + 2 * m_nLevel;
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 1 + 0.2 * m_nLevel;
		let nNumSpeed = ( 1.5 + 0.3 * m_nLevel - nSpeed ) / ( nNum- 1 );
		let nWayAngle = 6;
		let nAngle = GetAngle() - nWayAngle * ( nWay - 1 ) / 2;

		PlaySEEx( seShot1 );
		loop( nNum ){
			let _nAngle = nAngle;
			loop( nWay ){
				_KickShot( nX, nY, nSpeed, _nAngle );
				_nAngle += nWayAngle;
			}
			nSpeed += nNumSpeed;
		}

	}

	/**
	*	キック弾（単発）
	*	@param nX		弾源x座標
	*	@param nY		弾源y座標
	*	@param nSpeed	速度
	*	@param nAngle	角度
	*/
	task _KickShot( let nX, let nY, let nSpeed, let nAngle ){

		let obj = Obj_Create( OBJ_SHOT );
		Obj_SetPosition( obj, nX, nY );
		Obj_SetSpeed( obj, nSpeed );
		Obj_SetAngle( obj, nAngle );
		ObjShot_SetGraphic( obj, US_NEEDLE_GREEN );

		/** 直進 */
		let nFrame = 30 + 10 * m_nLevel;
		loop( nFrame ){ yield; }

		/** フェードアウト */
		if( !Obj_BeDeleted( obj ) ){ Obj_SetCollisionToPlayer( obj, false ); }
		nFrame = 30;
		let nAlpha = 255;
		let nAddAlpha = - nAlpha / nFrame;
		loop( nFrame ){
			if( Obj_BeDeleted( obj ) ){ break; }
			nAlpha += nAddAlpha;
			Obj_SetAlpha( obj, nAlpha );
			yield;
		}
		if( !Obj_BeDeleted( obj ) ){ Obj_Delete( obj ); }

	}

	/**
	*	全方向弾
	*/
	task RoundShotEx{

		let nFrame = [ 60, 20, 15, 12 ][ m_nLevel ];
		let nNum = [ 0, 2, 3, 4 ][ m_nLevel ];
		let nWay = 6 + 16 * m_nLevel;
		let nSpeed = 2;
		let nGraphic = US_RICE_S_RED;
		let nDelay = 0;

		loop( nNum ){
			__Wait( nFrame );
			let nAngle = rand( 0, 360 );
			_RoundShot01( GetX(), GetY(), nSpeed, nAngle, nWay, nGraphic, nDelay );
			PlaySEEx( seKira1 );
		}

	}

	/**
	*	キック移動
	*/
	function MoveKick{

		let nMoveX = rand( 50, 100 );
		let nX = GetX();
		if( nX < GetPlayerX() ){
			if( nX + nMoveX > CL_MAX_X - FLAN_BOSS_MOVE_MARGIN_SIDE ){ nX -= nMoveX; }
			else{ nX += nMoveX; }
		}
		else{
			if( nX - nMoveX < CL_MIN_X + FLAN_BOSS_MOVE_MARGIN_SIDE ){ nX += nMoveX; }
			else{ nX -= nMoveX; }
		}
		let nY = CL_MAX_Y;
		let nSpeed = 2.5;
		SetMovePosition01( nX, nY, nSpeed );
		let nAction = ACT_MOVE_L;
		if( nX < GetX() ){ nAction = ACT_MOVE_R; }
		SetAction( nAction, 150 );

	}

	/**
	*	戻り移動
	*/
	task MoveReverse{

		let nX = GetX();
		let nY = FLAN_BOSS_HOME_Y;
		let nForce = 600;
		let nAngle = -90;
		let nFrame = 60;
		SetMovePositionHermite( nX, nY, nForce, nAngle, 0, 0, nFrame - 1 );
		__Wait( nFrame - 1 );
		SetMovePosition02( nX, nY, 1 );

	}

}
