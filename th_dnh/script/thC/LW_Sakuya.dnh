//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ラストワード　十六夜 咲夜
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Sakuya - ラストワード]
#Text[ラストワード
十六夜 咲夜]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Sakuya.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 100;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 80;
	FLAN_ESS_NOCALL_MAINLOOP = false;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/**
	*	弾移動に関するフレーム数
	*	狙い直線, ランダム回転, ランダム固定, ランダム直線, 狙い回転, 狙い固定
	*/
	let m_anFrame = [ 120, 60, 30, 120, 60, 30 ];

	/** プレイヤー座標 */
	let m_nPlayerX = 0;
	let m_nPlayerY = 0;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		SetPosition( m_nPracticeX, m_nPracticeY );
		SetTimer( 60 );
		SetLife( 500 );
		SetDamageRate( 2, 0 );
		SetShotAutoDeleteClip( 48, 48, 48, 48 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KOUMA + CL_TTH_CHARACTER_NAME_KOUMA_SAKUYA;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** プレイヤー座標設定 */
		m_nPlayerX = GetPlayerX();
		m_nPlayerY = GetPlayerY();

	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 55 );

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_LASTWORD + CL_TTH_SPELL_LW_SAKUYA;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );

		/** 扇状追尾弾 */
		WideSearchShot();
		SetDamageRateDelay( 38, 0, 60 * 14 );

		loop{

			PlaySEEx( sePower );
			__Wait( 60 );
			Concentration01( 60 );
			__Wait( m_anFrame[ 0 ] - 60 );

			/** 時間停止＋移動 */
			PlaySEEx( seKira1 );
			TimeStop( m_anFrame[ 1 ] + m_anFrame[ 2 ], 1, 1, 1 );
			Move( m_anFrame[ 1 ] );
			__Wait( m_anFrame[ 1 ] + m_anFrame[ 2 ] );

			/** 全方向直線弾 */
			RoundLineShotEx();
			PlaySEEx( sePower );
			__Wait( 60 );
			Concentration01( 60 );
			__Wait( m_anFrame[ 3 ] - 60 );

			/** 時間停止＋移動 */
			PlaySEEx( seKira1 );
			TimeStop( m_anFrame[ 4 ] + m_anFrame[ 5 ], 1, 1, 1 );
			Move( m_anFrame[ 4 ] );
			__Wait( m_anFrame[ 4 ] + m_anFrame[ 5 ] );

			/** 追尾弾補充 */
			_WideSearchShot();

		}

	}

	/**
	*	扇状追尾弾
	*/
	function WideSearchShot{

		let nWay = 32;
		let nNum = 5;
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 0.6;
		let nNumSpeed = ( 1.8 - nSpeed ) / ( nNum - 1 );
		let nAngle = - 20;

		SetAction( ACT_SHOT_A4, 45 );
		PlaySEEx( seShot1 );
		ascent( let i in 0 .. nNum ){
			let _nWay = [ nWay, nWay - 1 ][ i % 2 ];
			let nWayAngle = 220 / ( _nWay - 1 );
			let _nAngle = nAngle;
			loop( _nWay ){
				SearchShot( nX, nY, nSpeed, _nAngle );
				_nAngle += nWayAngle;
			}
			nSpeed += nNumSpeed;
		}

	}

	/**
	*	追尾弾補充
	*/
	function _WideSearchShot{

		let nWay = 160 - GetEnemyShotCount();
		if( nWay < 20 ){ return; }
		let nNum = 5;
		nWay = trunc( nWay / nNum );
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 0.6;
		let nNumSpeed = ( 1.8 - nSpeed ) / ( nNum - 1 );
		let nAngle = - 20;

		SetAction( ACT_SHOT_A4, 45 );
		PlaySEEx( seShot1 );
		ascent( let i in 0 .. nNum ){
			let _nWay = [ nWay, nWay - 1 ][ i % 2 ];
			let nWayAngle = 220 / ( _nWay - 1 );
			let _nAngle = nAngle;
			loop( _nWay ){
				SearchShot( nX, nY, nSpeed, _nAngle );
				_nAngle += nWayAngle;
			}
			nSpeed += nNumSpeed;
		}

	}

	/**
	*	追尾弾
	*	@param nX		弾源x座標
	*	@param nY		弾源y座標
	*	@param nSpeed	速度
	*	@param nAngle	角度
	*/
	task SearchShot( let nX, let nY, let nSpeed, let nAngle ){

		let obj = Obj_Create( OBJ_SHOT );
		let anGraphic = [ US_KNIFE_KOUMA_PURPLE, US_KNIFE_KOUMA_GREEN, US_KNIFE_KOUMA_RED ];
		let nNoHitFrame = 12;
		Obj_SetPosition( obj, nX, nY );
		Obj_SetSpeed( obj, nSpeed );
		Obj_SetAngle( obj, nAngle );
		ObjShot_SetGraphic( obj, US_KNIFE_KOUMA_PURPLE );

		loop{

			loop( nNoHitFrame ){ yield; }
			if( Obj_BeDeleted( obj ) ){ break; }
			Obj_SetCollisionToPlayer( obj, true );
			loop( m_anFrame[ 0 ] - nNoHitFrame ){ yield; }
			if( Obj_BeDeleted( obj ) ){ break; }

			/** ランダム回転 */
			let nRollAngle = ( rand( - 180, 180 ) - nAngle + 360 ) / m_anFrame[ 1 ];
			Obj_SetSpeed( obj, 0 );
			ObjShot_SetGraphic( obj, US_KNIFE_KOUMA_GREEN );
			Obj_SetCollisionToPlayer( obj, false );
			loop( m_anFrame[ 1 ] ){
				if( Obj_BeDeleted( obj ) ){ break; }
				nAngle += nRollAngle;
				Obj_SetAngle( obj, nAngle );
				yield;
			}

			/** ランダム固定 */
			loop( m_anFrame[ 2 ] ){ yield; }
			if( Obj_BeDeleted( obj ) ){ break; }

			/** ランダム直進 */
			Obj_SetSpeed( obj, rand( 1, 2 ) );
			loop( nNoHitFrame ){ yield; }
			if( Obj_BeDeleted( obj ) ){ break; }
			Obj_SetCollisionToPlayer( obj, true );
			loop( m_anFrame[ 3 ] - nNoHitFrame ){ yield; }
			if( Obj_BeDeleted( obj ) ){ break; }

			/** 狙い回転 */
			nRollAngle = ( GetGapAngle( Obj_GetX( obj ), Obj_GetY( obj ), m_nPlayerX, m_nPlayerY ) - nAngle + 720 ) / m_anFrame[ 4 ];
			Obj_SetSpeed( obj, 0 );
			ObjShot_SetGraphic( obj, US_KNIFE_KOUMA_RED );
			Obj_SetCollisionToPlayer( obj, false );
			loop( m_anFrame[ 4 ] ){
				if( Obj_BeDeleted( obj ) ){ break; }
				nAngle += nRollAngle;
				Obj_SetAngle( obj, nAngle );
				yield;
			}

			/** 狙い固定 */
			loop( m_anFrame[ 5 ] ){ yield; }
			if( Obj_BeDeleted( obj ) ){ break; }

			/** 狙い直進 */
			Obj_SetSpeed( obj, rand( 1, 2 ) );

		}

	}

	/**
	*	全方向直線弾
	*/
	task RoundLineShotEx{

		let nWay = 6;
		let nNum = 4;
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 1;
		let nMaxSpeed = 3;
		let nAngle = GetAngleToPlayer() - 360 / nWay * 0.5;
		let nGraphic = US_BALL_L_PURPLE;
		let nDelay = 10;

		SetAction( ACT_SHOT_B3, 30 );
		PlaySEEx( seShot2 );
		_RoundLineShot( nX, nY, nSpeed, nMaxSpeed, nAngle, nWay, nNum, nGraphic, nDelay );

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		__Wait( 30 );

		let nMinMoveX = 30;
		let nMaxMoveX = 60;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}
