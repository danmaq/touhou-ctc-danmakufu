//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージEx　ボス　伊吹 萃香　ラストスペル
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[SuikaB - ラストスペル]
#Text[ステージEx ボス
伊吹 萃香]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Suika.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 120;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** フェイズ番号 */
	let m_nPhase = 0;

	/** 鬼火弾角度 */
	let m_nAngle = 0;

	/** 巨大弾画像ファイル */
	let m_szImageShot = IMAGE_CL_SHOT_ALL;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		m_bDeadEffect = true;
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage ){ LoadGraphic( m_szImageShot ); }
		SetTimer( 65 );
		SetLife( 500 );
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
			let nBossID = CL_TTH_CHARACTER_NAME_EXPH + CL_TTH_CHARACTER_NAME_EXPH_SUIKA;
			SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 
		}
		else{
			SetPosition( FLAN_BOSS_HOME_X, FLAN_BOSS_HOME_Y );
			LastSpellEffect();
		}
		SetDamageRate( 5, 0 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		if( !m_bStage || m_bSpellPractice ){
			SetAction( ACT_MOVE, nFrame );
			BossMoveHome( nFrame, true );
		}
		__Wait( 55 );
		if( m_bDead ){ break; }

		/** ボスID設定 */
		if( m_bStage && !m_bSpellPractice ){
			let nBossID = CL_TTH_CHARACTER_NAME_EXPH + CL_TTH_CHARACTER_NAME_EXPH_SUIKA;
			SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 
		}

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_EXTRA + CL_TTH_SPELL_EXPH_BOSS_LAST;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );
		if( m_bDead ){ break; }

		/** 鬼火召喚 */
		SetAction( ACT_SHOT_B5, 120 );
		PlaySEEx( sePower );
		Concentration01( 120 );
		__Wait( 120 );
		SetAction( ACT_SHOT_A5, 120 );
		SummonWisp();
		__Wait( 180 );

		loop{

			/** 巨大弾 */
			SetAction( ACT_SHOT_B5, 130 );
			CreateShotFromScript( "XLShot", GetX(), GetY() - 24, 0, 0, 0, 0 );
			__Wait( 135 );
			if( m_bDead ){ break; }

			/** 移動 */
			Move( 45 );
			__Wait( 45 );
			if( m_bDead ){ break; }

			SetDamageRate( 8, 0 );

		}

	}

	/**
	*	鬼火弾召喚
	*/
	task SummonWisp{

		let nX = GetX();
		let nY = GetY();
		let nFrame = 5;
		let nNum = 17;
		let nCount = 180;
		let nAddAngle = 0.08;

		ascent( let i in 0 .. nNum ){
			Wisp( nX, nY, i, nCount, nAddAngle );
			__Wait( nFrame );
			if( m_bDead ){ break; }
			nCount -= nFrame;
		}
		Wisp( nX, nY, nNum + 1, nCount, nAddAngle );
		nCount -= nFrame;
		__Wait( nCount );
		PlaySEEx( seLaser1 );
		__Wait( 140 );

		loop{
			m_nAngle += nAddAngle;
			yield;
		}

	}

	/**
	*	鬼火弾（1個）
	*	@param _nX			弾源x座標
	*	@param _nY			弾源y座標
	*	@param nNumber		弾番号
	*	@param nCount		攻撃開始までのフレーム数
	*	@param nAddAngle	回転角速度
	*/
	task Wisp( let _nX, let _nY, let nNumber, let nCount, let nAddAngle ){

		let nGapX = ( CL_MAX_X - CL_MIN_X ) / 4;
		let nGapY = ( CL_MAX_Y - CL_MIN_Y ) / 5;
		let nGap = [ - nGapY, nGapX, nGapY, - nGapX ][ nNumber % 4 ];
		let nX = [ CL_MIN_X, CL_MIN_X, CL_MAX_X, CL_MAX_X ][ nNumber % 4 ];
		let nY = [ CL_MAX_Y, CL_MIN_Y, CL_MIN_Y, CL_MAX_Y ][ nNumber % 4 ];
		if( nNumber % 2 == 1 ){ nX += nGap * [ 3, 0, 2, 1 ][ trunc( nNumber / 4 ) ]; }
		if( nNumber % 2 == 0 ){ nY += nGap * [ 4, 1, 3, 2, 0 ][ trunc( nNumber / 4 ) ]; }

		/** 砲台設置 */
		let nDelay = 10;
		let nFrame = 60;
		let nSpeed = GetGapLength( _nX, _nY, nX, nY ) / nFrame;
		let nAngle = GetGapAngle( _nX, _nY, nX, nY );
		let nGraphic = [ US_LIGHT_ORANGE, US_LIGHT_GREEN, US_LIGHT_SKY, US_LIGHT_PURPLE ][ nNumber % 4 ];
		CreateShotA( 0, _nX, _nY, nDelay );
		SetShotDataA( 0, 0, nSpeed, nAngle, 0, 0, 0, nGraphic );
		SetShotDataA( 0, nFrame, 0, NULL, 0, 0, 0, nGraphic );
		FireShot( 0 );
		PlaySEEx( seShot1 );

		loop( nFrame ){ yield; }
		Explosion01( nX, nY, 255 / 30, 0.1, 30 );
		loop( nCount - nFrame ){ yield; }

		let nFrame = 140;
		let bFirst = true;
		RoundLaser();
		loop( nFrame ){ yield; }
		bFirst = false;
		nFrame = 75;
		loop{
			RoundLaser();
			loop( nFrame ){ yield; }
		}

		/** 全方向レーザー */
		task RoundLaser{

			let nWay = 4;
			let nAngle = m_nAngle;
			let nWayAngle = 360 / nWay;
			let _nAddAngle = nAddAngle;
			let _nGraphic = [ US_BEAM_ORANGE, US_BEAM_GREEN, US_BEAM_SKY, US_BEAM_PURPLE ][ nNumber % 4 ];
			let _nDelay = 55;
			let nKill = 85;
			let nLength = 600;
			let nAddLength = 0;
			let nWidth = 12;
			let _nFrame = 60;
			if( bFirst ){
				_nAddAngle = 0;
				_nDelay += _nFrame;
				nKill += _nFrame;
				nLength = 0;
				nAddLength = 600 / _nFrame;
			}

			loop( nWay ){
				let bShot = true;
				alternative( nNumber % 4 )
				case( 0 ){
					if( cos( nAngle ) < 0 ){ bShot = false; }
				}
				case( 1 ){
					if( sin( nAngle ) < 0 ){ bShot = false; }
				}
				case( 2 ){
					if( cos( nAngle ) > 0 ){ bShot = false; }
				}
				others{
					if( sin( nAngle ) > 0 ){ bShot = false; }
				}
				if( bShot ){
					CreateLaserA( 0, nX, nY, nLength, nWidth, _nGraphic, _nDelay );
					SetLaserDataA( 0, 0, nAngle, _nAddAngle, nAddLength, 0, 0 );
					if( bFirst ){ SetLaserDataA( 0, _nFrame, NULL, _nAddAngle, 0, 0, 0 ); }
					SetShotKillTime( 0, nKill );
					FireShot( 0 );
				}
				PlaySEDelay( seLaser2, _nDelay );
				nAngle += nWayAngle;
			}

		}

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	巨大弾
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_shot XLShot{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shot.dnh"


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = false;
	FLAN_RINGOUT_BORDER = 200;
	FLAN_ESS_NOCALL_MAINLOOP = false;


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** 巨大弾画像ファイル */
	let m_szImageShot = IMAGE_CL_SHOT_ALL;

	/** 描画倍率 */
	let m_nScale = 0;

	/** 半径 */
	let m_nR = 0;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		SetBombResist();

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 当たり判定 */
		SetCollisionB( GetX(), GetY(), m_nR * 0.85 );

	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 弾描画 */
		let nRectX = 384;
		let nRectY = 64;
		let nRectLength = 64;
		SetGraphicScale( m_nScale, m_nScale );
		SetRenderState( ADD );
		__DrawChrRect( m_szImageShot, GetX(), GetY(), nRectX, nRectY, nRectLength, nRectLength );

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 半径設定 */
		let nMaxLife = 500;
		let nR = 32 + 128 * ( nMaxLife - GetEnemyLife() ) / nMaxLife;

		/** 倍率設定 */
		let nFrame = 120;
		_SetScale( nR, nFrame );
		PlaySEEx( sePower );

		/** 上昇 */
		SetMovePosition02( GetX(), GetY() - nR, nFrame );
		loop( nFrame + 1 ){ yield; }

		/** 発射 */
		SetSpeed( 2.5 );
		SetAngle( GetAngleToPlayer() );
		PlaySEEx( seShot2 );

	}

	/**
	*	倍率設定
	*	@param nR		最大半径
	*	@param nFrame	最大になるまでのフレーム数
	*/
	task _SetScale( let nR, let nFrame ){

		let nMinR = 32;
		let nScale = nR / nMinR;
		ascent( let i in 0 .. nFrame ){
			m_nScale = Smooth( 0, nScale, i, nFrame );
			m_nR = Smooth( 0, nR, i, nFrame );
			yield;
		}

	}

}
