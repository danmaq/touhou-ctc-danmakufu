//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ3C　ボス　四季映姫・ヤマザナドゥ　通常攻撃2
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Eiki - 通常攻撃2]
#Text[ステージ3C ボス
四季映姫・ヤマザナドゥ]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Eiki.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		SetTimer( 44 );
		SetLife( 2500 );
		SetDamageRate( 85, 85 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );
		CheckExplosion01Ex();

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KAEI + CL_TTH_CHARACTER_NAME_KAEI_EIKI;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

		/** 個別終了設定 */
		EndExplosion01Ex();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 150;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 180 );

		/** 霊魂召喚 */
		SummonSpilit();

		loop{

			loop( 3 ){

				/** 移動 */
				Move( 40 );
				__Wait( 40 );

				/** 扇状弾 */
				WideShotEx();
				__Wait( 60 );

			}

			/** レーザー */
			Laser();
			__Wait( 150 );

		}

	}

	/**
	*	霊魂召喚
	*/
	task SummonSpilit{

		let nWay = 8;
		let nBaseAngle = 0;
		let nWayAngle = 180 / ( nWay - 1 );
		let nFrame = 34 - 4 * m_nLevel;

		loop{
			let anSort = CreateMixOrderArray( nWay );
			ascent( let i in 0 .. nWay ){
				let nAngle = nBaseAngle + nWayAngle * anSort[ i ];
				CreateShotFromScript( "Spilit", GetX(), GetY(), 0, nAngle, 0, anSort[ i ] );
				if( i % 2 == 0 ){ PlaySEEx( seShadow ); }
				__Wait( nFrame );
			}
		}

	}

	/**
	*	扇状弾
	*/
	task WideShotEx{

		let nNum = 10;
		let nFrame = 6;
		let nWay = 4 + 2 * m_nLevel;
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 4.2 + 0.3 * m_nLevel;
		let nAngle = GetAngleToPlayer();
		let nWideAngle = 70 + 10 * m_nLevel;
		let nGraphic = US_TABLET;
		let nDelay = 15;

		SetAction( ACT_SHOT_A3, nFrame * nNum );
		PlaySELoop( seShot1, nFrame * nNum, 10 );
		loop( nNum ){
			_WideShot01( nX, nY, nSpeed, nAngle, nWideAngle, nWay, nGraphic, nDelay );
			__Wait( nFrame );
		}

	}

	/**
	*	レーザー
	*/
	task Laser{

		SetAction( ACT_SHOT_B5, 150 );

		/** 側面レーザー */
		let anAssign = [ - 1, 1 ];
		let nWay = 4;
		let nX = GetX();
		let nY = GetY();
		let nBaseAngle = GetAngleToPlayer();
		let nSideAngle = 70;
		let nWayAngle = 20;
		let nFrame = 5;

		loop( nWay ){
			ascent( let i in 0 .. 2 ){
				let nAngle = nBaseAngle + nSideAngle * anAssign[ i ];
				SideLaser( nX, nY, nAngle, i );
			}
			__Wait( nFrame );
			nSideAngle += nWayAngle;
		}

		/** 正面レーザー */
		let nLength = 0;
		let nWidth = 32 + 6 * m_nLevel;
		let nGraphic = US_BALL_M_A_PURPLE;
		let nDelay = 50 - 4 * m_nLevel;
		let nKill = 130;
		let nFrame = 24;
		let nAddLength = 600 / nFrame;

		CreateLaserA( 0, nX, nY, nLength, nWidth, nGraphic, nDelay );
		SetLaserDataA( 0, 0, nBaseAngle, 0, nAddLength, 0, 0 );
		SetLaserDataA( 0, nFrame, NULL, 0, 0, 0, 0 );
		SetShotKillTime( 0, nKill );
		FireShot( 0 );
		PlaySEEx( seLaser1 );

	}

	/**
	*	側面レーザー
	*	@param _nX	レーザー源x座標
	*	@param _nY	レーザー源y座標
	*	@param nAngle	角度
	*	@param nGra	画像番号
	*/
	task SideLaser( let _nX, let _nY, let nAngle, let nGra ){

		let obj = Obj_Create( OBJ_LASER );
		let nGapLength = 10;
		let nX = GetGapX( _nX, nGapLength, nAngle );
		let nY = GetGapY( _nY, nGapLength, nAngle );
		let anGraphic = [ US_BALL_M_A_BLUE, US_BALL_M_A_RED ];
		Obj_SetPosition( obj, nX, nY );
		Obj_SetAngle( obj, nAngle );
		ObjShot_SetDelay( obj, 20 );
		ObjShot_SetGraphic( obj, anGraphic[ nGra ] );
		ObjLaser_SetLength( obj, 600 );
		ObjLaser_SetWidth( obj, 16 );
		ObjLaser_SetSource( obj, false );

		loop( 120 ){ yield; }
		ObjShot_FadeDelete( obj );

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	霊魂
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_shot Spilit{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shot.dnh"


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = true;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** 霊魂番号 */
	let m_nNumber;

	/** 初期角度 */
	let m_nStartAngle;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		m_bShadow = true;
		m_nShadowType = SHADOW_TYPE_SPILIT;
		m_bShadowDead = true;
		m_nNumber = nArgv;
		m_nStartAngle = GetAngle();
		CheckBossLife();

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 移動 */
		Move();
		loop( 60 ){ yield; }

		/** ランダム弾＋消滅 */
		RandomShot();
		End();

	}

	/**
	*	ランダム弾
	*/
	function RandomShot{

		let nNum = 8;
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 1.4;
		let nNumSpeed = ( 2.8 - nSpeed ) / ( nNum - 1 );
		let nBaseAngle = 90;
		let nGraphic = US_FIRE_BLUE;

		ascent( let i in 0 .. nNum ){
			let nAngle = nBaseAngle + RandBlur( ( nNum - 1 - i ) * 2 );
			CreateShot01( nX, nY, nSpeed, nAngle, nGraphic, 0 );
			nSpeed += nNumSpeed;
		}

	}

	// 移動 --------------------------------------------------------------------
	task Move{

		let nGapLength = 40;
		let nX = CL_CEN_X + RandBlur( nGapLength );
		let nY = GetEnemyY() + 40 + nGapLength + RandBlur( nGapLength );
		let nForce = 600;
		let nAngle = m_nStartAngle;
		let _nForce = 300;
		let _nAngle = rand( 0, 360 );
		let nFrame = 30;
		SetMovePositionHermite( nX, nY, nForce, nAngle, _nForce, _nAngle, nFrame );
		loop( nFrame ){ yield; }

		let nMaxNumber = 8;
		let nNumberX = ( CL_MAX_X - CL_MIN_X - 40 ) / ( nMaxNumber - 1 );
		let nBaseX = CL_MIN_X + 20;
		nX = nBaseX + nNumberX * m_nNumber + RandBlur( nNumberX * 0.15 );
		nY = CL_MIN_Y;
		nForce = 300;
		nAngle = - 90;
		nFrame = 29;
		SetMovePositionHermite( nX, nY, _nForce, _nAngle, nForce, nAngle, nFrame );
		loop( nFrame ){ yield; }

		SetMovePosition02( nX, nY, 1 );

	}

}
