//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ3C　ボス　四季映姫・ヤマザナドゥ　ラストスペル
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////


#ScriptVersion[2]
#BackGround[User]
#Title[Eiki - ラストスペル]
#Text[ステージ3C ボス
四季映姫・ヤマザナドゥ]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Eiki.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 80;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** 最大ライフ（ラストスペルエフェクトでm_nFlanEnemyMaxLifeは使えない） */
	let m_nMaxLife = 500;

	/** カウンターしたか */
	let m_bCounter = false;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		m_bDeadEffect = true;
		InitializeBoss();

		/** 個別初期設定 */
		if( m_nLevel > 0 ){ m_nLevel --; }
		SetTimer( 61 );
		SetLife( 500 );
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
			let nBossID = CL_TTH_CHARACTER_NAME_KAEI + CL_TTH_CHARACTER_NAME_KAEI_EIKI;
			SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 
		}
		else{
			SetPosition( FLAN_BOSS_HOME_X, FLAN_BOSS_HOME_Y + RandBlur( 0.1 ) );
			LastSpellEffect();
		}
		SetDamageRate( 15, 0 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );
		CheckAlpha( 0, 32, 16 );

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}

//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		if( !m_bStage || m_bSpellPractice ){
			SetAction( ACT_MOVE, nFrame );
			BossMoveHome( nFrame, true );
		}
		__Wait( 55 );
		if( m_bDead ){ break; }

		/** ボスID設定 */
		if( m_bStage && !m_bSpellPractice ){
			let nBossID = CL_TTH_CHARACTER_NAME_KAEI + CL_TTH_CHARACTER_NAME_KAEI_EIKI;
			SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 
		}

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_KAEI + CL_TTH_SPELL_STAGE3_BOSS_LAST + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );
		if( m_bDead ){ break; }

		/** 回転扇状弾 */
		RollWideShot( 1 );
		RollWideShot( - 1 );

		/** ライフチェック */
		LifeCheck();

		loop{

			/** 移動 */
			Move( 120 );
			__Wait( 240 );
			if( m_bDead ){ break; }

		}

	}

	/**
	*	回転扇状弾
	*	@param nAssign	割り振り係数
	*/
	task RollWideShot( let nAssign ){

		let nShotFrame = 20;
		let _nShotFrame = - 6 - m_nLevel;
		let nWay = [ 4, 5, 5 ][ m_nLevel ];
		let nSpeed = 6.4;
		let _nSpeed = 2;
		let _nFrame = 15;
		let nWayAngle = 36;
		let nAngle = - nWayAngle * ( nWay - 1 ) / 2;
		let nAddAngle = nWayAngle * 0.6 * nAssign;
		let nGraphic = US_BALL_L_BLUE;
		if( nAssign == - 1 ){ nGraphic = US_BALL_L_RED; }
		let nDelay = 10;

		loop{
			let nX = GetX();
			let nY = GetY();
			let _nAngle = nAngle;
			loop( nWay ){
				CreateShotA( 0, nX, nY, nDelay );
				SetShotDataA( 0, 0, nSpeed, _nAngle, 0, 0, 0, nGraphic );
				SetShotDataA( 0, _nFrame, _nSpeed, NULL, 0, 0, 0, nGraphic );
				FireShot( 0 );
				_nAngle += nWayAngle;
			}
			PlaySEEx( seShot1 );
			let nFrame = nShotFrame + trunc( _nShotFrame * ( m_nMaxLife - GetLife() ) / m_nMaxLife );
			__Wait( nFrame );
			if( m_bDead ){ break; }
			nAngle += nAddAngle;
		}

	}

	/**
	*	ライフチェック
	*/
	task LifeCheck{

		let nNextLife = m_nMaxLife * ( 0.5 + 0.1 * m_nLevel );
		while( GetLife() > nNextLife ){ yield; }
		if( m_bDead ){ break; }
		SetDamageRate( 5, 0 );

		/** 反射鏡 */
		PlaySEEx( sePower );
		Concentration01( 120 );
		__Wait( 120 );
		if( m_bDead ){ break; }
		CounterMirror( GetLife() );
		PlaySEEx( seKira1 );
		SetDamageRate( 18, 0 );

	}

	/**
	*	反射鏡
	*	@param nBeforeLife	出現時（処理中では前フレーム）のライフ
	*/
	task CounterMirror( let nBeforeLife ){

		MirrorLaser();
		CounterSE();
		__Wait( 30 );

		let nCount = m_nFlanCount;
		let nWaitCount = 5 - m_nLevel;
		loop{
			if( nBeforeLife - GetLife() > 0 ){
				if( nCount < m_nFlanCount ){
					CounterShot();
					m_bCounter = true;
					nCount = m_nFlanCount + nWaitCount;
				}
			}
			nBeforeLife = GetLife();
			yield;
		}

	}

	/**
	*	反射SE
	*/
	task CounterSE{

		let nCounterNum = 0;
		let nCount = m_nFlanCount;
		let nWaitCount = 4 - m_nLevel;
		loop{
			if( m_bCounter ){
				nCounterNum ++;
				m_bCounter = false;
			}
			if( nCounterNum > 0 ){
				if( nCount < m_nFlanCount ){
					PlaySEEx( seKira2 );
					nCount = m_nFlanCount + nWaitCount;
				}
				nCounterNum --;
			}
			yield;
		}

	}

	/**
	*	鏡レーザー
	*/
	task MirrorLaser{

		let obj = Obj_Create( OBJ_LASER );
		ObjShot_SetDelay( obj, 10 );
		ObjShot_SetGraphic( obj, US_BALL_M_A_SKY );
		ObjLaser_SetWidth( obj, 18 );
		ObjLaser_SetSource( obj, false );
		Obj_SetAutoDelete( obj, false );

		let nLength = 0;
		_SetLength();
		_SetLocation();

		/** 位置設定 */
		task _SetLocation{

			let nGapLength = 40;
			loop{
				let nAngle = GetAngleToPlayer();
				let _nX = GetGapX( GetX(), nGapLength, nAngle );
				let _nY = GetGapY( GetY(), nGapLength, nAngle );
				let nX = GetGapX( _nX, nLength / 2, nAngle + 90 );
				let nY = GetGapY( _nY, nLength / 2, nAngle + 90 );
				Obj_SetPosition( obj, nX, nY );
				Obj_SetAngle( obj, nAngle - 90 );
				yield;
			}

		}

		/** 長さ設定 */
		task _SetLength{

			let nFrame = 10;
			let nAddLength = 500 / nFrame;
			loop( nFrame ){
				nLength += nAddLength;
				ObjLaser_SetLength( obj, nLength );
				yield;
			}
			nFrame = 20;
			nAddLength = - 400 / nFrame;
			loop( nFrame ){
				nLength += nAddLength;
				ObjLaser_SetLength( obj, nLength );
				yield;
			}

		}

	}

	/**
	*	カウンター弾
	*/
	function CounterShot{

		let nSpeed = 7.2;
		let nMaxSpeed = 2.7 + 0.15 * m_nLevel;
		let nAccelSpeed = ( nMaxSpeed - nSpeed ) / 30;
		let nAngle = GetAngleToPlayer();
		let nGraphic = US_TABLET;
		let nGapLength = 40;
		let _nX = GetGapX( GetX(), nGapLength, nAngle );
		let _nY = GetGapY( GetY(), nGapLength, nAngle );
		nGapLength = RandBlur( 40 );
		let nX = GetGapX( _nX, nGapLength, nAngle + 90 );
		let nY = GetGapY( _nY, nGapLength, nAngle + 90 );
		nAngle += RandBlur( 12 );
		CreateShot02( nX, nY, nSpeed, nAngle, nAccelSpeed, nMaxSpeed, nGraphic, 0 );

		let nFrame = 15;
		let nDecelAlpha = 255 / nFrame;
		let nAccelScale = 0.12;
		Explosion01( nX, nY, nDecelAlpha, nAccelScale, nFrame );

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 30;
		let nMaxMoveX = 60;
		let nMinMoveY = 0;
		let nMaxMoveY = 10;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}
