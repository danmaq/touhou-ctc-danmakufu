//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ1C　ボス　メディスン・メランコリー　戦闘前
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#BackGround[User]
#ScriptVersion[2]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\BossSub.dnh"
	#include_function ".\INCLUDE\BOSS\Medicine.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 110;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 0;
	FLAN_ESS_NOCALL_MAINLOOP = false;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** サブキャラ間隔角度 */
	let m_nDollGapAngle = 0;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		m_bDemo = true;
		InitializeBoss();

		/** 個別初期設定 */
		SetLife( 1 );
		SetDamageRate( 0, 0 );
		BehaviorBoss( ACT_STAND3 );
		BehaviorSub( ACT_STAND3 );
		SetPosition( CL_MAX_X - 60, CL_MIN_Y - 140 );
		SetEnemyMarker( false );
		m_nDollGapAngle = GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_BOSS_ANGLE, -90 );

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** サブキャラ間隔角度設定 */
		m_nDollGapAngle += 360 / 240;

	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

		/** 個別終了設定 */
		if( !m_bStage || m_bSpellPractice ){
			DeleteCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ANGLE );
		}
		else{
			SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ANGLE, m_nDollGapAngle );
		}

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス＆サブキャラ描画 */
		let nDollGapLength = 32;
		let nX = GetGapX( GetX(), nDollGapLength, m_nDollGapAngle );
		let nY = GetGapY( GetY(), nDollGapLength * 0.4, m_nDollGapAngle * 2 );
		if( sin( m_nDollGapAngle ) > 0 ){
			DrawBoss( m_szImageBoss );
			DrawSub( m_szImageBoss, CHAR_DOLL, nX, nY );
		}
		else{
			DrawSub( m_szImageBoss, CHAR_DOLL, nX, nY );
			DrawBoss( m_szImageBoss );
		}

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 会話開始 */
		CreateEventFromScript( "Talk" );
		while( GetEventStep() != 1 ){ yield; }

		/** 移動＋ボスID設定 */
		SetEnemyMarker( true );
		let nFrame = 90;
		let nEventCount = m_nFlanCount;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		let nBossID = CL_TTH_CHARACTER_NAME_KAEI + CL_TTH_CHARACTER_NAME_KAEI_MEDICINE;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 
		while( GetEventStep() != 2 || m_nFlanCount - nEventCount <= nFrame ){ yield; }

		/** BGM */
		PlayMusicEx( 15 );
		nFrame = 30;
		nEventCount = m_nFlanCount;
		while( OnEvent() || m_nFlanCount - nEventCount <= nFrame ){ yield; }

		/** 戦闘開始 */
		AddLife( -1 );

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	会話
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_event Talk{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Event.dnh"


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** 敵カットイン画像 */
	m_aszImageCutInEnemy = [
		cutMedicine,
		cutMedicine2,
		cutMedicine,
		cutMedicine,
		cutMedicine,
		cutMedicine,
		cutMedicine,
		cutMedicine,
		cutMedicine,
		cutMedicine	
	];


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	@MainLoop{

		InCharPlayer( CUT_PLAYER_SURPRISE );
		TextOutPlayerC( m_nWaitFrame, "しかし、もう春だと言うのに\n花が元気ないなぁ" );
		InCharPlayer( CUT_PLAYER_NORMAL );
		TextOutPlayer( "まぁあの時が異常だっただけだがな" );
		TextOutEnemy( "コンパロコンパロ、毒よ集ま" );
		SetStep( 1 );
		TextOutPlayerB( 90, "集まったぜ" );
		SetNameFromTextEnemy( "メディスン・メランコリー", "小さなスイートポイズン" );
		InCharEnemy( CUT_ENEMY_SMILE );
		TextOutEnemy( "あなたは何て言う毒？" );
		TextOutPlayer( "魔理沙って言う毒だぜ" );
		InCharEnemy( CUT_ENEMY_NORMAL );
		TextOutEnemy( "覚えのない毒ね…まぁいいわ" );
		DeleteNameEnemy();
		SetStep( 2 );
		InCharEnemy( CUT_ENEMY_SMILE );
		TextOutEnemy( "毒なあなたは私が取り込んであげる" );
		InCharPlayer( CUT_PLAYER_SMILE );
		TextOutPlayer( "無理だな、私の毒は\nお前には少々刺激が強すぎるぜ" );
		End();

	}

}
