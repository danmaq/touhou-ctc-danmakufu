//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージPh　中ボス　伊吹 萃香　スペル1
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[SuikaC - スペル1]
#Text[ステージPh 中ボス
伊吹 萃香]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Suika.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 140;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 0;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		SetTimer( 59 );
		SetLife( 500 );
		SetDamageRate( 5, 5 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );
		CheckExplosion01Ex();

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_EXPH + CL_TTH_CHARACTER_NAME_EXPH_SUIKA;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){ DropItemTHC( 24 ); }

		/** 共通終了設定 */
		FinalizeBoss();

		/** 個別終了設定 */
		EndExplosion01Ex();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 55 );

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_PHANTASM + CL_TTH_SPELL_EXPH_HALFWAY_1;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );
		SetDamageRate( 8, 10 );

		loop{

			/** 使い魔召喚 */
			SetAction( ACT_SHOT_B5, 120 );
			PlaySEEx( sePower );
			Concentration01( 120 );
			__Wait( 120 );
			SetAction( ACT_SHOT_A5, 90 );
			PlaySEEx( seShadow );
			let nKill = 210;
			let nTurn = 270;
			CreateShotFromScript( "Shadow", GetX(), GetY(), 0, GetAngleToPlayer(), 0, [ nKill, nTurn ] );
			PlaySEDelay( seKira1, nTurn );
			__Wait( 300 );
			SetDamageRate( 24, 20 );

		}

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	使い魔
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_shot Shadow{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shot.dnh"


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = true;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		m_bShadow = true;
		m_bShadowDead = true;
		CheckBossLife();

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 魔法陣描画 */
		let nShadowImage = SHADOW_IMAGE_6S;
		let nShadowColor = SHADOW_COLOR_WHITE;
		let nAngle = 2 * m_nFlanCount;
		let nScale = 0.8;
		DrawShadowEx( nShadowImage, nShadowColor, nAngle, nScale );

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 移動＋ランダム弾 */
		Move( nArgv[ 0 ] );
		RandomShot( nArgv );
		loop( nArgv[ 0 ] ){ yield; }

		/** 消滅 */
		End();

	}

	/**
	*	ランダム弾
	*	@param anFrame	フレーム数配列 [ 攻撃終了, 方向転換 ]
	*/
	task RandomShot( let anFrame ){

		let nNum = 2;
		let nMinSpeed = 3;
		let nMaxSpeed = 5.5;
		let nAccelSpeed = - 0.1;
		let _nSpeed = 3;
		let _nMaxSpeed = 1;
		let nRandAngle = 10;
		let anGraphic = [ US_RICE_S_WHITE, US_RICE_S_BLUE ];
		let _anGraphic = [ US_RICE_S_R_PURPLE, US_RICE_S_SKY ];

		PlaySELoop( seShot1, anFrame[ 0 ], 4 );
		loop( anFrame[ 0 ] ){
			let nX = GetX();
			let nY = GetY();
			let nAngle = GetAngleToPlayer();
			ascent( let i in 0 .. nNum ){
				let nSpeed = rand( nMinSpeed, nMaxSpeed );
				let _nAngle = nAngle + RandBlur( nRandAngle );
				if( RandPercentage( 70 ) ){
					CreateShot01( nX, nY, nSpeed, _nAngle, anGraphic[ i ], 0 );
					CreateShot01( nX, nY, nSpeed, _nAngle + 105, anGraphic[ i ], 0 );
					CreateShot01( nX, nY, nSpeed, _nAngle - 105, anGraphic[ i ], 0 );
				}
				else{
					CreateShotA( 0, nX, nY, 0 );
					CreateShotA( 1, nX, nY, 0 );
					CreateShotA( 2, nX, nY, 0 );
					SetShotDataA( 0, 0, nSpeed, _nAngle, 0, nAccelSpeed, 0, _anGraphic[ 0 ] );
					SetShotDataA( 1, 0, nSpeed, _nAngle + 105, 0, nAccelSpeed, 0, _anGraphic[ 0 ] );
					SetShotDataA( 2, 0, nSpeed, _nAngle - 105, 0, nAccelSpeed, 0, _anGraphic[ 0 ] );
					SetShotDirectionType( PLAYER );
					SetShotDataA( 0, anFrame[ 1 ], _nSpeed, 0, 0, nAccelSpeed, _nMaxSpeed, _anGraphic[ 1 ] );
					SetShotDataA( 1, anFrame[ 1 ], _nSpeed, 0, 0, nAccelSpeed, _nMaxSpeed, _anGraphic[ 1 ] );
					SetShotDataA( 2, anFrame[ 1 ], _nSpeed, 0, 0, nAccelSpeed, _nMaxSpeed, _anGraphic[ 1 ] );
					SetShotDirectionType( ABSOLUTE );
					FireShot( 0 );
					FireShot( 1 );
					FireShot( 2 );
				}
			}
			yield;
			anFrame[ 1 ] = anFrame[ 1 ] - 1;
		}

	}


	/**
	*	移動
	*	@param nFrame	移動終了までのフレーム数
	*/
	task Move( let nFrame ){

		let _nFrame = 5;
		let nNum = trunc( nFrame / _nFrame );
		loop( nNum ){
			SetMovePosition02( GetPlayerX(), GetPlayerY(), 60 );
			loop( _nFrame ){ yield; }
		}

	}

}
