//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ1B　ボス　蓬莱山 輝夜　通常攻撃1
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////


#ScriptVersion[2]
#BackGround[User]
#Title[Kaguya - 通常攻撃1]
#Text[ステージ1B ボス
蓬莱山 輝夜]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Kaguya.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** ダメージ率（スペルプラクティス及び単体テスト時に固くする） */
	let m_nDamageRate = 1;

	/** 反射したか */
	let m_bReflect = false;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			SetPosition( FLAN_BOSS_HOME_X, FLAN_BOSS_HOME_Y + RandBlur( 0.1 ) );
			m_nDamageRate = 0.8;
		}
		else if( m_bStagePractice ){ m_nDamageRate = 0.8; }
		SetTimer( 43 );
		SetLife( 2000 );
		SetDamageRate( 85 * m_nDamageRate, 85 * m_nDamageRate );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 61 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_EIYA + CL_TTH_CHARACTER_NAME_EIYA_KAGUYA;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		__Wait( 60 );

		ReflectSE();
		let nAssign = 1;

		loop{

			/** 全方向転換弾 */
			RoundTurnShot( nAssign );
			__Wait( 90 );

			/** 移動 */
			Move( 60 );
			__Wait( 60 );

			/** 扇状反射狙い弾 */
			WideReflectSearchShot( nAssign );
			__Wait( 150 );

			/** 移動 */
			Move( 60 );
			__Wait( 60 );

			nAssign = - nAssign;

		}

	}

	/**
	*	全方向転換弾
	*	@param nAssign	割り振り係数
	*/
	task RoundTurnShot( let nAssign ){

		let nWay = 14;
		let nNum = 6 + 2 * m_nLevel;
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 5;
		let nNumSpeed = ( 6 - nSpeed ) / ( nNum - 1 );
		let nAngle = rand( 0, 360 );
		let nWayAngle = 360 / nWay;
		let nNumAngle = 1.5 * nAssign;
		let anGraphic = [ US_RICE_S_R_RED, US_RICE_S_RED ];
		let nDelay = 10;
		let nTurnFrame = 45;

		loop( nWay ){
			let _nSpeed = nSpeed;
			let _nAngle = nAngle;
			loop( nNum ){
				TurnShot( nX, nY, _nSpeed, _nAngle, anGraphic, nDelay, nTurnFrame, nAssign );
				_nSpeed += nNumSpeed;
				_nAngle += nNumAngle;
			}
			nAngle += nWayAngle;
		}

		nSpeed=2;
		nNumSpeed = ( 3 - nSpeed ) / ( nNum - 1 );
		nAngle += nWayAngle / 2;
		nNumAngle = - nNumAngle;
		anGraphic = [ US_RICE_S_R_BLUE, US_RICE_S_BLUE ];

		loop( nWay ){
			let _nSpeed = nSpeed;
			let _nAngle = nAngle;
			loop( nNum ){
				TurnShot( nX, nY, _nSpeed, _nAngle, anGraphic, nDelay, nTurnFrame, - nAssign );
				_nSpeed += nNumSpeed;
				_nAngle += nNumAngle;
			}
			nAngle += nWayAngle;
		}

		SetAction( ACT_SHOT_B5, 60 );
		PlaySEEx( seShot1 );
		PlaySEDelay( seKira4, nTurnFrame + nDelay );

	}

	/**
	*	転換弾
	*	@param nX			弾源x座標
	*	@param nY			弾源y座標
	*	@param nSpeed		速度
	*	@param nAngle		角度
	*	@param anGraphic	弾画像配列
	*	@param nDelay		遅延フレーム数
	*	@param nTurnFrame	転換までのフレーム数
	*	@param nAssign		割り振り係数
	*/
	function TurnShot( let nX, let nY, let nSpeed, let nAngle, let anGraphic, let nDelay, let nTurnFrame, let nAssign ){

		let nAccelSpeed = - nSpeed / nTurnFrame;
		let _nSpeed = 2;
		let _nAngle = nAngle - 150 * nAssign;

		CreateShotA( 0, nX, nY, nDelay );
		SetShotDataA( 0, 0, nSpeed, nAngle, 0, nAccelSpeed, 0, anGraphic[ 0 ] );
		SetShotDataA( 0, nTurnFrame, _nSpeed, _nAngle, 0, 0, 0, anGraphic[ 1 ] );
		FireShot( 0 );

	}

	/**
	*	扇状反射狙い弾
	*	@param nAssign	割り振り係数
	*/
	task WideReflectSearchShot( let nAssign ){

		let nNum = 12;
		let nFrame = 8;
		let nWay = 3;
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 2.5;
		let nNumSpeed = ( 5 - nSpeed ) / ( nNum - 1 );
		let nAngle = 90 - 90 * nAssign;
		let nWayAngle = ( 3 + m_nLevel ) * nAssign;
		let nNumAngle = - ( 5 + m_nLevel ) * nAssign;
		let anGraphic = [ US_RICE_S_R_RED, US_RICE_S_R_PURPLE, US_RICE_S_R_BLUE ];
		let _anGraphic = [ US_RICE_S_RED, US_RICE_S_PURPLE, US_RICE_S_BLUE ];

		SetAction( ACT_SHOT_A3, 120 );
		loop( nNum ){
			let _nAngle = nAngle;
			ascent( let i in 0 .. nWay ){
				ReflectSearchShot( nX, nY, nSpeed, _nAngle, anGraphic[ i ], _anGraphic[ i ] );
				ReflectSearchShot( nX, nY, nSpeed, _nAngle + 180, anGraphic[ i ], _anGraphic[ i ] );
				if( m_nLevel >= 2 ){ ReflectSearchShot( nX, nY, nSpeed, _nAngle - 90 * nAssign, anGraphic[ i ], _anGraphic[ i ] ); }
				if( m_nLevel == 3 ){ ReflectSearchShot( nX, nY, nSpeed, _nAngle + 90 * nAssign, anGraphic[ i ], _anGraphic[ i ] ); }
				_nAngle += nWayAngle;
			}
			PlaySEEx( seShot1 );
			__Wait( nFrame );
			nSpeed += nNumSpeed;
			nAngle += nNumAngle;
		}

	}

	/**
	*	反射狙い弾
	*	@param nX		弾源x座標
	*	@param nY		弾源y座標
	*	@param nSpeed	速度
	*	@param nAngle	角度
	*	@param nGraphic	反射前弾画像
	*	@param _nGraphic	反射後弾画像
	*/
	task ReflectSearchShot( let nX, let nY, let nSpeed, let nAngle, let nGraphic, let _nGraphic ){

		let obj = Obj_Create( OBJ_SHOT );
		let nDelay = 5;
		Obj_SetPosition( obj, nX, nY );
		Obj_SetSpeed( obj, nSpeed);
		Obj_SetAngle( obj, nAngle );
		ObjShot_SetGraphic( obj, nGraphic );
		ObjShot_SetDelay( obj, nDelay );

		/** 遅延 */
		loop( nDelay ){ yield; }

		/** 画面端判定 */
		loop{
			if( Obj_BeDeleted( obj ) ){ break; }
			nX = Obj_GetX( obj );
			nY = Obj_GetY( obj );
			if( nX <= CL_MIN_X || nX >= CL_MAX_X || nY <= CL_MIN_Y ){ break; }
			yield;
		}

		/** 狙い弾 */
		if( !Obj_BeDeleted( obj ) ){
			nSpeed = 2.5;
			nAngle = GetGapAngle( nX, nY, GetPlayerX(), GetPlayerY() );
			CreateShot01( nX, nY, nSpeed, nAngle, _nGraphic, 0 );
			m_bReflect = true;
			Obj_Delete( obj );
		}

	}

	/**
	*	反射SE
	*/
	task ReflectSE{

		let nCount = m_nFlanCount;
		let nWaitCount = 6 - m_nLevel;
		loop{
			if( m_bReflect ){
				if( nCount < m_nFlanCount ){
					PlaySEEx( seKira2 );
					nCount = m_nFlanCount + nWaitCount;
				}
				m_bReflect = false;
			}
			yield;
		}

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 30;
		let nMaxMoveX = 60;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}
