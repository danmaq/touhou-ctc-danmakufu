//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ2C　ボス　射命丸 文　スペル1
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[AyaB - スペル1]
#Text[ステージ2C ボス
射命丸 文]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Aya.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 0;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		SetTimer( 63 );
		SetLife( 500 );
		SetDamageRate( 32, 32 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KAEI + CL_TTH_CHARACTER_NAME_KAEI_AYA;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){ DropItemTHC( 10 ); }

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 残像描画 */
		DrawBlur( m_szImageBoss );

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		SlowMove( FLAN_BOSS_HOME_X + RandBlur( 0.1 ), FLAN_BOSS_HOME_Y + RandBlur( 0.1 ), nFrame );
		__Wait( 55 );

		/** スペルカード発動 */
		SetAction( ACT_SPELL3, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_KAEI + CL_TTH_SPELL_STAGE2_BOSS_1 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );

		/** 画面外チェック */
		CheckIsOut();

		loop{

			/** 横移動＋全方向扇状弾 */
			Concentration01( 30 );
			__Wait( 30 );
			MoveH( 100 );
			RoundWideShotEx( 100, 0 );
			__Wait( 145 );

			/** 縦移動＋全方向扇状弾 */
			Concentration01( 30 );
			__Wait( 30 );
			MoveV( 110 );
			RoundWideShotEx( 110, 1 );
			__Wait( 155 );

		}

	}

	/**
	*	全方向扇状弾
	*	@param nFrame	攻撃完了までのフレーム数
	*	@param nGra		弾画像番号
	*/
	task RoundWideShotEx( let nFrame, let nGra ){

		let nRoundWay = 1 + 2 * m_nLevel;
		let nWideWay = 5;
		let nSpeed = 2.4 + 0.4 * m_nLevel;
		let nMaxSpeed = 3.2 + 0.6 * m_nLevel;
		let nWideAngle = 6;
		let anGraphic = [ US_BUTTERFLY_RED, US_BUTTERFLY_BLUE ];
		let nShotFrame = 2;
		nFrame -= 10;

		__Wait( 5 );
		PlaySELoop( seShot1, nFrame, 6 );
		while( nFrame > 0 ){
			let nAngle = GetAngleToPlayer();
			_RoundWideShotEx( nSpeed, nMaxSpeed, nAngle, nWideAngle, nRoundWay, nWideWay, anGraphic[ nGra ], 0 );
			__Wait( nShotFrame );
			nFrame -= nShotFrame;
		}

	}

	/**
	*	全方向扇状弾（1セット）
	*	@param nSpeed		速度
	*	@param nMaxSpeed	最大速度
	*	@param nAngle		発射角度
	*	@param nWideAngle	扇角度
	*	@param nRoundWay	全方向Way数
	*	@param nWideWay		扇Way数
	*	@param nGraphic		弾画像
	*	@param nDelay		遅延フレーム数
	*/
	function _RoundWideShotEx( let nSpeed, let nMaxSpeed, let nAngle, let nWideAngle, let nRoundWay, let nWideWay, let nGraphic, let nDelay ){

		let nX = GetX();
		let nY = GetY();
		let nWideWaySpeed = ( nMaxSpeed - nSpeed ) / ( nWideWay - 1 );
		let nRoundWayAngle = 360 / nRoundWay;
		let nWideWayAngle = nWideAngle / ( nWideWay - 1 );
		nAngle -= nWideAngle / 2;
		loop( nRoundWay ){
			let _nSpeed = nSpeed;
			let _nAngle = nAngle;
			loop( nWideWay ){
				CreateShot01( nX, nY, _nSpeed, _nAngle, nGraphic, nDelay );
				_nSpeed += nWideWaySpeed;
				_nAngle += nWideWayAngle;
			}
			nAngle += nRoundWayAngle;
		}
	}

	/**
	*	画面外チェック
	*/
	task CheckIsOut{

		loop{
			if( IsOut( - 40 ) ){ SetInvincibility( 2 ); }
			yield;
		}

	}

	/**
	*	横移動
	*	@param nFrame	移動完了までのフレーム数
	*/
	task MoveH( let nFrame ){

		let _nX = GetX();
		let _nY = GetY();
		let nMoveX = rand( 40, 60 );
		let nMoveY = rand( 10, 30 );
		if( _nX >= FLAN_BOSS_HOME_X ){ nMoveX = - nMoveX; }
		if( _nY >= FLAN_BOSS_HOME_Y ){ nMoveY = - nMoveY; }
		let nX = _nX + nMoveX;
		let nY = _nY + nMoveY;
		let nFieldX = CL_MAX_X - CL_MIN_X + 600;
		let nDX = ( nMoveX + nFieldX ) / nFrame;
		if( _nX >= FLAN_BOSS_HOME_X ){ nDX = ( nMoveX - nFieldX ) / nFrame; }
		let nDY = nMoveY / nFrame;

		/** 残像付き移動 */
		SetAction( ACT_MOVE, nFrame + 5 );
		SetBlur( nFrame );
		loop( nFrame - 5 ){
			SetMovePosition02( GetX() + nDX, GetY() + nDY, 1 );
			yield;
			if( nDX > 0 ){
				if( GetX() > CL_MAX_X + 300 ){ SetX( GetX() - nFieldX ); }
			}
			else{
				if( GetX() < CL_MIN_X - 300 ){ SetX( GetX() + nFieldX ); }
			}
		}
		SlowMove( nX, nY, 10 );

	}

	/**
	*	縦移動
	*	@param nFrame	移動完了までのフレーム数
	*/
	task MoveV( let nFrame ){

		let _nX = GetX();
		let _nY = GetY();
		let nMoveX = rand( 20, 40 );
		let nMoveY = rand( 10, 30 );
		if( _nX >= GetPlayerX() ){ nMoveX = - nMoveX; }
		if( _nY >= FLAN_BOSS_HOME_Y ){ nMoveY = - nMoveY; }
		let nX = _nX + nMoveX;
		let nY = _nY + nMoveY;
		let nDX = nMoveX / nFrame;
		let nFieldY = CL_MAX_Y - CL_MIN_Y + 600;
		let nDY = ( nMoveY + nFieldY ) / nFrame;

		/** 残像付き移動 */
		SetAction( ACT_MOVE, nFrame + 5 );
		SetBlur( nFrame );
		loop( nFrame - 5 ){
			_nX = GetX();
			_nY = GetY();
			SetMovePosition02( _nX + nDX, _nY + nDY, 1 );
			yield;
			if( _nY > CL_MAX_Y + 300 ){ SetY( _nY - nFieldY ); }
		}
		SlowMove( nX, nY, 10 );

	}

}
