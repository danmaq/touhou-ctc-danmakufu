//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ2B　中ボス　鈴仙・優曇華院・イナバ　通常攻撃1
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Reisen - 通常攻撃1]
#Text[ステージ2B 中ボス
鈴仙・優曇華院・イナバ]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Reisen.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 100;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** ダメージ率（スペルプラクティス及び単体テスト時に固くする） */
	let m_nDamageRate = 1;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			SetPosition( FLAN_BOSS_HOME_X, FLAN_BOSS_HOME_Y + RandBlur( 0.1 ) );
			m_nDamageRate = 0.9;
		}
		else if( m_bStagePractice ){ m_nDamageRate = 0.9; }
		SetTimer( 32 );
		SetLife( 2250 );
		SetDamageRate( 30 * m_nDamageRate, 30 * m_nDamageRate );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 61 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_EIYA + CL_TTH_CHARACTER_NAME_EIYA_REISEN;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		__Wait( 60 );

		/** 使い魔召喚 */
		SetAction( ACT_SHOT_B5, 45 );
		PlaySEEx( seShadow );
		let nX = GetX();
		let nY = GetY();
		CreateEnemyFromScript( "Shadow", nX, nY, 0, 0, 1 );
		CreateEnemyFromScript( "Shadow", nX, nY, 0, 180, - 1 );
		__Wait( 60 );
		SetDamageRate( 85 * m_nDamageRate, 85 * m_nDamageRate );

		let nAssign = 1;

		loop{

			/** 回転弾＋回転転換弾 */
			RollShot( nAssign );
			__Wait( 225 );

			/** 移動 */
			Move( 60 );
			__Wait( 75 );

			nAssign = - nAssign;

		}

	}

	/**
	*	回転弾＋回転転換弾
	*	@param nAssign	割り振り係数
	*/
	task RollShot( let nAssign ){

		let nWay = 64 + 4 * m_nLevel;
		let _nX = GetX();
		let _nY = GetY();
		let nSpeed0 = [ 2.6, 3.2, 4, 5 ][ m_nLevel ];
		let nFrame0 = trunc( 180 / nSpeed0 );
		let nSpeed1 = nSpeed0 * 0.6;
		let nFrame1 = 10;
		let nFrame2 = 10;
		let nAccelSpeed = - nSpeed0 / nFrame1;
		let nWayAngle = 360 / nWay * nAssign;
		let nAngle = - 90 + RandBlur( nWayAngle / 2 );
		let nTurnAngle = ( 15 + 15 * m_nLevel ) * nAssign;
		let nGraphic = US_MISSILE_PURPLE;
		let nDelay = 10;
		let nGapX = 6;
		let nGapAngle = - 0.8;

		SetAction( ACT_SHOT_A5, nWay * 2 + 40 );
		PlaySELoop( seShot1, nWay * 2, 4 );
		ascent( let i in 0 .. 2 ){
			let _nAngle0 = nAngle;
			loop( nWay ){
				let nGapAssign = 1;
				if( i == 0 ){
					loop( 2 ){
						let nX = _nX - nGapX * nGapAssign;
						let nAngle0 = _nAngle0 + nGapAngle * nGapAssign;
						CreateShot01( nX, _nY, nSpeed0, nAngle0, nGraphic, nDelay );
						nGapAssign = - 1;
					}
				}
				else{
					loop( 2 ){
						let nX = _nX - nGapX * nGapAssign;
						let nAngle0 = _nAngle0 + nGapAngle * nGapAssign;
						let nAngle1 = nAngle0 + nTurnAngle;
						CreateShotA( 0, nX, _nY, nDelay );
						SetShotDataA( 0, 0, nSpeed0, nAngle0, 0, 0, 0, nGraphic );
						SetShotDataA( 0, nFrame0, NULL, NULL, 0, nAccelSpeed, 0, nGraphic );
						SetShotDataA( 0, nFrame0 + nFrame1 + nFrame2, nSpeed1, nAngle1, 0, 0, 0, nGraphic );
						FireShot( 0 );
						nGapAssign = - 1;
					}
				}
				yield;
				_nAngle0 += nWayAngle;
			}
		}

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	使い魔
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy Shadow{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shadow.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = true;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_SHADOW_LIGHTING = true;
	FLAN_SHADOW_COLLISION = false;
	FLAN_SHADOW_DELETE_SHOT = 32;
	FLAN_ENEMY_COLLISION_A = 24;
	FLAN_ENEMY_COLLISION_B = 18;
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** ダメージ率（スペルプラクティス及び単体テスト時に固くする） */
	let m_nDamageRate = 1;

	/** 割り振り係数 */
	let m_nAssign;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice || m_bStagePractice ){ m_nDamageRate = 0.9; }
		SetLife( 750 );
		_SetDamageRateDelayEx( 80 * m_nDamageRate, 80 * m_nDamageRate, 10, 10, 60 );
		m_nAssign = nArgv;

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*	@param bIsAppear 具現化中かどうか
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*	@param bIsAppear 具現化中かどうか
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*	@param bIsAppear 具現化中かどうか
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){

		/** 使い魔描画 */
		let nShadowImage = SHADOW_IMAGE_6S;
		let nShadowColor = SHADOW_COLOR_GREEN;
		let nAngle = 2 * m_nFlanCount;
		let nScale = 0.8;
		DrawShadow( nShadowImage, nShadowColor, nAngle, nScale, nScale );

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 移動 */
		Concentration01( 30 );
		Move( 45 );
		loop( 60 ){ yield; }

		/** 位置設定 */
		_SetLocation();

		loop{

			loop( 170 ){ yield; }

			/** 全方向転換弾 */
			RoundTurnShot();
			loop( 130 ){ yield; }

		}

	}

	/**
	*	全方向転換弾
	*/
	function RoundTurnShot{

		let nWay = 52 + 4 * m_nLevel;
		let nX = GetX();
		let nY = GetY();
		let nSpeed0 = [ 2.6, 3.2, 4, 5 ][ m_nLevel ];
		let nFrame0 = trunc( 180 / nSpeed0 );
		let nSpeed1 = nSpeed0 * 0.5;
		let nFrame1 = 10;
		let nFrame2 = 10;
		let nAccelSpeed = - nSpeed0 / nFrame1;
		let nWayAngle = 360 / nWay * m_nAssign;
		let nAngle = - 90 + RandBlur( nWayAngle / 2 );
		let nTurnAngle = ( 12 + 12 * m_nLevel ) * m_nAssign;
		let nGraphic = US_MISSILE_ORANGE;
		if( m_bFlanCollisionB ){
			nTurnAngle = - nTurnAngle;
			nGraphic = US_MISSILE_SKY;
		}
		let nDelay = 20;

		PlaySEEx( seShot1 );
		loop( nWay ){
			let _nAngle = nAngle + nTurnAngle;
			CreateShotA( 0, nX, nY, nDelay );
			SetShotDataA( 0, 0, nSpeed0, nAngle, 0, 0, 0, nGraphic );
			SetShotDataA( 0, nFrame0, NULL, NULL, 0, nAccelSpeed, 0, nGraphic );
			SetShotDataA( 0, nFrame0 + nFrame1 + nFrame2, nSpeed1, _nAngle, 0, 0, 0, nGraphic );
			FireShot( 0 );
			nAngle += nWayAngle;
		}

	}

	/**
	*	位置設定
	*/
	task _SetLocation{

		let nGapLength = 50;
		loop{
			let nX = GetEnemyX() + nGapLength * m_nAssign;
			SetPosition( nX, GetEnemyY() );
			yield;
		}

	}

	/**
	*	移動
	*	@param nFrame	移動完了までのフレーム数
	*/
	function Move( let nFrame ){

		let nX = GetX() + 50 * m_nAssign;
		let nForce = 100;
		let nAngle = 90 - 90 * m_nAssign;
		SetMovePositionHermite( nX, GetY(), nForce, nAngle, 0, 0, nFrame );

	}

}
