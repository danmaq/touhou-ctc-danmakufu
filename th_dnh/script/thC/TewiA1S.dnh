//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ3B　中ボス　因幡 てゐ　スペル1
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////


#ScriptVersion[2]
#BackGround[User]
#Title[TewiA - スペル1]
#Text[ステージ3B 中ボス
因幡 てゐ]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Tewi.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 130;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 0;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		else{ CheckTimer(); }
		SetTimer( 63 );
		SetLife( 500 );
		SetDamageRate( 5, 5 );
		SetShotAutoDeleteClip( 32, 96, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );
		if( m_nLevel >= 2 ){ FLAN_BOSS_HOME_Y = CL_MIN_Y + 120; }

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_EIYA + CL_TTH_CHARACTER_NAME_EIYA_TEWI;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出＋個別終了設定 */
		if( m_bStage && !m_bSpellPractice ){
			DropItemTHC( 10 );
			DropItemExtendTHC();
			SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_X, GetX() ); 
			SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_Y, GetY() ); 
		}

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, false );
		__Wait( 55 );

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_EIYA + CL_TTH_SPELL_STAGE3_HALFWAY_1 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );

		SetAction( ACT_SHOT_B5, 6000 );
		PlaySEEx( sePower );
		Concentration01( 120 );
		__Wait( 120 );
		SetDamageRate( 13, 13 );

		let nAssign = - 1;
		let nNumber = 0;
		let nFrame = 55;
		if( m_nLevel == 1 || m_nLevel == 3 ){ nFrame = 40; }

		loop{

			/** 全方向変化弾 */
			RoundTurnShot( nAssign, nNumber );
			__Wait( nFrame );

			nAssign = - nAssign;
			nNumber ++;

		}

	}

	/**
	*	全方向変化弾
	*	@param nAssign	割り振り係数
	*	@param nNumber	弾番号
	*/
	task RoundTurnShot( let nAssign, let nNumber ){

		let nWay = 144;
		let nX = GetX();
		let nY = GetY();
		let nWayAngle = 360 / nWay;
		let nAngle = - 90 + RandBlur( nWayAngle / 2 );
		let nMinCount = 2;
		let nMaxCount = 5;
		let nCount = rand_int( nMinCount, nMaxCount );
		let bTurn = false;

		PlaySEEx( seShot1 );
		loop( nWay ){
			if( m_nLevel < 2 ){ TurnShotA( nX, nY, nAngle, bTurn, nNumber ); }
			else{ TurnShotB( nX, nY, nAngle, bTurn, nAssign, nNumber ); }
			if( nCount > 1 ){ nCount --; }
			else{
				bTurn = !bTurn;
				nCount = rand_int( nMinCount, nMaxCount );
			}
			nAngle += nWayAngle;
		}

	}

	/**
	*	変化弾A
	*	@param nX		弾源x座標
	*	@param nY		弾源y座標
	*	@param nAngle	角度
	*	@param bTurn	ターンするか
	*	@param nNumber	弾番号
	*/
	task TurnShotA( let nX, let nY, let nAngle, let bTurn, let nNumber ){

		let _nFrame = ( nNumber - 10 ) * 5;
		if( _nFrame > 0 ){ _nFrame = 0; }
		let nFrame = 90 + 2 * m_nLevel + _nFrame;
		let nSpeed = 2.2;
		let nGraphic = [ US_BALL_M_GREEN, US_BALL_M_SKY, US_BALL_M_BLUE ][ nNumber % 3 ];
		let nDelay = 20;

		if( bTurn ){
			CreateShotA( 0, nX, nY, nDelay );
			SetShotDataA( 0, 0, nSpeed, nAngle, 0, 0, 0, nGraphic );
			SetShotDataA( 0, nFrame, nSpeed, nAngle + 180, 0, 0, 0, nGraphic );
			SetShotKillTime( 0, nFrame * 2 );
			FireShot( 0 );
		}
		else{ CreateShot01( nX, nY, nSpeed, nAngle, nGraphic, nDelay ); }

	}

	/**
	*	変化弾B
	*	@param nX		弾源x座標
	*	@param nY		弾源y座標
	*	@param nAngle	角度
	*	@param bTurn	ターンするか
	*	@param nAssign	割り振り係数
	*	@param nNumber	弾番号
	*/
	task TurnShotB( let nX, let nY, let nAngle, let bTurn, let nAssign, let nNumber ){

		let nFrame = 30;
		let nSpeed = 2.2;
		let _nSpeed = 2.17;
		if( m_nLevel == 3 ){ _nSpeed = 2.32; }
		let _nAngle = nAngle + 90 * nAssign;
		let nGraphic = [ US_BALL_M_GREEN, US_BALL_M_SKY, US_BALL_M_BLUE ][ nNumber % 3 ];
		let nDelay = 20;

		if( bTurn ){
			CreateShotA( 0, nX, nY, nDelay );
			SetShotDataA( 0, 0, nSpeed, nAngle, 0, 0, 0, nGraphic );
			SetShotDataA( 0, nFrame, _nSpeed, _nAngle, 0, 0, 0, nGraphic );
			FireShot( 0 );
		}
		else{ CreateShot01( nX, nY, nSpeed, nAngle, nGraphic, nDelay ); }

	}

}
