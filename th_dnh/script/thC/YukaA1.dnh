//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ2D　中ボス　風見 幽香　通常攻撃1
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////


#ScriptVersion[2]
#BackGround[User]
#Title[YukaA - 通常攻撃1]
#Text[ステージ2D 中ボス
風見 幽香]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Yuka.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** ダメージ率（スペルプラクティス及び単体テスト時に固くする） */
	let m_nDamageRate = 1;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			SetPosition( FLAN_BOSS_HOME_X, FLAN_BOSS_HOME_Y + RandBlur( 0.1 ) );
			m_nDamageRate = 0.9;
		}
		else if( m_bStagePractice ){ m_nDamageRate = 0.9; }
		SetTimer( 31 );
		SetLife( 2250 );
		SetDamageRate( 85 * m_nDamageRate, 85 * m_nDamageRate );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 61 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_LOTUS + CL_TTH_CHARACTER_NAME_LOTUS_YUKA;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		__Wait( 60 );

		let nAssign = - 1;

		loop{

			/** 全方向弾 */
			RoundShotEx();
			__Wait( 180 );

			/** 移動＋回転ツイン弾 */
			Move( 100 );
			RollTwinShot( nAssign );
			__Wait( 120 );

			nAssign = - nAssign;

		}

	}

	/**
	*	全方向弾
	*/
	task RoundShotEx{

		let nNum = 7;
		let nFrame = 20;
		let nGapLength = 20;
		let nWay = 18 + 4 * m_nLevel;
		let _nX = GetX();
		let _nY = GetY();
		let nSpeed = 0.8;
		let nAccelSpeed = 0.02 + 0.01 * m_nLevel;
		let nMaxSpeed = 10;
		let nWayAngle = 360 / nWay;
		let nAngle = 90 - nWayAngle / 2;
		let nRandAngle = nWayAngle / 8;
		let nGraphic = US_BALL_BS_YELLOW;
		let nDelay = 15;

		SetAction( ACT_SHOT_B5, nFrame * nNum + 18 );
		__Wait( 18 );
		loop( nNum ){
			let _nAngle = nAngle + RandBlur( nRandAngle );
			loop( nWay ){
				let nX = GetGapX( _nX, nGapLength, _nAngle );
				let nY = GetGapY( _nY + 22, nGapLength, _nAngle );
				CreateShot02( nX, nY, nSpeed, _nAngle, nAccelSpeed, nMaxSpeed, nGraphic, nDelay );
				_nAngle += nWayAngle;
			}
			PlaySEEx( seShot1 );
			__Wait( nFrame );
			nAngle += nWayAngle / 2;
		}

	}

	/**
	*	回転平行弾
	*	@param nAssign	割り振り係数
	*/
	task RollTwinShot( let nAssign ){

		let nNum = [ 50, 65, 80, 125 ][ m_nLevel ];
		let nFrame = 2;
		let nGapLength = 30;
		let nSpeed = 3.6;
		let nMaxSpeed = 1.2;
		let nAccelSpeed = ( nMaxSpeed - nSpeed ) / 30;
		let nAngle = 0;
		let nRollAngle = [ 630, 720, 810, 1080 ][ m_nLevel ];
		let nNumAngle = nRollAngle / ( nNum - 1 ) * nAssign;
		let nDelay = 5;

		PlaySELoop( seShot3, nFrame * nNum, 10 );
		loop( nNum ){
			let nX = GetX();
			let nY = GetY();
			let _nAngle = nAngle;
			loop( 2 ){
				let _nX = GetGapX( nX, nGapLength, _nAngle );
				let _nY = GetGapY( nY, nGapLength, _nAngle );
				TwinShot( _nX, _nY, nSpeed, nAccelSpeed, nMaxSpeed, _nAngle, nDelay );
				_nAngle += 180;
			}
			__Wait( nFrame );
			nAngle += nNumAngle;
		}

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}
