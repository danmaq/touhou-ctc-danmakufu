y//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ3A　中ボス　小悪魔　スペル1
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Devil - スペル1]
#Text[ステージ3A 中ボス
小悪魔]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Devil.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		else{ CheckTimer(); }
		SetTimer( 61 );
		SetLife( 500 );
		SetDamageRate( 13.5, 13.5 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND4 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KOUMA + CL_TTH_CHARACTER_NAME_KOUMA_DEVIL;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){
			DropItemTHC( 10 );
			DropItemExtendTHC();
		}

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 55 );

		/** スペルカード発動 */
		SetAction( ACT_SPELL3, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_KOUMA + CL_TTH_SPELL_STAGE3_HALFWAY_1 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );

		let nAssign = 1;

		loop{

			/** 分裂弾1 */
			SetAction( ACT_SHOT_A3, 180 );
			loop( 4 ){
				SplitShot1( nAssign );
				nAssign = - nAssign;
				__Wait( 45 );
			}

			/** 分裂弾2 */
			SetAction( ACT_SHOT_B3, 100 );
			Concentration01( 52 );
			__Wait( 52 );
			SplitShot2();
			__Wait( 60 );

			/** 移動 */
			Move( 90 );
			__Wait( 98 );

		}

	}

	/**
	*	分裂弾1
	*	@param nAssign	割り振り係数
	*/
	task SplitShot1( let nAssign ){

		let nNum = 9;
		if( m_nLevel == 3 ){ nNum = 10; }
		let nFrame = 4;
		let nWay = 5 + m_nLevel;
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 2;
		let nNumSpeed = ( 4 - nSpeed ) / ( nNum - 1 );
		let nAngle = rand( 0, 360 );
		let nWayAngle = 360 / nWay;
		let nNumAngle = nWayAngle * 1.5 / ( nNum - 1 ) * nAssign;

		PlaySELoop( seShot3, nFrame * nNum, 6 );
		loop( nNum ){
			let _nAngle = nAngle;
			loop( nWay ){
				SplitShot( nX, nY, nSpeed, _nAngle );
				_nAngle += nWayAngle;
			}
			__Wait( nFrame );
			nSpeed += nNumSpeed;
			nAngle += nNumAngle;
		}

	}

	/**
	*	分裂弾2
	*/
	task SplitShot2{

		let nNum = 9;
		if( m_nLevel == 3 ){ nNum = 10; }
		let nWay = 7 + m_nLevel;
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 1;
		let nNumSpeed = ( 4 - nSpeed ) / ( nNum - 1 );
		let nWayAngle = 360 / nWay;
		let nNumAngle = nWayAngle * 1.5 / ( nNum - 1 );
		let nAngle = GetAngleToPlayer() - nNumAngle * ( nNum - 1 ) / 2;

		PlaySEEx( seShot1 );
		let _nSpeed = nSpeed;
		let _nAngle = nAngle;
		loop( nNum ){
			let __nAngle = _nAngle;
			loop( nWay ){
				SplitShot( nX, nY, _nSpeed, __nAngle );
				__nAngle += nWayAngle;
			}
			_nSpeed += nNumSpeed;
			_nAngle += nNumAngle;
		}
		_nSpeed = nSpeed;
		_nAngle = nAngle + nWayAngle / 2;
		loop( nNum ){
			let __nAngle = _nAngle;
			loop( nWay ){
				SplitShot( nX, nY, _nSpeed, __nAngle );
				__nAngle += nWayAngle;
			}
			_nSpeed += nNumSpeed;
			_nAngle -= nNumAngle;
		}
		__Wait( 65 );
		PlaySEEx( seKira1 );

	}

	/**
	*	分裂弾
	*	@param nX		弾源x座標
	*	@param nY		弾源y座標
	*	@param nSpeed	速度
	*	@param nAngle	角度
	*/
	function SplitShot( let nX, let nY, let nSpeed, let nAngle ){

		let nSplitFrame = 50;
		let nSplitSpeed = 1.2;
		let nSplitAngle = 20;
		let nDelay = 15;
		let anGraphic = [ US_ICE_BLUE, US_ICE_WHITE ];

		CreateShotA( 0, nX, nY, nDelay );
		SetShotDataA( 0, 0, nSpeed, nAngle, 0, 0, 0, anGraphic[ 0 ] );
		SetShotDataA( 0, nSplitFrame, nSplitSpeed, nAngle + nSplitAngle, 0, 0, 0, anGraphic[ 1 ] );
		CreateShotA( 1, 0, 0, 0 );
		SetShotDataA( 1, 0, nSplitSpeed, nAngle - nSplitAngle, 0, 0, 0, anGraphic[ 1 ] );
		AddShot( nSplitFrame, 0, 1, 0 );
		FireShot( 0 );

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 10;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}
