//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ1A　ボス　紅 美鈴　スペル1
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Meirin - スペル1]
#Text[ステージ1A ボス
紅 美鈴]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Meirin.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 180;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 140;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** ダメージ率（スペルプラクティス及び単体テスト時に固くする） */
	let m_nDamageRate = 1;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
			m_nDamageRate = 0.8;
		}
		else if( m_bStagePractice ){ m_nDamageRate = 0.8; }
		SetTimer( 63 );
		SetLife( 400 );
		SetDamageRate( 13 * m_nDamageRate, 13 * m_nDamageRate );
		SetShotAutoDeleteClip( 32, 64, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KOUMA + CL_TTH_CHARACTER_NAME_KOUMA_MEIRING;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){ DropItemTHC( 8 ); }

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 55 );

		/** スペルカード発動 */
		SetAction( ACT_SPELL4, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_KOUMA + CL_TTH_SPELL_STAGE1_BOSS_1 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );

		let nAssign = 1;

		loop{

			/** 虹弾 */
			Concentration01( 30 );
			__Wait( 30 );
			RainbowShot( nAssign );
			if( m_nLevel < 2 ){ __Wait( 60 ); }

			/** 渦弾 */
			TwistShot( nAssign );
			__Wait( 150 );

			/** 移動 */
			Move( 60 );
			__Wait( 60 );

			nAssign = - nAssign;

		}

	}

	/**
	*	渦弾
	*	@param nAssign	割り振り係数
	*/
	task TwistShot( let  nAssign ){

		let nNum = [ 30, 40, 60, 80 ][ m_nLevel ];
		let nFrame = 3;
		let nWay = 3;
		let nSpeed = 5;
		let nMaxSpeed = 1.2 + 0.1 * m_nLevel;
		let nAccelSpeed = ( nMaxSpeed - nSpeed ) / 30;
		let nGapLength = 1.5 * nNum;
		let nAddGapLength = ( 10 - nGapLength ) / ( nNum - 1 );
		let nGapAngle = rand( 0, 360 );
		let nAddGapAngle = 9 * nAssign;
		let nWayAngle = 360 / nWay;
		let nGraphic = US_BALL_S_BLUE;
		let nDelay = 20;

		PlaySELoop( seShot3, nFrame * nNum + nDelay, 10 );
		loop( nNum ){
			let _nX = GetX();
			let _nY = GetY();
			let _nGapAngle = nGapAngle;
			loop( nWay ){
				let nX = GetGapX( _nX, nGapLength, _nGapAngle );
				let nY = GetGapY( _nY, nGapLength, _nGapAngle );
				let nAngle = _nGapAngle - 90 * nAssign;
				CreateShot02( nX, nY, nSpeed, nAngle, nAccelSpeed, nMaxSpeed, nGraphic, nDelay );
				_nGapAngle += nWayAngle;
			}
			nGapLength += nAddGapLength;
			nGapAngle += nAddGapAngle;
			__Wait( nFrame );
		}

	}

	/**
	*	虹弾
	*	@param nAssign	割り振り係数
	*/
	task RainbowShot( let nAssign ){

		let nWay = 21;
		let nFrame = 3;
		let nX = GetX();
		let nY = GetY();
		let nWideAngle = 80 - 16 * m_nLevel;
		let nAngle = - 90 - nWideAngle / 2 * nAssign;
		let nWayAngle = nWideAngle / ( nWay - 1 ) * nAssign;

		SetAction( ACT_SHOT_A3_B, 210 );
		PlaySEEx( seKira1 );
		loop( nWay ){
			_RainbowShot( nX, nY, nAngle );
			__Wait( nFrame );
			nAngle += nWayAngle;
		}

	}

	/**
	*	虹弾（1本分）
	*	@param _nX		弾源x座標
	*	@param _nY		弾源y座標
	*	@param nAngle	角度
	*/
	task _RainbowShot( let _nX, let _nY, let nAngle ){

		let nNum = 14;
		let nFrame = 4;
		let nGapLength = 0;
		let nNumGapLength = 20 / ( nNum - 1 );
		let nSpeed = 4;
		let nGravitySpeed = 0.04;
		let nGravityAngle = 90;
		let anGraphic = [ US_ICE_PURPLE, US_ICE_BLUE, US_ICE_SKY, US_ICE_GREEN, US_ICE_YELLOW, US_ICE_ORANGE, US_ICE_RED ];
		let nDelay = 5;

		ascent( let i in 0 .. nNum ){
			let nX = GetGapX( _nX, nGapLength, nAngle );
			let nY = GetGapY( _nY, nGapLength ,nAngle );
			let nGra = trunc( i / 2 );
			GravityShot( nX, nY, nSpeed, nAngle, nGravitySpeed, nGravityAngle, anGraphic[ nGra ], nDelay );
			__Wait( nFrame );
			nGapLength += nNumGapLength;
		}

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 20;
		let nMaxMoveX = 40;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}
