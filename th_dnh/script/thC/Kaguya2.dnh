//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ1B　ボス　蓬莱山 輝夜　通常攻撃2
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Kaguya - 通常攻撃2]
#Text[ステージ1B ボス
蓬莱山 輝夜]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Kaguya.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 100;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** ダメージ率（スペルプラクティス及び単体テスト時に固くする） */
	let m_nDamageRate = 1;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////


	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
			m_nDamageRate = 0.8;
		}
		else if( m_bStagePractice ){ m_nDamageRate = 0.8; }
		SetTimer( 44 );
		SetLife( 2000 );
		SetDamageRate( 80 * m_nDamageRate, 80 * m_nDamageRate );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_EIYA + CL_TTH_CHARACTER_NAME_EIYA_KAGUYA;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 150;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 180 );

		let nAssign = 1;
		let nTurn = 0;

		loop{

			/** 回転直線弾 */
			SetAction( ACT_SHOT_B5, 120 );
			Concentration01( 30 );
			__Wait( 30 );
			RollLineShot( nTurn, nAssign );
			__Wait( 120 );

			/** 全方向弾 */
			RoundShotEx();
			__Wait( 90 );

			/** 移動 */
			Move( 60 );
			__Wait( 90 );

			nAssign = - nAssign;
			nTurn++;

		}

	}

	/**
	*	回転直線弾
	*	@param nTurn	ターン数
	*	@param nAssign	割り振り係数
	*/
	task RollLineShot( let nTurn, let nAssign ){

		let nWay = 15 + 2 * m_nLevel;
		let nFrame = 2;
		let nGapLength = 40;
		let nGapAngle = GetAngleToPlayer() - 90 * nAssign;
		let nWayGapAngle = - 180 / ( nWay - 1 ) * nAssign;
		let nNum = 8 + 2 * m_nLevel;
		let _nX = GetX();
		let _nY = GetY();
		let nSpeed = 0.9 - 0.2 * m_nLevel;
		let nMaxSpeed = nSpeed + 0.22 * ( nNum - 1 );
		let nAngle = nGapAngle;
		let nWayAngle= - nWayGapAngle;
		let nGraphic = [ US_STAR_S_PURPLE, US_STAR_S_RED, US_STAR_S_BLUE ][ nTurn % 3 ];
		let nDelay = 15;

		PlaySELoop( seShot1, nFrame * nWay, 6 );
		loop( nWay ){
			let nX = GetGapX( _nX, nGapLength, nGapAngle );
			let nY = GetGapY( _nY, nGapLength, nGapAngle );
			_LineShot( nX, nY, nSpeed, nMaxSpeed, nAngle, nNum, nGraphic, nDelay );
			__Wait( nFrame );
			nGapAngle += nWayGapAngle;
			nAngle += nWayAngle;
		}

	}

	/**
	*	全方向弾
	*/
	task RoundShotEx{

		let nNum = 12 + 6 * m_nLevel;
		let nFrame = 5;
		let nWay = 4;
		let nSpeed = 1 + 0.2 * m_nLevel;
		let nNumSpeed = ( 3 + 0.6 * m_nLevel ) / ( nNum - 1 );
		let nAngle = GetAngleToPlayer();
		let anGraphic = [ US_BILL_RED, US_BILL_YELLOW, US_BILL_GREEN, US_BILL_BLUE, US_BILL_PURPLE ];
		let nDelay = 10;
		let nGap = 24 + 6 * m_nLevel;

		SetAction( ACT_SHOT_A3, nFrame * nNum );
		ascent( let i in 0 .. nNum ){
			let nX = GetX() + RandBlur( nGap );
			let nY = GetY() + RandBlur( nGap );
			_RoundShot01( nX, nY, nSpeed, nAngle, nWay, anGraphic[ i % 5 ], nDelay );
			PlaySEEx( seShot1 );
			__Wait( nFrame );
			nSpeed += nNumSpeed;
		}

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}
