//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		STAGE 2b(ギミック)
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	スクリプトここから
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	THCELをインクルード
//	(FLAN/THCELへのインクルードはTHCELが勝手にやってくれます)
//////////////////////////////////////////////////////////////////////

#include_function ".\INCLUDE\Zako.dnh"
#include_function ".\IMAGE\index_boss.dnh"

//////////////////////////////////////////////////////////////////////
//	設定定義
//////////////////////////////////////////////////////////////////////

	/**	デフォルトアイテムの落下量を設定します。 */
	ENEMY_ITEMEX_NUM_DEFAULT = 0;
	/**	被弾判定の大きさを設定します。 */
	FLAN_ENEMY_COLLISION_A = 0;
	/**	接触判定の大きさを設定します。 */
	FLAN_ENEMY_COLLISION_B = 0;
	/**	onMainLoopへ処理をまわさないよう設定します。(まわしても何の処理も無い) */
	FLAN_ESS_NOCALL_MAINLOOP = true;

	FLAN_ESS_NOGONE = true;

//////////////////////////////////////////////////////////////////////
//	定数宣言
//////////////////////////////////////////////////////////////////////

	let x=0;
	let y=0;

//////////////////////////////////////////////////////////////////////
//	メンバ変数宣言
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	固有動作実装部
//////////////////////////////////////////////////////////////////////

	/**
	*	敵の移動を管理するタスクです。
	*
	*	@param nLevel レベル(0〜3)
	*/
	task DoMove( let nLevel ){
		SetX(GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_BOSS_X, GetCenterX() ));
		SetY(GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_BOSS_Y, GetCenterY()/2 ));
		__Wait(120);
		SetMovePositionHermite(GetCenterX/2,GetClipMinY-50,200,45,300,-90,80);
		__Wait(90);
		SetX(-65535);
		SetY(-65535);
	}


//////////////////////////////////////////////////////////////////////
//	共通動作実装部
//////////////////////////////////////////////////////////////////////

	/**
	*	敵固有のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTask( let nArgv, let nLevel ){
		DoMove( nLevel );
		SetShotDirectionType(ABSOLUTE);
		__Wait(100);
		Concentration01(80);
		PlaySEEx(sePower2);
		__Wait(80);
		CreateShotFromScript("Shadow",GetX(),GetY(),0,rand(0,360),0,0);
		PlaySEEx(seShadow);
		__Wait(1700);
		VanishEnemy();
	}

	/**
	*	初期化時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( let nArgv, let nLevel ){
//		CreateDebugWindow();
		CheckExplosion01Ex;
		LoadGraphic(dotBossReisen);
		SetLife( 3 );
	}

	/**
	*	毎フレームごとに呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
		EndExplosion01Ex;
		DeleteCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_X );
		DeleteCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_Y );
		DeleteGraphic(dotBossReisen);
	}

	/**
	*	絵画時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
		if(nCount<150){
			x=0;y=0;
		}
		else{
			x=256;y=128;
		}
		let sLength=128;
		SetAlpha(255);
		SetColor(255,255,255);
		__DrawChrRect(dotBossReisen,GetX,GetY,x,y,sLength,sLength);
	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	使い魔
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_shot Shadow{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shot.dnh"


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = true;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_ESS_NOCALL_MAINLOOP = false;


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		m_bShadow = true;
		m_bShadowLighting = false;
		m_bShadowDead = true;

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
		SetBombResist();
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 魔法陣描画 */
		let nShadowImage = SHADOW_IMAGE_6S;
		let nShadowColor = SHADOW_COLOR_WHITE;
		let nAngle = 2 * m_nFlanCount;
		let nScale = 0.8;
		DrawShadowEx( nShadowImage, nShadowColor, nAngle, nScale );

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){
		DoMove( nLevel );
		let AddAngle=0.2*[1.7,2,2.5,3][nLevel]*GetArgument();
		__Wait(150);
		let speed=[3.5,5,7,8][nLevel];
		loop(3){
			let angle_b=GetAngleToPlayer();
			let angle=10;
			let i=0;
			while(angle<[360,360,380,450][nLevel]){
				CreateShot02(GetX(),GetY(),speed,angle+angle_b,Accelerate(-0.05,-0.3,i,360/[8,5,5,4][nLevel]),speed/3,US_MISSILE_BLUE,20);
				if(nLevel>1){CreateShot01(GetX(),GetY(),speed/3.5,180+angle+angle_b,US_MISSILE_WHITE,20);}
				PlaySEEx(seShot1);
				loop([5,3,3,2][nLevel]){yield;}
				angle+=[8,5,5,4][nLevel]+pi()-3;
				i++;
			}
			DropItemPowerBigTHC( 1 );
			DropItemTHC( 3 );
			__Wait(70);
			let angle=10;
			let i=0;
			while(angle<[360,360,380,450][nLevel]){
				CreateShot02(GetX(),GetY(),speed,-angle+angle_b,Accelerate(-0.05,-0.3,i,360/[8,5,5,4][nLevel]),speed/2,US_MISSILE_RED,20);
				if(nLevel>1){CreateShot01(GetX(),GetY(),speed/3.5,180-angle+angle_b,US_MISSILE_WHITE,20);}
				PlaySEEx(seShot1);
				loop([5,3,3,2][nLevel]){yield;}
				angle+=[8,5,5,4][nLevel]+pi()-3;
				i++;
			}
			DropItemPowerBigTHC( 1 );
			DropItemTHC( 6 );
			__Wait(70);
		}
		End();
	}

	/**
	*	敵の移動を管理するタスクです。
	*
	*	@param nLevel レベル(0〜3)
	*/
	task DoMove( let nLevel ){
		while( 1 ){
			SetMovePositionHermite(
				rand(GetCenterX()/2,GetCenterX()*1.5),
				rand(GetClipMinY()+50,GetCenterY()/3),
				rand(150,300),
				GetAngle(),
				rand(150,300),
				rand(0,360),
				500
			);
			__Wait(500);
		}
	}

}
