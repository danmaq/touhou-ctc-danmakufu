//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ラストワード　鈴仙・優曇華院・イナバ
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Reisen - ラストワード]
#Text[ラストワード
鈴仙・優曇華院・イナバ]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Reisen.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 80;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 60;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		SetPosition( m_nPracticeX, m_nPracticeY );
		SetTimer( 63 );
		SetLife( 500 );
		SetDamageRate( 2, 0 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );
		CheckExplosion01Ex();

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_EIYA + CL_TTH_CHARACTER_NAME_EIYA_REISEN;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

		/** 個別終了設定 */
		EndExplosion01Ex();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 55 );

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_LASTWORD + CL_TTH_SPELL_LW_REISEN;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );

		/** 使い魔召喚 */
		SetAction( ACT_SHOT_A5, 60 );
		__Wait( 15 );
		PlaySEEx( seShadow );
		CreateShotFromScript( "Shadow", GetX(), GetY(), 0, 0, 0, 0 );
		__Wait( 60 );
		PlaySELoop( seShot1, 6000, 6 );
		RoundShotEx();

		__Wait( 108 );
		SetAction( ACT_SHOT_B5_B, 132 );
		__Wait( 12 );
		SetDamageRateDelay( 10, 0, 240 );
		SetDamageRateDelay( 30, 0, 1440 );

		loop{

			/** 幻視 */
			PlaySEEx( seLaser2 );
			m_bVision = true;
			__Wait( 120 );

			/** 幻視解除 */
			m_bVision = false;

			/** 移動 */
			Move( 60 );
			__Wait( 60 );

			SetAction( ACT_SHOT_A5, 48 );
			__Wait( 48 );
			SetAction( ACT_SHOT_B5_B, 132 );
			__Wait( 12 );

		}

	}

	/**
	*	全方向弾
	*/
	task RoundShotEx{

		__Wait( 240 );

		let nFrame = 40;
		let nWay = 36;
		let nSpeed = 1.2;
		let nAngle =- 90;
		let nAddAngle = 360 / nWay * 0.5;
		let nGraphic = US_BALL_S_BLUE;
		let nDelay = 10;

		loop{
			_RoundShot01( GetX(), GetY(), nSpeed, nAngle, nWay, nGraphic, nDelay );
			PlaySEEx( seShot3 );
			__Wait( nFrame );
			nAngle += nAddAngle;
		}

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 30;
		let nMaxMoveX = 60;
		let nMinMoveY = 0;
		let nMaxMoveY = 15;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	使い魔
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_shot Shadow{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shot.dnh"


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = true;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** 使い魔番号 */
	let m_nNumber;

	/** 使い魔総数 */
	let m_nShadowNum = 5;

	/** 属性 表:true 裏:false */
	let m_bAttribute = true;

	/** 幻視フレーム数 */
	let m_nVisionCount = 120;

	/** 中央からの間隔長さ＆角度 */
	let m_nGapLength = CL_MAX_X - CL_CEN_X + 20;
	let m_nGapAngle;

	/** 中央座標 */
	let m_nCenX = CL_CEN_X;
	let m_nCenY = CL_MAX_Y - m_nGapLength;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		m_bShadow = true;
		m_bShadowDead = true;
		m_nNumber = nArgv;
		if( m_nNumber == 1 || m_nNumber == 4 ){ m_bAttribute = false; }
		m_nGapAngle = 90 + 360 / m_nShadowNum * m_nNumber;
		CheckBossLife();

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 魔法陣描画 */
		let nShadowImage = SHADOW_IMAGE_6S;
		let nShadowColor = SHADOW_COLOR_WHITE;
		let nAngle = 2 * m_nFlanCount;
		let nScale = 0.8;
		DrawShadowEx( nShadowImage, nShadowColor, nAngle, nScale );

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		if( m_nNumber == 0 ){

			/** 初期移動 */
			let nFrame = 20;
			SlowMove( m_nCenX, m_nCenY, nFrame );
			loop( nFrame ){ yield; }

			/** 使い魔召喚 */
			let nX = GetX();
			let nY = GetY();
			ascent( let i in 1 .. m_nShadowNum ){
				CreateShotFromScript( "Shadow", nX, nY, 0, 0, 0, i );
			}

		}

		/** 移動 */
		let nX = GetGapX( m_nCenX, m_nGapLength, m_nGapAngle );
		let nY = GetGapY( m_nCenY, m_nGapLength, m_nGapAngle );
		let nFrame = 40;
		SlowMove( nX, nY, nFrame );
		loop( nFrame ){ yield; }

		/** 回転移動＋全方向幻視弾 */
		RollMove();
		RoundVisionShot();

	}

	/**
	*	全方向幻視弾
	*/
	task RoundVisionShot{

		let nFrame = 5;
		let nWay = 5;
		let nAngle = 90;
		let nWayAngle = 360 / nWay;
		let nCount = m_nVisionCount;
		let anGraphic = [ US_MISSILE_V_RED, US_MISSILE_RED ];
		if( m_bAttribute ){ anGraphic = [ US_MISSILE_V_BLUE, US_MISSILE_BLUE ]; }

		loop{
			let nX = GetX();
			let nY = GetY();
			let _nAngle = nAngle;
			loop( nWay ){
				VisionShot( nX, nY, _nAngle, nCount, anGraphic );
				_nAngle += nWayAngle;
			}
			loop( nFrame ){ yield; }
			nCount -= nFrame;
			if( nCount <= - m_nVisionCount ){ nCount = m_nVisionCount; }
		}

	}

	/**
	*	幻視弾
	*	@param nX			弾源x座標
	*	@param nY			弾源y座標
	*	@param nAngle		角度
	*	@param nCount		幻視開始までのフレーム数
	*	@param anGraphic	弾画像
	*/
	task VisionShot( let nX, let nY, let nAngle, let nCount, let anGraphic ){

		let obj = Obj_Create( OBJ_SHOT );
		Obj_SetPosition( obj, nX, nY );
		Obj_SetSpeed( obj, 3.5 );
		Obj_SetAngle( obj, nAngle );
		ObjShot_SetGraphic( obj, anGraphic[ m_bAttribute ] );
		Obj_SetCollisionToPlayer( obj, m_bAttribute );

		/** 幻視待ち */
		if( nCount > 0 ){
			loop( nCount ){ yield; }
			nCount = 0;
		}

		/** 幻視 */
		if( !Obj_BeDeleted( obj ) ){
			ObjShot_SetGraphic( obj, anGraphic[ !m_bAttribute ] );
			Obj_SetCollisionToPlayer( obj, !m_bAttribute );
		}
		loop( m_nVisionCount + nCount ){ yield; }

		/** 幻視解除 */
		if( !Obj_BeDeleted( obj ) ){
			ObjShot_SetGraphic( obj, anGraphic[ m_bAttribute ] );
			Obj_SetCollisionToPlayer( obj, m_bAttribute );
		}

	}

	/**
	*	回転移動
	*/
	task RollMove{

		SetGapAngle();
		loop{
			let nX = GetGapX( m_nCenX, m_nGapLength, m_nGapAngle );
			let nY = GetGapY( m_nCenY, m_nGapLength, m_nGapAngle );
			SetPosition( nX, nY );
			yield;
		}

		/** 間隔長さ設定 */
		task SetGapAngle{
			let nFrame = 600;
			let nAddGapAngle = 0;
			let nAddAddGapAngle = - 360 / 1610 / nFrame;
			loop( nFrame ){
				m_nGapAngle += nAddGapAngle;
				nAddGapAngle += nAddAddGapAngle;
				yield;
			}
			loop{
				m_nGapAngle += nAddGapAngle;
				yield;
			}
		}

	}

}
