script_enemy_main{

	// 共通関数読み込み
	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\_index_UserShot.dnh"

	// 画像及び効果音ファイル
	let userShot=shotAll;
	let imgBoss=dotBossEiki;
	let imgCutIn=cutEiki;
	let imgFontList=[imgSystemFontSmall,imgSystemFont]~imgSystemFontSJIS16;
	let imgList=[imgBoss,imgCutIn];
	let seList=[];

	// 各種設定値（難易度等）
	let THC=GetCommonDataDefault(CD_THC_STAGE,false);
	let Practice=GetCommonDataDefault(CD_STAGE_PRACTICE,false); 
	Debug_SetLevel;
	let Lv=GetCommonDataDefault(CD_STAGE_LEVEL,0);

	let objJ=[];

	// -------------------------------------------------------------------------
	@Initialize{

		// ボス初期設定（ファイルのロード他）
		if(!THC){
			LoadUserShotData(userShot);
			imgList=imgList~LOADBGLIST_EIKI~imgFontList;
			seList=seList~seListEnemy~seListShadow;
		}
		InitializeBoss(imgList,seList);

		// スペルカード設定
		SetTimer(66);
		SetLife(500);
		SetDamageRate(14,14);
		SetShotAutoDeleteClip(32,32,32,32);

		// ボス基本処理、メイン処理
		CountTimer(seTimeOut);
		BehaviorBoss(ACT_STAND3);
		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{
		m_nSpellBonus = GetSpellCardBonusScore();

		// 当たり判定（自弾,体当たり）
		Collision(32,24);

		// ダメージ音
		PlayDamageSE(seDamage);

		// カウンタ加算
		m_nCount++;

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		SetInvincibility(182);
		_Wait(2);

		// 初期移動
		let fr=45;
		let x=cenX;
		let y=minY+80+RandBlur(0.1);
		SetMovePosition02(x,y,fr);
		SetAction(ACT_MOVE,fr);
		_Wait(55);

		// スペルカード発動
		let spellName=[
			"罪符「原罪の監獄−Ｅａｓｙ−」",
			"罪符「原罪の監獄」",
			"罪符「原罪の監獄−Ｈａｒｄ−」",
			"罪符「原罪の監獄−Ｌｕｎａｔｉｃ−」"
		];
		CutInEnemy(spellName[Lv],imgCutIn,192,256);
		SetScore(100000);
		SetAction(ACT_SPELL5,0);
		_Wait(125);

		let assign=-1;

		loop{

			// 扇状反射回転弾
			SetAction(ACT_SHOT_A3,300);
			Concentration01(60);
			_Wait(60);
			WideRefRollShot(assign);
			_Wait(270);

			// 霊魂召喚
			if(Lv>0){SummonSpilit(assign);}
			_Wait(60);

			// 移動
			move(120);
			_Wait(150);

			assign*=-1;

		}

	}

	// 扇状反射回転弾 ----------------------------------------------------------
	task WideRefRollShot(let assign){

		let num=48;
		let way=2+Lv;
		if(Lv==0){way=3;}
		let wayAngle=[75,75,60,65];
		let baseAngle=GetAngleToPlayer-wayAngle[Lv]*(way-1)/2;
		let shotAngle=rand(0,360);
		let addShotAngle=12*assign;
		let fr=5;

		LoopPlaySE(seShot1,fr*num,10);
		loop(num){
			ascent(let i in 0 .. way){
				let angle=baseAngle+wayAngle[Lv]*i;
				RefRollShot(angle,shotAngle);
			}
			_Wait(fr);
			shotAngle+=addShotAngle;
		}

	}

	// 反射回転弾 --------------------------------------------------------------
	function RefRollShot(let angle, let shotAngle){

		while(angle<0){angle+=360;}
		if(angle>=360){angle%=360;}
		let angleLU=GetGapAngle(minX,minY,GetX,GetY)+180;
		let angleRU=GetGapAngle(maxX,minY,GetX,GetY)+180;
		let angleLD=GetGapAngle(minX,maxY,GetX,GetY)+180;
		let angleRD=GetGapAngle(maxX,maxY,GetX,GetY)+180;
		if(angleRU==0){angleRU=360;}
		if(angleRD==360){angleRD=0;}
		let rLength=0;
		if(angle>=angleRU||angle<angleRD){rLength=(maxX-GetX)/cos(angle);}
		else if(angle>=angleLD&&angle<angleLU){rLength=(minX-GetX)/cos(angle);}
		else if(angle>=angleLU&&angle<angleRU){rLength=(minY-GetY)/sin(angle);}
		else{rLength=(maxY-GetY)/sin(angle);}

		let speed=6;
		let rFr=trunc(rLength/speed);
		let graphic=US_TABLET;
		let delay=15;
		let shotSpeed=1.5;
		let shotDelay=15;

		CreateShotA(0,GetX,GetY,delay);
		SetShotDataA(0,0,speed,angle,0,0,0,graphic);
		CreateShotA(1,0,0,shotDelay);
		SetShotDataA(1,0,shotSpeed,shotAngle,0,0,0,graphic);
		AddShot(rFr,0,1,0);
		CreateShotA(2,0,0,shotDelay);
		SetShotDataA(2,0,shotSpeed,shotAngle+180,0,0,0,graphic);
		AddShot(rFr,0,2,0);
		FireShot(0);

	}

	// 霊魂召喚 ----------------------------------------------------------------
	task SummonSpilit(let assign){

		let num=2+Lv;
		let baseAngle=rand(0,360);
		let numAngle=360/num*assign;
		let fr=10;

		SetAction(ACT_SHOT_B5,60);
		ascent(let i in 0 .. num){
			let angle=baseAngle+numAngle*i;
			CreateEnemyFromScript("Spilit",GetX,GetY,0,angle,0);
			PlaySE(seShadow);
			_Wait(fr);
		}

	}

	// 移動 --------------------------------------------------------------------
	function move(let fr){

		let x=GetX;
		let y=GetY;
		let mx=rand(40,80);
		let my=rand(0,10);
		if(x>=GetPlayerX){
			if(x-mx>=minX+100){mx=-mx;}
		}
		else{
			if(x+mx>=maxX-100){mx=-mx;}
		}
		if(y>=minY+80){my=-my;}
		x+=mx;
		y+=my;
		let power=GetGapLength(GetX,GetY,x,y)*2;
		let angle=GetGapAngle(GetX,GetY,x,y);
		SetMovePositionHermite(x,y,power,angle,0,0,fr);
		SetAction(ACT_MOVE,fr);

	}

	// -------------------------------------------------------------------------
	@Finalize{

		// カットイン消去
		SetCommonData(CD_CUTIN_SPELL_END,true);

		// アイテム放出
		if(THC&&!Practice){DropItem(16,80);}

		// ロードしたファイルを削除
		DeleteGraphicList(imgList,seList);

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// ボス描画
		DrawBoss(imgBoss);
		DrawCutIn(m_nCount);

	}

	// -------------------------------------------------------------------------
	@BackGround{

		// 背景描画
		OnBGEiki;

	}

}

// 霊魂 ------------------------------------------------------------------------
script_enemy Spilit{

	// 共通関数読み込み
	#include_function ".\INCLUDE\Shadow.dnh"
	#include_function ".\_index_UserShot.dnh"

	// 各種設定値（難易度等）
	let THC=GetCommonDataDefault(CD_THC_STAGE,false);
	let Practice=GetCommonDataDefault(CD_STAGE_PRACTICE,false); 
	let Lv=GetCommonDataDefault(CD_STAGE_LEVEL,0);

	// -------------------------------------------------------------------------
	@Initialize{

		// ステータス設定（ライフ、ダメージ率等）
		SetLife(1);

		// 光
		Light;

		// メイン処理
		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		// カウンタ加算
		m_nCount++;

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		yield;

		// 移動
		move;
		loop(60){yield;}

		// 直線弾
		_LineShot;

		// 破裂
		let fr=30;
		let decAlpha=255/fr;
		let addScale=0.05;
		Explosion01(GetX,GetY,decAlpha,addScale,fr);
		VanishEnemy;

	}

	// 直線弾 ------------------------------------------------------------------
	function _LineShot{

		let num=8;
		let minSpeed=1;
		let maxSpeed=3.5+0.5*Lv;
		let angle=GetAngleToPlayer;
		let graphic=US_FIRE_BLUE;
		LineShot(GetX,GetY,minSpeed,maxSpeed,angle,num,graphic,0);
		PlaySE(seShot2);

	}

	// 移動 --------------------------------------------------------------------
	task move{

		let gapLength=65;
		let gapAngle=GetAngle+120;
		let x=GetGapX(GetX,gapLength,gapAngle);
		let y=GetGapY(GetY,gapLength,gapAngle);
		let power1=300;
		let angle1=rand(0,360);
		let power2=300;
		let angle2=rand(0,360);
		let fr=29;
		SetMovePositionHermite(x,y,power1,angle1,power2,angle2,fr);
		loop(fr){yield;}

		gapAngle+=120;
		x=GetGapX(GetX,gapLength,gapAngle);
		y=GetGapY(GetY,gapLength,gapAngle);
		angle1=rand(0,360);
		SetMovePositionHermite(x,y,power2,angle2,power1,angle1,fr);
		loop(fr){yield;}

		fr=2;
		SetMovePosition02(x,y,fr);

	}

	// 光 ----------------------------------------------------------------------
	task Light{

		let call=1;
		let delay=15;
		loop(60){
			_Light;
			loop( call ){ yield; }
		}

		task _Light{
			let obj=SetShotObject(GetX,GetY,500,0,US_BALL_SS_BLUE,delay);
			Obj_SetAlpha(obj,0);
			Obj_SetCollisionToPlayer(obj,false);
			ObjShot_SetBombResist(obj,true);
			ObjShot_ToItem(obj,false);
			loop(delay){yield;}
			Obj_Delete(obj);
		}

	}

	// -------------------------------------------------------------------------
	@Finalize{

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

	}

}
