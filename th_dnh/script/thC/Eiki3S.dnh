//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ3C　ボス　四季映姫・ヤマザナドゥ　スペル3
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Eiki - スペル3]
#Text[ステージ3C ボス
四季映姫・ヤマザナドゥ]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Eiki.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 80;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		SetTimer( 63 );
		SetLife( 500 );
		SetDamageRate( 14.5, 14.5 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );
		CheckExplosion01Ex();

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KAEI + CL_TTH_CHARACTER_NAME_KAEI_EIKI;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){ DropItemTHC( 16 ); }

		/** 共通終了設定 */
		FinalizeBoss();

		/**	個別終了設定 */
		EndExplosion01Ex();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 55 );

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_KAEI + CL_TTH_SPELL_STAGE3_BOSS_3 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );

		let nAssign = - 1;

		loop{

			/** 扇状反射回転弾＋バリア */
			SetAction( ACT_SHOT_A3, 300 );
			Concentration01( 60 );
			__Wait( 60 );
			WideRefRollShot( nAssign );
			CreateEnemyFromScript( "Barrier", GetX(), GetY(), 0, 0, 0 );
			__Wait( 210 );

			/** 霊魂召喚 */
			if( m_nLevel > 0 ){ SummonSpilit( nAssign ); }
			__Wait( 60 );

			/** 移動 */
			Move( 120 );
			__Wait( 150 );

			nAssign = - nAssign;

		}

	}

	/**
	*	扇状反射回転弾
	*	@param nAssign	割り振り係数
	*/
	task WideRefRollShot( let nAssign ){

		let nNum = 36;
		let nFrame = 5;
		let nWay = 2 + m_nLevel;
		if( m_nLevel == 0 ){ nWay = 3; }
		let nX = GetX();
		let nY = GetY();
		let nWayAngle = [ 75, 75, 55, 65 ][ m_nLevel ];
		let nAngle = GetAngleToPlayer() - nWayAngle * ( nWay -1 ) / 2;
		let nShotAngle = rand( 0, 360 );
		let nNumShotAngle = 15 * nAssign;

		PlaySELoop( seShot1, nFrame * nNum, 10 );
		loop( nNum ){
			let _nAngle = nAngle;
			loop( nWay ){
				RefRollShot( nX, nY, _nAngle, nShotAngle );
				_nAngle += nWayAngle;
			}
			__Wait( nFrame );
			nShotAngle += nNumShotAngle;
		}

	}

	/**
	*	反射回転弾
	*	@param nX			弾源x座標
	*	@param nY			弾源y座標
	*	@param nAngle		角度
	*	@param nShotAngle	反射角度
	*/
	function RefRollShot( let nX, let nY, let nAngle, let nShotAngle ){

		while( nAngle < 0 ){ nAngle += 360; }
		if( nAngle >= 360 ){ nAngle %= 360; }
		let nAngleLU = GetGapAngle( CL_MIN_X, CL_MIN_Y, nX, nY ) + 180;
		let nAngleRU = GetGapAngle( CL_MAX_X, CL_MIN_Y, nX, nY ) + 180;
		let nAngleLD = GetGapAngle( CL_MIN_X, CL_MAX_Y, nX, nY ) + 180;
		let nAngleRD = GetGapAngle( CL_MAX_X, CL_MAX_Y, nX, nY ) + 180;
		if( nAngleRU == 0 ){ nAngleRU = 360; }
		if( nAngleRD == 360 ){ nAngleRD = 0; }
		let nReflectLength = 0;
		if( nAngle >= nAngleRU || nAngle < nAngleRD ){ nReflectLength = ( CL_MAX_X - nX ) / cos( nAngle ); }
		else if( nAngle >= nAngleLD && nAngle < nAngleLU ){ nReflectLength = ( CL_MIN_X - nX ) / cos( nAngle ); }
		else if( nAngle >= nAngleLU && nAngle < nAngleRU ){ nReflectLength = ( CL_MIN_Y - nY ) / sin( nAngle ); }
		else{ nReflectLength = ( CL_MAX_Y - nY ) / sin( nAngle ); }

		let nSpeed = 6;
		let nReflectFrame = trunc( nReflectLength / nSpeed );
		let nGraphic = US_TABLET;
		let nDelay = 15;
		let nShotSpeed = 1.5;
		let nShotDelay = 15;

		CreateShotA( 0, nX, nY, nDelay );
		SetShotDataA( 0, 0, nSpeed, nAngle, 0, 0, 0, nGraphic );
		CreateShotA( 1, 0, 0, nShotDelay );
		SetShotDataA( 1, 0, nShotSpeed, nShotAngle, 0, 0, 0, nGraphic );
		AddShot( nReflectFrame, 0, 1, 0 );
		CreateShotA( 2, 0, 0, nShotDelay );
		SetShotDataA( 2, 0, nShotSpeed, nShotAngle + 180, 0, 0, 0, nGraphic );
		AddShot( nReflectFrame, 0, 2, 0 );
		FireShot( 0 );

	}

	/**
	*	霊魂召喚
	*	@param nAssign	割り振り係数
	*/
	task SummonSpilit( let nAssign ){

		let nNum = 2 + m_nLevel;
		if( m_nLevel == 3 ){ nNum = 10; }
		let nFrame = 10;
		let nAngle = rand( 0, 360 );
		let nNumAngle = 360 / nNum * nAssign;

		SetAction( ACT_SHOT_B5, 60 );
		loop( nNum ){
			CreateShotFromScript( "Spilit", GetX(), GetY(), 0, nAngle, 0, 0 );
			PlaySEEx( seShadow );
			__Wait( nFrame );
			nAngle += nNumAngle;
		}

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 10;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	霊魂
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_shot Spilit{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shot.dnh"


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = true;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		m_bShadow = true;
		m_nShadowType = SHADOW_TYPE_SPILIT;
		m_bShadowDead = true;
		CheckBossLife();

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 移動 */
		Move();
		loop( 60 ){ yield; }

		/** 直線弾＋消滅 */
		LineShotEx();
		End();

	}

	/**
	*	直線弾
	*/
	function LineShotEx{

		let nNum = 6;
		let nSpeed = 1;
		let nMaxSpeed = 3.5 + 0.5 * m_nLevel;
		let nAngle = GetAngleToPlayer();
		let nGraphic = US_FIRE_BLUE;
		_LineShot( GetX(), GetY(), nSpeed, nMaxSpeed, nAngle, nNum, nGraphic, 0 );
		PlaySEEx( seShot2 );

	}

	/**
	*	移動
	*/
	task Move{

		let nGapLength = 65;
		let nGapAngle = GetAngle() + 120;
		let nX = GetGapX( GetX(), nGapLength, nGapAngle );
		let nY = GetGapY( GetY(), nGapLength, nGapAngle );
		let nForce = 300;
		let nAngle = rand( 0, 360 );
		let _nForce = 300;
		let _nAngle = rand( 0, 360 );
		let nFrame = 30;
		SetMovePositionHermite( nX, nY, nForce, nAngle, _nForce, _nAngle, nFrame );
		loop( nFrame ){ yield; }

		nGapAngle += 120;
		nX = GetGapX( GetX(), nGapLength, nGapAngle );
		nY = GetGapY( GetY(), nGapLength, nGapAngle );
		nAngle = rand( 0, 360 );
		nFrame = 29;
		SetMovePositionHermite( nX, nY, _nForce, _nAngle, nForce, nAngle, nFrame );
		loop( nFrame ){ yield; }

		SetMovePosition02( nX, nY, 1 );

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	バリア
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy Barrier{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\ShadowNoHidden.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_ZAKO_ACTION_EXISTBOSS = FLAN_ZAKO_EXISTBOSS_NONEACTION;
	FLAN_ESS_NOGONE = false;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_ENEMY_COLLISION_A = 0;
	FLAN_ENEMY_COLLISION_B = 0;
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		SetLife( 1 );
		_SetDamageRateDelayEx( 0, 0, 0, 0, 0 );
		m_bShadowLighting = false;
		m_nShadowDeleteShot = 0;
		CheckBossLife();

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** バリア弾 */
		BarrierShot();
		loop( 180 ){ yield; }
		DeleteEnemyShot( CHILD );
		VanishEnemy();

	}

	/**
	*	バリア弾
	*/
	function BarrierShot{

		let anFrame = [ 30, 150 ];
		let nWay = 72;
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 1.5;
		let nAngle = rand( 0, 360 );
		let nWayAngle = 360 / nWay;
		let nGraphic = US_BALL_S_A_PURPLE;

		loop( nWay ){
			CreateShotA( 0, nX, nY, 0 );
			SetShotDataA( 0, 0, nSpeed, nAngle, 0, 0, 0, nGraphic );
			SetShotDataA( 0, anFrame[ 0 ], 0, NULL, 0, 0, 0, nGraphic );
			SetShotDataA( 0, anFrame[ 0 ] + anFrame[ 1 ], nSpeed / 3, NULL, 0, 0, 0, nGraphic );
			FireShot( 0 );
			nAngle += nWayAngle;
		}

	}

}
