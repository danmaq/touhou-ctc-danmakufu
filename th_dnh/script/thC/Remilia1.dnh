//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ2A　ボス　レミリア・スカーレット　通常攻撃1
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Remilia - 通常攻撃1]
#Text[ステージ2A ボス
レミリア・スカーレット]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Remilia.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			SetPosition( FLAN_BOSS_HOME_X, FLAN_BOSS_HOME_Y + RandBlur( 0.1 ) );
		}
		SetTimer( 45 );
		SetLife( 2500 );
		SetDamageRate( 85, 85 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 61 );
		BehaviorBoss( ACT_STAND4 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KOUMA + CL_TTH_CHARACTER_NAME_KOUMA_REMILIA;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		__Wait( 60 );

		loop{

			/** 破裂弾 */
			SetAction( ACT_SHOT_B3, 50 );
			Concentration01( 30 );
			__Wait( 30 );
			CrackShot();
			__Wait( 45 );

			/** クロス直線弾 */
			SetAction( ACT_SHOT_A5, 90 );
			let nHalfY = rand( 20, 40 );
			let nAssign = 1;
			if( GetX() < CL_CEN_X ){ nAssign = - 1; }
			CrossLineShot( nHalfY, nAssign );
			__Wait( 30 );
			CrossLineShot( nHalfY, - nAssign );
			__Wait( 75 );

			/** 移動 */
			Move( 90 );
			__Wait( 90 );

		}

	}

	/**
	*	破裂弾
	*/
	task CrackShot{

		let obj = Obj_Create( OBJ_SHOT );
		let nFrame = 15;
		let nSpeed = ( GetY() - CL_MIN_Y ) / nFrame;
		let nGraphic = US_BALL_L_RED;
		Obj_SetX( obj, GetX() );
		Obj_SetY( obj, GetY() );
		Obj_SetSpeed( obj, nSpeed );
		Obj_SetAngle( obj, -90 );
		ObjShot_SetGraphic( obj, nGraphic );

		/** 待ち */
		PlaySEEx( seShot1 );
		loop( nFrame ){ yield; }

		/** 破裂 */
		if( !Obj_BeDeleted( obj ) ){
			let nWay = 10 + 2 * m_nLevel;
			let nNum = 6;
			let nSpeed = 2.5;
			let nMaxSpeed = 5;
			let nWayAngle = 180 / ( nWay - 1 );
			nWay += 2;
			let nWideAngle = 180 + nWayAngle * 2;
			let nAngle = 90 + RandBlur( nWayAngle );
			_WideLineShot( Obj_GetX(obj), Obj_GetY(obj), nSpeed, nMaxSpeed, nAngle, nWideAngle, nWay, nNum, nGraphic, 0 );
			Obj_Delete( obj );
			PlaySEEx( seKira1 );
		}

	}

	/**
	*	クロス直線弾
	*	@param nHalfY	直線開始点〜終了点のy座標距離 / 2
	*	@param nAssign	割り振り係数
	*/
	task CrossLineShot( let nHalfY, let nAssign ){

		let nNum = 3 + m_nLevel;
		if( m_nLevel >= 2 ){ nNum --; }
		let nWay = 26 + 4 * m_nLevel;
		let nX = GetX();
		let nY = GetY() + 10;
		let nHalfX = CL_CEN_X - CL_MIN_X;
		let nLineX = CL_CEN_X - nHalfX * nAssign;
		let nLineEndX = CL_CEN_X + nHalfX * nAssign;
		let nGapX = ( nLineEndX - nLineX ) / ( nWay - 1 );
		let nLineY = CL_CEN_Y + nHalfY;
		let nLineEndY = CL_CEN_Y - nHalfY;
		let nGapY = ( nLineEndY - nLineY ) / ( nWay - 1 );
		let nGraphic = US_KNIFE_KOUMA_RED;
		let nDelay = 10;

		PlaySELoop( seShot3, nWay, 6 );
		loop( nWay ){
			let nSpeed = GetGapLength( nX, nY, nLineX, nLineY ) / 120;
			let nMaxSpeed = nSpeed * ( 2.4 + 0.3 * m_nLevel );
			let nAngle = GetGapAngle( nX, nY, nLineX, nLineY );
			_LineShot( nX, nY, nSpeed, nMaxSpeed, nAngle, nNum, nGraphic, nDelay );
			yield;
			nLineX += nGapX;
			nLineY += nGapY;
		}

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 30;
		let nMaxMoveX = 60;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}
