//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ2D　ボス　風見 幽香　通常攻撃2
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[YukaB - 通常攻撃2]
#Text[ステージ2D ボス
風見 幽香]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Yuka.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		SetTimer( 45 );
		SetLife( 2500 );
		SetDamageRate( 80, 80 );
		SetShotAutoDeleteClip( 32, 64, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_LOTUS + CL_TTH_CHARACTER_NAME_LOTUS_YUKA;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 150;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 180 );

		let nAssign = 1;

		loop{

			/** 回転全方向ツイン弾 */
			RollRoundTwinShot( nAssign );
			__Wait( 120 );

			/** レーザー */
			Laser();
			__Wait( 120 );

			/** 傘スイング弾 */
			Concentration01( 30 );
			__Wait( 30 );
			ParasolShot();
			__Wait( 90 );

			/** 移動 */
			Move( 60 );
			__Wait( 60 );

			nAssign = - nAssign;

		}

	}

	/**
	*	回転全方向ツイン弾
	*	@param nAssign	割り振り係数
	*/
	task RollRoundTwinShot( let nAssign ){

		let nGapLength = 20;
		let nNum = 7;
		let nFrame = 15;
		let nWay = [ 20, 24, 30, 38 ][ m_nLevel ];
		let _nX = GetX();
		let _nY = GetY() + 22;
		let nSpeed = 4;
		let nMaxSpeed = 2 + 0.2 * m_nLevel;
		let nAccelSpeed = ( nMaxSpeed - nSpeed ) / 30;
		let nWayAngle = 360 / nWay;
		let nAngle = rand( 0, 360 );
		let nNumAngle = nWayAngle * 0.4 * nAssign;
		let nDelay = 5;

		SetAction( ACT_SHOT_B5, 240 );
		__Wait( 18 );
		loop( nNum ){
			let _nAngle = nAngle;
			loop( nWay ){
				let nX = GetGapX( _nX, nGapLength, _nAngle );
				let nY = GetGapY( _nY, nGapLength, _nAngle );
				TwinShot( nX, nY, nSpeed, nAccelSpeed, nMaxSpeed, _nAngle, nDelay );
				_nAngle += nWayAngle;
			}
			PlaySEEx( seShot1 );
			__Wait( nFrame );
			nAngle += nNumAngle;
		}

	}

	/**
	*	傘スイング弾
	*/
	task ParasolShot{

		let nNum = 2;
		let nWay = 54 + 6 * m_nLevel;
		if( m_nLevel == 3 ){
			nNum = 3;
			nWay = 60;
		}
		let nX = GetX();
		let nY = GetY();
		let nBaseSpeed = 1;
		let nWaySpeed = ( 5.4 + 0.2 * m_nLevel - nBaseSpeed ) / ( nWay - 1 );
		let nWayAngle = 360 / nWay;
		let nAccelSpeedY = 0.02;
		let anGraphic = [ US_BALL_M_PURPLE, US_BALL_S_PURPLE, US_BALL_SS_PURPLE ];
		let nDelay = 15;
		let nFrame = 30;

		SetAction( ACT_ROLL, 0 );
		PlaySEEx( seKira4 );
		loop( nNum ){
			let nBaseAngle = rand( 0, 360 );
			let anSpeedSort = CreateMixOrderArray( nWay );
			let anAngleSort = CreateMixOrderArray( nWay );
			ascent( let i in 0 .. nWay ){
				let nSpeed = nBaseSpeed + nWaySpeed * anSpeedSort[ i ];
				let nAngle = nBaseAngle + nWayAngle * anAngleSort[ i ];
				let nSpeedX = nSpeed * cos( nAngle ) * 0.4;
				let nSpeedY = nSpeed * sin( nAngle ) * 0.4;
				CreateShotA( 0, nX, nY, nDelay );
				SetShotDataA( 0, 0, nSpeed, nAngle, 0, 0, 0, anGraphic[ i % 3 ] );
				SetShotDataA_XY( 0, nFrame, nSpeedX, nSpeedY, 0, nAccelSpeedY, 0, 99, anGraphic[ i % 3 ] );
				FireShot( 0 );
			}
		}

	}

	/**
	*	レーザー
	*/
	task Laser{

		let nX = GetX();
		let nY = GetY() + 22;
		let nLength = 0;
		let nWidth = 40 + 40 * m_nLevel;
		let anGraphic = [ US_BALL_M_A_BLUE, US_BEAM_BLUE ];
		let nDelay = 60;
		let nFrame = 30;
		let nKill = 110;
		let nAngle = 90;
		let nAddLength = 350 / nFrame;

		LaserSource( nX, nY, nDelay, nKill, nWidth, anGraphic[ 0 ] );
		CreateLaserA( 0, nX, nY, nLength, nWidth, anGraphic[ 1 ], nDelay );
		SetLaserDataA( 0, 0, nAngle, 0, nAddLength, 0, 0 );
		SetLaserDataA( 0, nFrame, NULL, 0, 0, 0, 0 );
		SetShotKillTime( 0, nKill );
		FireShot( 0 );
		PlaySEEx( seLaser1 );
		PlaySEDelay( seLaser2, nDelay );

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}
