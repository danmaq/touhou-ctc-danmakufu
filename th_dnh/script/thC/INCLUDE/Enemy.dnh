//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	敵スクリプト専用インクルードライブラリ
//
//		※敵・子敵スクリプト以外からは使用出来ません。
//			それ以外からはインクルードしないでください。
//		※使い魔スクリプトからも使用出来ません。
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	下位ライブラリをインクルード
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#include_function ".\INCLUDE\EnemyShadow.dnh"


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	定数
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メンバ変数
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

let m_nSlowCount = 9999;
let m_nPrevSlowStat = KEY_FREE;


//////////////////////////////////////////////////////////////////////
// -------------------------------------------------------------------
// その他
// -------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	SLOWキーを押し/離してからの時間を取得する
//	※使い魔を使用する敵本体にて必ず毎フレーム実行してください
function GetSlowCount(){
	let nSlowCount = GetCommonDataDefault( CD_STAGE_KEY_SLOWCOUNT, 9999 );
	if( !GetCommonDataDefault( CD_THC_STAGE, false ) ){
		let nKey = GetKeyState( VK_SLOWMOVE );
		if( nKey == KEY_PUSH || nKey == KEY_PULL ){ m_nSlowCount = 0; }
		nSlowCount = m_nSlowCount;
		SetCommonData( CD_STAGE_KEY_SLOWCOUNT, nSlowCount );
		let nShadowMode;
		if( m_nPrevSlowStat == nKey ){
			if( m_nSlowCount > SHADOW_TIMELAG ){ nShadowMode = [ KEY_SHADOW_FREE, KEY_SHADOW_HOLD ][ nKey == KEY_HOLD ]; }
			else{ nShadowMode = [ KEY_SHADOW_PULL, KEY_SHADOW_PUSH ][ nKey == KEY_HOLD ]; }
		}
		else{ nShadowMode = [ KEY_SHADOW_PULL, KEY_SHADOW_PUSH ][ nKey == KEY_PUSH || nKey == KEY_HOLD ]; }
		SetCommonData( CD_STAGE_KEY_SLOWSTAT, nShadowMode );
		m_nPrevSlowStat = nKey;
		m_nSlowCount++;
	}
	return nSlowCount;
}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	絵画関数
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//追加060304 雑魚用の描画　つづりの修正

function DrawZako( let szTexFile, let srcx1, let srcy1, let sLength, let scale ){
	SetGraphicScale( scale, scale );
	_DrawChrRectSqr( szTexFile, GetX, GetY, srcx1, srcy1, sLength );
	SetGraphicScale( 1, 1 );
}

//追加060306 妖精描画関数

function DrawYousei( let srcy1, let now ){
	SetTexture(dotYousei);
	SetGraphicRect(32*(int(now/15)%3),srcy1,32*(int(now/15)%3)+32,srcy1+32);
	DrawGraphic(GetX(),GetY());
}
// 回転毛玉描画関数

function DrawRKedama(let srcx1, let srcy1, let now){
	SetGraphicAngle( 0, 0, now*10 );
	DrawZako( dotKedama,srcx1,srcy1+64,32,0.8 );
}

//雑魚魔法陣の描写
function DarwZakoBack(let now)
{
	SetTexture(dotCircle6s);
	SetGraphicRect(0,0,64,64);
	SetAlpha(200);
	SetGraphicScale(0.6+0.3*absolute(sin(now*2)),0.6+0.3*absolute(sin(now*2)));
	DrawGraphic(GetX,GetY);
	SetGraphicScale(1,1);
}
