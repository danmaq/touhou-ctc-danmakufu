//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	THC Extend-Library (extends FLAN)
//
//		※内部からインクルードされるので直接呼び出すことはありません。
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	下位ライブラリをインクルード
//////////////////////////////////////////////////////////////////////

#include_function "\lib\THCCL\Common.dnh"


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////

/**	コンフィグ保存用CommonDataファイルです。 */
let CL_CDFILE_CONFIG = GetCurrentScriptDirectory() ~ "DATA\CONFIG.DAT";
/**	リザルト保存用CommonDataファイルです。 */
let CL_CDFILE_RESULT = GetCurrentScriptDirectory() ~ "DATA\RESULT.DAT";

let STAGE_HISTORY_CLEAR_PLAYER		= 0;
let STAGE_HISTORY_CLEAR_SCENARIO	= 1;
let STAGE_HISTORY_CLEAR_STAGE		= 2;
let STAGE_HISTORY_CLEAR_LEVEL		= 3;
let STAGE_HISTORY_CLEAR_SCORE		= 4;
let STAGE_HISTORY_CLEAR_CONTINUE	= 5;
let STAGE_HISTORY_CLEAR_PRACTICE	= 6;

let STAGE_HISTORY_TRY_PLAYER	= 0;
let STAGE_HISTORY_TRY_SCENARIO	= 1;
let STAGE_HISTORY_TRY_STAGE		= 2;
let STAGE_HISTORY_TRY_LEVEL		= 3;
let STAGE_HISTORY_TRY_PRACTICE	= 4;


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	BGM/SE関連
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	30フレームのミュート時間を設けてBGMを再生します。
*	厳密にはステージに再生キューを投げます。
*
*	@param nIndex BGMインデックス
*/
function PlayMusicEx( let nIndex ){ SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BGM_INDEX, nIndex ); }

/**
*	効果音を遅延フレーム後、再生フレーム毎に再生します。
*	合計フレームが経過すると停止します。
*
*	@param nDelayFrame	遅延フレーム数
*	@param nTotalFrame	合計フレーム数（遅延フレーム数を含まない）
*	@param nPlayFrame	再生フレーム数
*/
task PlaySEDelayLoop( let szSeFile, let nDelayFrame, let nTotalFrame, let nPlayFrame ){
	loop( nDelayFrame ){ yield; }
	PlaySELoop( szSeFile, nTotalFrame, nPlayFrame );
}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ステージ進行制御
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	ラストスペル突入条件を満たしているか調べます。
*
*	@return ラストスペル突入条件を満たしていればtrue
*/
function IsTryLastSpell(){
	return	( !UsedDebugKey() ) && 
			( GetCommonDataDefaultEx( FLAN_CDNS, FLAN_CD_STAGE, 0 ) >= 10 || m_nFlanLevel >= 1 ) &&
			GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_PLAYER_INYAN_GAUGE, 255 ) > 250 &&
			GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_ITEM_HAKUREI, 0 ) >= GetHakureiNorm();
}

/**
*	ラストスペル突入条件の博麗小符ノルマを取得します。
*
*	@return ラストスペル突入条件の博麗小符ノルマ
*/
function GetHakureiNorm(){
	let nStage = GetCommonDataDefaultEx( FLAN_CDNS, FLAN_CD_STAGE, 0 );
	let nLevel = GetCommonDataDefaultEx( FLAN_CDNS, FLAN_CD_STAGE_LEVEL, 0 );
	if( nStage < 6 ){ return CL_LASTSPELL_HAKUREI_NORM * nStage * [ 0, 1, 2, 2.5 ][ nLevel ]; }
	if( nStage >= 10 ){ return CL_LASTSPELL_HAKUREI_NORM * 10 * [ 1, 1.4 ][ nLevel ]; }
	return 0;
}
