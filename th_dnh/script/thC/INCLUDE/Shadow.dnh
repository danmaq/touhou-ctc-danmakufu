//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	THC Extend-Library (extends FLAN)
//
//		※使い魔スクリプト部です。
//			それ以外からはインクルードしないでください。
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	インデックスをインクルード
//////////////////////////////////////////////////////////////////////

#include_function "lib\THCCL\IMAGE\OTHER\index.dnh"
#include_function "\lib\THCCL\_index_UserShot.dnh"
#include_function ".\IMAGE\index_zako.dnh"
#include_function ".\SOUND\SE\index.dnh"


//////////////////////////////////////////////////////////////////////
//	下位ライブラリをインクルード
//////////////////////////////////////////////////////////////////////

#include_function ".\INCLUDE\ShadowAnimation.dnh"
#include_function "\lib\FLAN\HEADER\Shadow.dnh"
#include_function ".\INCLUDE\EnemyShadow.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

/**	自機ショットを被弾した時の効果音 */
FLAN_ENEMY_SE_DAMAGE_FILE_A = seDamage;
/**	ライフ低下時に自機ショットを被弾した時の効果音 */
FLAN_ENEMY_SE_DAMAGE_FILE_B = seDamage2;
/** 隠蔽時の効果音 */
FLAN_SHADOW_SE_HIDDEN = seShadowHidden;
/** 具現時の効果音 */
FLAN_SHADOW_SE_APPEAR = seShadowSudden;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////

/** 魔法陣画像定数 */
let SHADOW_IMAGE_6S =	0;	//	六芒星 - 小
let SHADOW_IMAGE_6M =	1;	//	六芒星 - 中
let SHADOW_IMAGE_8S =	2;	//	八芒星 - 小
let SHADOW_IMAGE_8M =	3;	//	八芒星 - 中

/** 魔法陣色定数 */
let SHADOW_COLOR_WHITE =	0;	//　白
let SHADOW_COLOR_RED =		1;	//　赤
let SHADOW_COLOR_GREEN =	2;	//　緑
let SHADOW_COLOR_BLUE =		3;	//　青
let SHADOW_COLOR_YELLOW =	4;	//　黄
let SHADOW_COLOR_PURPLE =	5;	//　紫
let SHADOW_COLOR_ORANGE =	6;	//　橙
let SHADOW_COLOR_BLACK =	7;	//　黒


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

/** ユーザー定義弾 */
let m_szUserShot = shotAll;

/** 夢終劇本体からの起動であるか */
let m_bStage = false;
/** スペルプラクティスであるか */
let m_bSpellPractice = false;
/** ステージプラクティスであるか */
let m_bStagePractice = false;
/** レベル */
let m_nLevel = 0;


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	絵画関連
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	魔法陣を指定して使い魔を描画します。（通常はこちら）
*	対応する魔法陣画像がロードされている必要があります。
*
*	@param nShadowImage	魔法陣画像定数
*	@param nShadowColor	魔法陣色定数
*	@param nAngle		描画角度
*	@param nScaleHidden	隠蔽時の描画倍率
*	@param nScaleSudden	出現時の描画倍率
*/
function DrawShadow( let nShadowImage, let nShadowColor, let nAngle, let nScaleHidden, let nScaleSudden ){
	let szImageFile = IMAGE_CL_CIRCLE_6S;
	let nRectLength = 64;
	alternative( nShadowImage )
	case( SHADOW_IMAGE_6S ){}
	case( SHADOW_IMAGE_6M ){ szImageFile = IMAGE_CL_CIRCLE_6M; nRectLength = 128; }
	case( SHADOW_IMAGE_8S ){ szImageFile = IMAGE_CL_CIRCLE_8S; }
	case( SHADOW_IMAGE_8M ){ szImageFile = IMAGE_CL_CIRCLE_8M; nRectLength = 128; }
	let nRectX = 0;
	let nRectY = 0;
	alternative( nShadowColor )
	case( SHADOW_COLOR_WHITE )	{}
	case( SHADOW_COLOR_RED )	{ nRectX = 1; }
	case( SHADOW_COLOR_GREEN )	{ nRectX = 2; }
	case( SHADOW_COLOR_BLUE )	{ nRectX = 3; }
	case( SHADOW_COLOR_YELLOW )	{ nRectY = 1; }
	case( SHADOW_COLOR_PURPLE )	{ nRectX = 1; nRectY = 1; }
	case( SHADOW_COLOR_ORANGE )	{ nRectX = 2; nRectY = 1; }
	case( SHADOW_COLOR_BLACK )	{ nRectX = 3; nRectY = 1; }
	nRectX *= nRectLength;
	nRectY *= nRectLength;
	_DrawShadow( szImageFile, nRectX, nRectY, nRectLength, nAngle, nScaleHidden, nScaleSudden );
}

/**
*	任意の画像を使用して使い魔を描画します。
*	テクスチャ切り出し範囲が正方形である必要があります。
*
*	@param szImageFile	使い魔画像ファイル
*	@param nRectX		切り出し正方形の左上x座標
*	@param nRectY		切り出し正方形の左上y座標
*	@param nRectLength	切り出し正方形の一辺の長さ
*	@param nAngle		描画角度
*	@param nScaleHidden	隠蔽時の描画倍率
*	@param nScaleSudden	出現時の描画倍率
*/
function _DrawShadow( let szImageFile, let nRectX, let nRectY, let nRectLength, let nAngle, let nScaleHidden, let nScaleSudden ){
	if( m_bFlanCollisionB ){
		SetAlpha( 255 );
		SetGraphicScale( nScaleSudden, nScaleSudden );
	}
	else{
		SetAlpha( 180 );
		SetGraphicScale( nScaleHidden, nScaleHidden );
	}
	SetGraphicAngle( 0, 0, nAngle );
	__DrawChrRect( szImageFile, GetX(), GetY(), nRectX, nRectY, nRectLength, nRectLength );
}

/**
*	使い魔アニメーションを描画します。（通常はこちら）
*	使い魔ドット絵がロードされている必要があります。
*	BehaviorShadowが実施されている必要があります。
*	魔方陣は別途描画してください。
*/
function DrawShadowChar{
	if( m_bFlanCollisionB ){ __DrawShadowChar( GetX(), GetY(), 0, 1 ); }
}

/**
*	使い魔アニメーションを描画します。（描画倍率を指定します）
*	使い魔ドット絵がロードされている必要があります。
*	BehaviorShadowが実施されている必要があります。
*	魔方陣は別途描画してください。
*
*	@param nScale	描画倍率
*/
function DrawShadowCharEx( let nScale ){
	if( m_bFlanCollisionB ){ __DrawShadowChar( GetX(), GetY(), 0, nScale ); }
}

/**
*	使い魔アニメーションを描画します。（描画倍率及び角度を指定します）
*	使い魔ドット絵がロードされている必要があります。
*	BehaviorShadowが実施されている必要があります。
*	魔方陣は別途描画してください。
*
*	@param nAngle	描画角度
*	@param nScale	描画倍率
*/
function DrawShadowCharRollEx( let nAngle, let nScale ){
	if( m_bFlanCollisionB ){ __DrawShadowChar( GetX(), GetY(), nAngle, nScale ); }
}

/**
*	使い魔アニメーションを描画します。（上下に浮遊しているように描画）
*	使い魔ドット絵がロードされている必要があります。
*	BehaviorShadowが実施されている必要があります。
*	魔方陣は別途描画してください。
*/
function DrawShadowCharFloat{
	if( m_bFlanCollisionB ){ __DrawShadowChar( GetX(), GetY() + 4 * sin( 8 * m_nFlanCount ), 0, 1 ); }
}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	共通処理
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	敵固有のタスクです。onInitialize()より1フレーム後に呼ばれます。
*	ここに固有の動作を記述します。
*	@param nArgv 任意の値
*	@param nLevel レベル(0〜3)
*/
task MainTask( let nArgv, let nLevel ){
	MainTaskTHC( nArgv, nLevel );
}

/**
*	初期化時に呼ばれます。
*
*	@param nArgv 任意の値
*	@param nLevel レベル(0〜3)
*/
function onInitialize( let nArgv, let nLevel ){
	m_bStage = GetCommonDataDefaultEx( FLAN_CDNS, FLAN_CD_STAGE_ENABLE, false );
	m_nLevel = nLevel;
	let nStageNumber = GetCommonDataDefaultEx( CL_CDNS_RESULT, FLAN_CD_STAGE, - 1 );
	if( nStageNumber >= 0 && nStageNumber <= 5 ){ m_bStagePractice = true; }
	else if( nStageNumber == 7 ){ m_bSpellPractice = true; }
	if( !m_bStage ){ LoadUserShotData( shotAll ); }
	onInitializeTHC( nArgv, nLevel );
}

/**
*	毎フレームごとに呼ばれます。
*
*	@param nArgv 任意の値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*	@param bIsAppear 具現化中かどうか
*/
function onMainLoop( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){
	onMainLoopTHC( nArgv, nLevel, nCount, nPhase, nPhaseCount, nPrevPhase, bIsAppear );
}

/**
*	終了時に呼ばれます。
*
*	@param nArgv 任意の値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*	@param bIsAppear 具現化中かどうか
*/
function onFinalize( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){
	onFinalizeTHC( nArgv, nLevel, nCount, nPhase, nPhaseCount, nPrevPhase, bIsAppear );
	__CommonEnemyShadowFinalizeTHC();
}

/**
*	絵画時に呼ばれます。
*
*	@param nArgv 任意の値
*	@param nLevel レベル(0〜3)
*	@param nCount 現在のカウンタ値
*	@param nPhase 現在のフェーズ
*	@param nPhaseCount 現在のフェーズカウンタ値
*	@param nPrevPhase 1つ前の状態のフェーズ
*	@param bIsAppear 具現化中かどうか
*/
function onDrawLoop( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){
	onDrawLoopTHC( nArgv, nLevel, nCount, nPhase, nPhaseCount, nPrevPhase, bIsAppear );
}
