//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	イベントスクリプト以外の共通下位ライブラリ
//
//		※各上位ライブラリから間接的にインクルードされます。
//			直接インクルードすることはありません。
//		※イベントスクリプトでは使用できません。
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	定数
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

let ITEMEX_SCORE				= 0;
let ITEMEX_SCORE_SMALL			= 1;
let ITEMEX_SCORE_STAR			= 2;
let ITEMEX_HAKUREI				= 3;
let ITEMEX_POWER				= 4;
let ITEMEX_POWER_BIG			= 5;
let ITEMEX_POWER_FULL			= 6;
let ITEMEX_BOMB					= 7;
let ITEMEX_EXTEND				= 8;
let ITEMEX_DEFAULT				= 9;	//	[点]・[P]・大[P]が一定法則で出現


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メンバ変数
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	※@MainLoop()の最後にm_nCount++と記述してください
let m_nPhase = [ -1 ];	//	フェーズ(最初の要素ほど上のスタック)
let m_nPrevPhase = -1;	//	前のフェーズ
let m_nCount = 0;		//	カウンタ
let m_nPhaseCount = 0;	//	カウンタ


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	フェーズ関連
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	現在のスタック段数を取得する
function GetPhaseStack(){ return length( m_nPhase ); }

//	現在のフェーズを取得する
function GetPhase(){ return m_nPhase[ 0 ]; }

//	前のフェーズを取得する
function GetPrevPhase(){ return m_nPhase[ Min( 1, length( m_nPhase ) ) ]; }

//	指定したフェーズに移動する
function SetPhase( let nPhase ){
	m_nPrevPhase = GetPhase();
	m_nPhase[ 0 ] = nPhase;
	m_nPhaseCount = m_nCount;
}

//	指定した数だけフェーズを先送りする
function AddPhase( let nAdd ){
	m_nPrevPhase = GetPhase();
	m_nPhase[ 0 ] = m_nPhase[ 0 ] + nAdd;
	m_nPhaseCount = m_nCount;
}

//	次のフェーズに移動する
function NextPhase(){ AddPhase( 1 ); }

//	スタックを積んで指定したフェーズに移動する
function GosubPhase( let nPhase ){
	m_nPrevPhase = GetPhase();
	m_nPhase = [ nPhase ] ~ m_nPhase;
	m_nPhaseCount = m_nCount;
}

//	最上段スタックを削除し前のフェーズに戻る
function ReturnPhase(){
	if( GetPhaseStack() > 1 ){
		m_nPrevPhase = GetPhase();
		m_nPhase = erase( m_nPhase, 0 );
	}
	m_nPhaseCount = m_nCount;
}

//	スタックをすべて破棄する
function ClearPhase(){
	let nNowPhase = GetPhase();
	m_nPhase = m_nPhase[ 0..0 ];
	m_nPhase = m_nPhase ~ [ nNowPhase ];
}

//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	マイクロスレッド制御
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	指定フレーム数待機(みだりに少ないフレーム数で呼び出さないこと)
function _Wait( let frame ){ if( frame > 0 ){ loop( frame ){ yield }; } }

//	敵が誰も居なくなるまで待機
function WaitZeroEnemy(){ while( GetEnemyNum() != 0 ){ yield; } }


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	アイテム関係関数
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	パワーアイテムを落とす(アイテム落下キューを貯める)
function SetItemQueue( let nKind, let nX, let nY, let nSpeed, let nAngle ){
	let aPower = GetCommonDataDefault( CD_ITEM_QUEUE_CREATE, [] );
	let aPowerInfo = [ nKind, nX, nY, nSpeed, nAngle ];
	SetCommonData( CD_ITEM_QUEUE_CREATE, aPower ~ [ aPowerInfo ] );
}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	算術関数
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	-expr〜+exprの乱数を返す
function RandBlur( let expr ){ return rand( -expr, expr ); }


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	判定関数
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	画面からdeadline以上はみ出ているか否かを返す
function IsOutPos( let x, let y, let nDeadline ){
	return (
		x < GetClipMinX() - nDeadline ||
		x > GetClipMaxX() + nDeadline ||
		y < GetClipMinY() - nDeadline ||
		y > GetClipMaxY() + nDeadline
	);
}

//	「画面内」に敵が存在しているか否かを返す
function BeEnemyInScreen(){ return ( EnumEnemyGetIDInScreen() != -1 ); }

function EnumEnemyGetIDInScreen(){
	if( GetEnemyNum() == 0 ){ return -1; }
	ascent( let i in EnumEnemyBegin()..EnumEnemyEnd() ){
		let nID = EnumEnemyGetID( i );
		if( !IsOutPos( GetEnemyInfoDefault( nID, ENEMY_X, 65536 ), GetEnemyInfoDefault( nID, ENEMY_Y, 65536 ), 48 ) ){ return nID; }
	}
	return -1;
}

//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ロード/セーブ関連
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	読み込んだテクスチャ/効果音を複数一気に解放する
function DeleteGraphicList( let aszGraphicFileList, let aszSEFileList ){
	ascent( let i in 0..2 ){
		ascent( let j in 0..[ length( aszGraphicFileList ), length( aszSEFileList ) ][ i ] ){
			alternative( i )
			case( 0 ){ DeleteGraphic( aszGraphicFileList[ j ] ); }
			case( 1 ){ DeleteSE( aszSEFileList[ j ] ); }
		}
	}
}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	BGM/SE関連
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	30フレームのミュート時間を設けてBGMを再生する
task _PlayMusicEx( let szBGMFile, let szName ){
	LoadMusic( szBGMFile );
	_Wait( 30 );
	PlayMusic( szBGMFile );
}
