//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	THC Extend-Library (extends FLAN)
//
//		※敵・使い魔スクリプト部共用です。
//			それ以外からはインクルードしないでください。
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	下位ライブラリをインクルード
//////////////////////////////////////////////////////////////////////

#include_function ".\INCLUDE\EnemyShotShadow.dnh"


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
// 未分類
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	指定したフレーム数遅延してダメージの通り具合を設定します。
*	呼び出し直後にはダメージ0とします。
*
*	@param nRatioShot		ショットダメージの通り具合（単位:%）
*	@param nRatioBomb		ボムダメージの通り具合（単位:%）
*	@param nRatioParentShot	ショットダメージの親スクリプトへの影響する比率（単位:%）
*	@param nRatioParentBomb	ボムダメージの親スクリプトへの影響する比率（単位:%）
*	@param nFrame			遅延フレーム数
*/
task _SetDamageRateDelayEx( let nRatioShot, let nRatioBomb, nRatioParentShot, nRatioParentBomb, let nFrame ){
	SetDamageRateEx( 0, 0, 0, 0 );
	loop( nFrame ){ yield; }
	SetDamageRateEx( nRatioShot, nRatioBomb, nRatioParentShot, nRatioParentBomb );
}

/**
*	弾スクリプトからのExplosion01要求を受け、実施します。
*	必要な場合にのみ、Initializeで1回呼び出してください。
*	またその場合、必ずFinalizeでEndExplosion01Exを1回呼び出してください。
*	弾スクリプト側では、上記CommonDataにExplosion01のパラメータ配列を追加してください。
*/
task CheckExplosion01Ex{
	SetCommonDataEx( CL_CDNS_TEMP, CL_CD_SHOT_EXPLOSION_PARAM, [] );
	loop{
		let anParam = GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_SHOT_EXPLOSION_PARAM, [] );
		while( length( anParam ) > 0 ){
			Explosion01( anParam[ 0 ], anParam[ 1 ], anParam[ 2 ], anParam[ 3 ], anParam[ 4 ] );
			loop( 5 ){ anParam = erase( anParam, 0 ); }
		}
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_SHOT_EXPLOSION_PARAM, [] );
		yield;
	}
}

/**
*	CheckExplosion01Exの後始末です。
*	CheckExplosion01Exを利用した場合、必ずFinalizeで1回呼び出してください。
*/
function EndExplosion01Ex{
	DeleteCommonDataEx( CL_CDNS_TEMP, CL_CD_SHOT_EXPLOSION_PARAM );
}


/**
*	ボスのライフを監視します。0になると自殺します。
*	利用する場合は、onInitializeTHC内で1回だけ呼び出してください。
*/
task CheckBossLife{
	loop{
		if( GetEnemyLife() <= 0 ){ OwnKill(); }
		yield;
	}
}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	共通動作
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	終了時に呼び出す共通処理です。
*	注意 : 内部から自動的に呼び出されますので直接呼び出すことはありません。
*/
function __CommonEnemyShadowFinalizeTHC(){
	if( !BeVanished() ){ DropAllItemTHC(); }
}
