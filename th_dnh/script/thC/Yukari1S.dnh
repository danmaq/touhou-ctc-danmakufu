//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ4　ボス　八雲 紫　スペル1
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Yukari - スペル1]
#Text[ステージ4 中ボス
八雲 紫]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Yukari.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_CEN_Y;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 0;
	FLAN_ESS_NOCALL_MAINLOOP = false;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		SetTimer( 63 );
		SetLife( 500 );
		SetDamageRate( 5, 5 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_YOUMU + CL_TTH_CHARACTER_NAME_YOUMU_YUKARI;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 当たり判定 */
		if( m_nWarpStatus == 0 ){
			FLAN_ENEMY_COLLISION_A = 32;
			FLAN_ENEMY_COLLISION_B = 16;
		}
		else if( m_nWarpStatus >= 3 ){
			FLAN_ENEMY_COLLISION_A = 32;
			FLAN_ENEMY_COLLISION_B = 0;
		}
		else{
			FLAN_ENEMY_COLLISION_A = 0;
			FLAN_ENEMY_COLLISION_B = 0;
		}

	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){ DropItemTHC( 14 ); }

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		SetDrawDataYukari();
		DrawBossFloat( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		Warp( FLAN_BOSS_HOME_X, FLAN_BOSS_HOME_Y, 55 );
		__Wait( 55 );

		/** スペルカード発動 */
		SetAction( ACT_SPELL5_B, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_YOUMU + CL_TTH_SPELL_STAGE4_BOSS_1 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );

		/** サークル弾 */
		SetAction( ACT_SHOT_B4 ,120 );
		PlaySEEx( sePower );
		Concentration01( 120 );
		__Wait( 30 );
		CreateEnemyFromScript( "Barrier", CL_CEN_X, CL_CEN_Y, 0, 0, 0 );
		__Wait( 90 );
		if( m_nLevel < 2 ){ CircleShot(); }
		else{ StoneShot(); }
		__Wait( 240 );
		SetDamageRate( 12, 12 );

	}

	/**
	*	サークル弾
	*/
	task CircleShot{

		let nFrame = [ 90, 80 ][ m_nLevel ];
		let nAngle = [ 6, 12 ][ m_nLevel ];

		loop{
			_CircleShot( nAngle );
			__Wait( nFrame );
			nAngle = - nAngle;
		}

	}

	/**
	*	サークル弾（1発）
	*	@param nAddAngle	基本角度に加える角度
	*/
	task _CircleShot( let nAddAngle ){

		let nWay = [ 28, 32 ][ m_nLevel ];
		let nSpeed = 2.4;
		let nMaxSpeed = [ 0.65, 0.8 ][ m_nLevel ];
		let nAccelSpeed = ( nMaxSpeed - nSpeed ) / 20;
		let nGraphic = US_SCALE_PURPLE;
		let nDelay=30;
		let nGapLength = CL_CEN_X - CL_MIN_X + 30;
		let nGapAngle = rand( 0, 360 );
		let nWayGapAngle = 360 / nWay;
		let _nWay = 3;
		let nWideWay = 180;

		PlaySEDelay( seShot1, nDelay );
		loop( nWay ){
			let nX = GetGapX( CL_CEN_X, nGapLength, nGapAngle );
			let nY = GetGapY( CL_CEN_Y, nGapLength, nGapAngle );
			let nAngle = nGapAngle + 180 + nAddAngle;
			_WideShot02( nX, nY, nSpeed, nAccelSpeed, nMaxSpeed, nAngle, nWideWay, _nWay, nGraphic, nDelay );
			nGapAngle += nWayGapAngle;
		}

	}

	/**
	*	ストーン弾
	*/
	task StoneShot{

		let nFrame = [ 80, 70 ][ m_nLevel - 2 ];
		let nAngle = [ 135, - 135 ][ m_nLevel - 2 ];
		let nAddAngle = [ 20, - 20 ][ m_nLevel - 2 ];

		loop{
			_StoneShot( nAngle );
			__Wait( nFrame );
			nAngle += nAddAngle;
		}

	}

	/**
	*	ストーン弾（1発）
	*	@param nAngle	角度
	*/
	task _StoneShot( let nAngle ){

		let nWay = [ 44, 50 ][ m_nLevel - 2 ];
		let nSpeed = 2.4;
		let nMaxSpeed = [ 0.9, 1.1 ][ m_nLevel - 2 ];
		let nAccelSpeed = ( nMaxSpeed - nSpeed ) / 20;
		let nGraphic = US_BALL_BS_WHITE;
		let nDelay=30;
		let nGapLength = CL_CEN_X - CL_MIN_X + 30;
		let nGapAngle = rand( 0, 360 );
		let nWayGapAngle = 360 / nWay;

		PlaySEDelay( seShot1, nDelay );
		loop( nWay ){
			let nX = GetGapX( CL_CEN_X, nGapLength, nGapAngle );
			let nY = GetGapY( CL_CEN_Y, nGapLength, nGapAngle );
			let _nAngle = [ nGapAngle + nAngle, nAngle ][ m_nLevel >= 2 ];
			CreateShot02( nX, nY, nSpeed, _nAngle, nAccelSpeed, nMaxSpeed, nGraphic, nDelay );
			CreateShot02( nX, nY, nSpeed, _nAngle + 180, nAccelSpeed, nMaxSpeed, nGraphic, nDelay );
			nGapAngle += nWayGapAngle;
		}

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	バリア
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy Barrier{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\ShadowNoHidden.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_ZAKO_ACTION_EXISTBOSS = FLAN_ZAKO_EXISTBOSS_NONEACTION;
	FLAN_ESS_NOGONE = false;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_ENEMY_COLLISION_A = 0;
	FLAN_ENEMY_COLLISION_B = 0;
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** バリアが破損したか */
	let m_bBarrierBreak = false;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		SetLife( 1 );
		_SetDamageRateDelayEx( 0, 0, 0, 0, 0 );
		m_bShadowLighting = false;
		m_nShadowDeleteShot = 0;

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		loop{

			/** バリア弾 */
			BarrierShot();
			BarrierCheckShot();
			while( !m_bBarrierBreak ){ yield; }

			/** バリア再生 */
			while( OnBomb() ){ yield; }
			if( OnPlayerMissed() ){
				while( OnPlayerMissed() ){ yield; }
			}
			else{ DeleteEnemyShot( CHILD ); }

		}

	}

	/**
	*	バリア弾
	*/
	function BarrierShot{

		let nFrame = 90;
		let nWay = 72;
		let nSpeed = 0.6 + 0.1 * m_nLevel;
		let nAngle = rand( 0, 360 );
		let nWayAngle = 360 / nWay;
		let nGraphic = [ US_BALL_S_A_PURPLE, US_BALL_S_A_WHITE ][ m_nLevel >= 2 ];

		loop( nWay ){
			CreateShotA( 0, CL_CEN_X, CL_CEN_Y, 0 );
			SetShotDataA( 0, 0, nSpeed, nAngle, 0, 0, 0, nGraphic );
			SetShotDataA( 0, nFrame, 0, NULL, 0, 0, 0, nGraphic );
			FireShot( 0 );
			nAngle += nWayAngle;
		}

	}

	/**
	*	バリアチェック弾
	*/
	task BarrierCheckShot{

		let obj = Obj_Create( OBJ_SHOT );
		ObjShot_SetGraphic( obj, WHITE03 );
		Obj_SetAlpha( obj, 0 );
		Obj_SetCollisionToPlayer( obj,false );
		ObjShot_ToItem( obj,false );

		m_bBarrierBreak = false;
		loop{
			if( Obj_BeDeleted( obj ) ){ break; }
			Obj_SetPosition( obj, GetPlayerX(), GetPlayerY() );
			yield;
		}
		m_bBarrierBreak = true;

	}

}
