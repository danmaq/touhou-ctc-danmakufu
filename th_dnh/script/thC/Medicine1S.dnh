//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ1C　ボス　メディスン・メランコリー　スペル1
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Medicine - スペル1]
#Text[ステージ1C ボス
メディスン・メランコリー]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\BossSub.dnh"
	#include_function ".\INCLUDE\BOSS\Medicine.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;
	FLAN_ESS_NOCALL_MAINLOOP = false;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** サブキャラ間隔角度 */
	let m_nDollGapAngle = 0;

	/** ダメージ率（スペルプラクティス及び単体テスト時に固くする） */
	let m_nDamageRate = 1;

	/** フェイズ */
	let m_nPhase = 0;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
			m_nDamageRate = 0.8;
		}
		else if( m_bStagePractice ){ m_nDamageRate = 0.8; }
		SetTimer( 63 );
		SetLife( 400 );
		SetDamageRate( 5 * m_nDamageRate, 5 * m_nDamageRate );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );
		BehaviorSub( ACT_STAND3 );
		m_nDollGapAngle = GetCommonDataDefaultEx( CL_CDNS_TEMP, CL_CD_BOSS_ANGLE, -90 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KAEI + CL_TTH_CHARACTER_NAME_KAEI_MEDICINE;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** サブキャラ間隔角度設定 */
		m_nDollGapAngle += 360 / 240;

	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){ DropItemTHC( 8 ); }

		/** 共通終了設定 */
		FinalizeBoss();

		/** 個別終了設定 */
		if( !m_bStage || m_bSpellPractice ){
			DeleteCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ANGLE );
		}
		else{
			SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ANGLE, m_nDollGapAngle );
		}

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス＆サブキャラ描画 */
		let nDollGapLength = 32;
		let nX = GetGapX( GetX(), nDollGapLength, m_nDollGapAngle );
		let nY = GetGapY( GetY(), nDollGapLength * 0.4, m_nDollGapAngle * 2 );
		if( sin( m_nDollGapAngle ) > 0 ){
			DrawBoss( m_szImageBoss );
			DrawSub( m_szImageBoss, CHAR_DOLL, nX, nY );
		}
		else{
			DrawSub( m_szImageBoss, CHAR_DOLL, nX, nY );
			DrawBoss( m_szImageBoss );
		}

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 55 );

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetSubAction( ACT_SPELL3, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_KAEI + CL_TTH_SPELL_STAGE1_BOSS_1 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );

		/** ため */
		SetAction( ACT_SHOT_B5, 150 );
		PlaySEEx( sePower );
		Concentration01( 120 );
		__Wait( 120 );
		SetDamageRate( 13.5 * m_nDamageRate, 13.5 * m_nDamageRate );

		/** 使い魔召喚 */
		SummonShadow();
		__Wait( 60 );

		let nAssign = 1;

		loop{

			/** 移動 */
			loop( 2 ){
				__Wait( 60 );
				Move( 60 );
				__Wait( 60 );
			}

			/** 全方向弾 */
			RoundShotEx( nAssign );
			__Wait( 60 );

			nAssign = - nAssign;

		}

	}

	/**
	*	使い魔召喚
	*/
	task SummonShadow{

		let nAngle = - 90;
		let anNextLife = [ 375, 300, 225, 150 ];
		let anNextTime = [ 55, 41, 27, 13 ];
		CreateEnemyFromScript( "Shadow", GetX(), GetY(), 0, nAngle, 0 );
		PlaySEEx( seShadow );
		while( m_nPhase < m_nLevel ){
			if( GetLife() <= anNextLife[ m_nPhase + 1 ] || GetTimer() <= anNextTime[ m_nPhase + 1 ] ){
				m_nPhase ++;
				CreateEnemyFromScript( "Shadow", GetX(), GetY(), 0, nAngle, m_nPhase );
				PlaySEEx( seShadow );
			}
			nAngle += 3;
			yield;
		}

	}

	/**
	*	全方向弾
	*	@param nAssign	割り振り係数
	*/
	task RoundShotEx( let nAssign ){

		let nNum = 1 + m_nLevel;
		let nWay = [ 32, 36, 40, 50 ][ m_nLevel ];
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 1.2;
		let nNumSpeed = 0.3;
		let nAngle = GetAngleToPlayer();
		let nNumAngle = 360 / nWay / ( 1 + m_nLevel ) * nAssign;
		let nGraphic = US_BALL_S_RED;
		let nDelay = 30;

		SetAction( ACT_SHOT_A5, 60 );
		loop( nNum ){
			_RoundShot01( nX, nY, nSpeed, nAngle, nWay, nGraphic, nDelay );
			nSpeed += nNumSpeed;
			nAngle += nNumAngle;
		}
		PlaySEDelay( seShot1, nDelay );

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	使い魔
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy Shadow{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shadow.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = true;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_SHADOW_LIGHTING = false;
	FLAN_SHADOW_COLLISION = true;
	FLAN_SHADOW_DELETE_SHOT = 32;
	FLAN_ENEMY_COLLISION_A = 24;
	FLAN_ENEMY_COLLISION_B = 18;
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** ダメージ率（スペルプラクティス及び単体テスト時に固くする） */
	let m_nDamageRate = 1;

	/** 割り振り係数 */
	let m_nAssign;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice || m_bStagePractice ){ m_nDamageRate = 0.8; }
		SetLife( 250 );
		_SetDamageRateDelayEx( 85 * m_nDamageRate, 85 * m_nDamageRate, 50, 50, 30 );
		m_nAssign = nArgv;
		BehaviorShadow( CHAR_SHADOW_MAID );

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*	@param bIsAppear 具現化中かどうか
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*	@param bIsAppear 具現化中かどうか
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*	@param bIsAppear 具現化中かどうか
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase, let bIsAppear ){

		/** 使い魔描画 */
		let nShadowImage = SHADOW_IMAGE_6S;
		let nShadowColor = SHADOW_COLOR_RED;
		let nAngle = 2 * m_nFlanCount;
		let nScale = 0.8;
		DrawShadow( nShadowImage, nShadowColor, nAngle, nScale, nScale );
		DrawShadowCharEx( nScale );

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期位置 */
		let nGapLength = 150;
		let nCompY = 0.4;
		let nGapAngle = GetAngle() + 360 / ( m_nLevel + 1 ) * m_nAssign;
		let nX = GetGapX( GetEnemyX(), nGapLength, nGapAngle );
		let nY = GetGapY( GetEnemyY(), nGapLength * nCompY, nGapAngle );
		SetPosition( nX, nY );
		yield;

		/** 平行狙い弾 */
		Concentration01( 30 );
		ParallelShot();

		/** 移動 */
		loop{
			nGapAngle += 3;
			nX = GetGapX( GetEnemyX(), nGapLength, nGapAngle );
			nY = GetGapY( GetEnemyY(), nGapLength * nCompY, nGapAngle );
			SetPosition( nX, nY );
			yield;
		}

	}

	/**
	*	平行狙い弾
	*/
	task ParallelShot{

		let nGraphic = US_RICE_S_BLUE;
		let nDelay = 5;
		let nFrame = 7;

		loop{

			let nX = GetX();
			let nY = GetY();
			let nPlayerX = GetPlayerX();
			let nPlayerY = GetPlayerY();
			let nSpeed = rand( 1.5, 2.5 );
			let nAngle = 90;
			if( m_nLevel < 2 ){
				if( nPlayerY < nY ){ nAngle = - 90; }
			}
			else{
				nAngle = GetGapAngle( GetEnemyX(), GetEnemyY(), nPlayerX, nPlayerY );
			}
			CreateShot01( nX, nY, nSpeed, nAngle, nGraphic, nDelay );
			PlaySEEx( seShot3 );
			loop( nFrame ){ yield; }

		}

	}

}
