//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ2A　ボス　レミリア・スカーレット　スペル1
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Remilia - スペル1]
#Text[ステージ2A ボス
レミリア・スカーレット]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Remilia.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		SetTimer( 63 );
		SetLife( 500 );
		SetDamageRate( 5, 5 );
		SetShotAutoDeleteClip( 96, 32, 96, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND4 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KOUMA + CL_TTH_CHARACTER_NAME_KOUMA_REMILIA;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){ DropItemTHC( 10 ); }

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 55 );

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_KOUMA + CL_TTH_SPELL_STAGE2_BOSS_1 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );

		let nAssign = - 1;

		loop{

			/** 扇状機雷弾 */
			SetAction( ACT_SHOT_B3, 50 );
			Concentration01( 30 );
			__Wait( 30 );
			WideMineShot( nAssign );
			__Wait( 90 );

			/** 移動 */
			Move( 90 );
			__Wait( 120 );

			SetDamageRate( 17, 17 );
			nAssign = - nAssign;

		}

	}

	/**
	*	扇状機雷弾
	*	@param nAssign	割り振り係数
	*/
	task WideMineShot( let nAssign ){

		let obj = Obj_Create( OBJ_SHOT );
		let nX = GetX();
		let nY = GetY();
		let nFrame = 15;
		let nSpeed = ( nY - CL_MIN_Y ) / nFrame;
		Obj_SetX( obj, nX );
		Obj_SetY( obj, nY );
		Obj_SetSpeed( obj, nSpeed );
		Obj_SetAngle( obj, - 90 );
		ObjShot_SetGraphic( obj, US_BALL_L_PURPLE );

		/** 待ち */
		PlaySEEx( seShot1 );
		loop( nFrame ){ yield; }

		/** 分裂 */
		if( !Obj_BeDeleted( obj ) ){
			let nWay = [ 12, 14, 14, 16 ][ m_nLevel ];
			let nWayAngle = 180 / ( nWay - 1 );
			nWay += 2;
			let nAngle = 90 - nWayAngle * ( nWay - 1 ) / 2 + RandBlur( nWayAngle );
			loop( nWay ){
				MineShot( nX, CL_MIN_Y, nAngle, nAssign );
				if( m_nLevel >= 2 ){ nAssign = - nAssign; }
				nAngle += nWayAngle;
			}
			Obj_Delete( obj );
			PlaySEEx( seKira1 );
			PlaySEDelay( sePower, 180 );
		}

	}

	/**
	*	機雷弾
	*	@param nX		弾源x座標
	*	@param nY		弾源y座標
	*	@param nAngle	角度
	*	@param nAssign	割り振り係数
	*/
	function MineShot( let nX, let nY, let nAngle, let nAssign ){

		/** 機雷設置弾 */
		let nSpeed = 5;
		let nGraphic = US_BALL_L_PURPLE;

		/** 機雷弾 */
		let nNum = 18;
		let nNumFrame = 5;
		let _nSpeed = 1.5;
		let _nAngle = nAngle;
		let nNumAngle = 180 / ( nNum - 1 ) * nAssign;
		let _nGraphic = US_BALL_BS_RED;
		let nDelay = 5;
		let nWaitFrame = 240;
		let nShotFrame = 0;

		CreateShotA( 0, nX, nY, 0 );
		SetShotDataA( 0, 0, nSpeed, nAngle, 0, 0, 0, nGraphic );
		loop( nNum ){
			nWaitFrame -= nNumFrame;
			nShotFrame += nNumFrame;
			CreateShotA( 1, 0, 0, nDelay );
			SetShotDataA( 1, 0, 0, _nAngle, 0, 0, 0, _nGraphic );
			SetShotDataA( 1, nWaitFrame, _nSpeed, NULL, 0, 0, 0, _nGraphic );
			AddShot( nShotFrame, 0, 1, 0 );
			_nAngle += nNumAngle;
		}
		FireShot( 0 );

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 10;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}
