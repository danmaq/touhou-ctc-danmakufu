//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ラストワード　橙
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Chen - ラストワード]
#Text[ラストワード
橙]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\ChenRan.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 0;
	FLAN_ESS_NOCALL_MAINLOOP = false;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** 反射したか */
	let m_bReflect = false;

	/** 反射回数 */
	let m_nReflectCount = 0;

	/** 機雷弾数 */
	let m_nMineCount = 0;

	/** 破裂するまでの最低機雷弾数 */
	let m_nClashCount = 10;

	/**	プレイヤー座標 */
	let m_nPlayerX = 0;
	let m_nPlayerY = 0;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		SetPosition( m_nPracticeX, m_nPracticeY );
		SetTimer( 63 );
		SetLife( 500 );
		SetDamageRate( 2, 0 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_YOUMU + CL_TTH_CHARACTER_NAME_YOUMU_CHEN;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** プレイヤー座標 */
		m_nPlayerX = GetPlayerX();
		m_nPlayerY = GetPlayerY();

	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawChenRan( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		SetRoll( nFrame );
		BossMoveHome( nFrame, false );
		__Wait( 55 );

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_LASTWORD + CL_TTH_SPELL_LW_CHEN;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );

		/** 追尾移動＋機雷弾設置 */
		SearchMove();
		SetMineShot();
		SetDamageRateDelay( 20, 0, 180 );
		SetDamageRateDelay( 50, 0, 1200 );

	}

	/**
	*	機雷弾設置
	*/
	task SetMineShot{

		let nFrame = 3;

		PlaySELoop( seShot1, 6000, 6 );
		loop{
			loop{
				MineShot();
				m_nMineCount ++;
				loop( nFrame ){
					if( m_bReflect && m_nMineCount >= m_nClashCount ){ break; }
					yield;
				}
				if( m_bReflect && m_nMineCount >= m_nClashCount ){ break; }
			}
			m_nMineCount = 0;
			__Wait( nFrame );
		}

	}

	/**
	*	機雷弾
	*/
	task MineShot{

		let obj = Obj_Create( OBJ_SHOT );
		let nGraphic = [ US_BALL_BS_YELLOW, US_BALL_BS_ORANGE, US_BALL_BS_RED ][ m_nReflectCount ];
		let _nGraphic = [ US_SCALE_YELLOW, US_SCALE_ORANGE, US_SCALE_RED ][ m_nReflectCount ];
		let nDelay = 20;
		Obj_SetPosition( obj, GetX(), GetY() );
		ObjShot_SetGraphic( obj, nGraphic );
		ObjShot_SetDelay( obj, nDelay );

		while( !m_bReflect || m_nMineCount < m_nClashCount ){ yield; }

		/** 破裂 */
		if( !Obj_BeDeleted( obj ) ){
			let nX = Obj_GetX( obj );
			let nY = Obj_GetY( obj );
			let nMaxSpeed = GetGapLength( nX, nY, m_nPlayerX, m_nPlayerY ) / 80;
			let nMinSpeed = nMaxSpeed * 0.94;
			let nAngle = GetGapAngle( nX, nY, m_nPlayerX, m_nPlayerY );
			let nWay = 4;
			let nNum = 3;
			_RoundLineShot( nX, nY, nMinSpeed, nMaxSpeed, nAngle, nWay, nNum, _nGraphic, 0 );
			Obj_Delete( obj );
		}

	}

	/**
	*	追尾移動
	*/
	task SearchMove{

		SetAction( ACT_MOVE_R, 6000 );
		SetRollConstant( 6000 );
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 0;
		let nAngle = - 6;
		_SetSpeed();
		_SetAngle();
		SetReflectAngle();

		/** 速度設定 */
		task _SetSpeed{
			let nFrame = 300;
			let nAccelSpeed = 6.2 / nFrame;
			loop( nFrame ){
				nSpeed += nAccelSpeed;
				SetSpeed( nSpeed );
				yield;
			}
		}

		/** 角度設定 */
		task _SetAngle{
			loop{
				nX = GetX();
				nY = GetY();
				if( nAngle >= 360 ){ nAngle %= 360; }
				while( nAngle < 0 ){ nAngle += 360; }
				SetAngle( nAngle );
				yield;
			}
		}

		/** 反射角度設定 */
		task SetReflectAngle{
			let bReflectLR = false;
			let bReflectUD = false;
			loop{
				m_bReflect = false;
				if( nX < CL_MIN_X || nX > CL_MAX_X ){
					if( nX < CL_MIN_X - 15 ){ nX = CL_MIN_X; }
					else if( nX > CL_MAX_X + 15 ){ nX = CL_MAX_X; }
					if( !bReflectLR ){
						if( m_nMineCount < m_nClashCount ){ nAngle = 180 - nAngle; }
						else if( m_nReflectCount == 2 ){
							nAngle = GetAngleToPlayer();
							m_nReflectCount = 0;
						}
						else{
							nAngle = 180 - nAngle;
							m_nReflectCount ++;
						}
						m_bReflect = true;
						bReflectLR = true;
						PlaySEEx( seShot2 );
					}
				}
				else{ bReflectLR = false; }
				if( ( nY < CL_MIN_Y || nY > CL_MAX_Y ) ){
					if( nY < CL_MIN_Y - 15 ){ nY = CL_MIN_Y; }
					else if( nY > CL_MAX_Y + 15 ){ nY = CL_MAX_Y; }
					if( !m_bReflect && !bReflectUD ){
						if( m_nMineCount < m_nClashCount ){ nAngle = - nAngle; }
						else if( m_nReflectCount == 2 ){
							nAngle = GetAngleToPlayer();
							m_nReflectCount = 0;
						}
						else{
							nAngle = - nAngle;
							m_nReflectCount ++;
						}
						m_bReflect = true;
						bReflectUD = true;
						PlaySEEx( seShot2 );
					}
				}
				else{ bReflectUD = false; }
				yield;
			}
		}

	}

}
