//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ4　ボス　八雲 紫　通常攻撃1
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Yukari - 通常攻撃1]
#Text[ステージ4 ボス
八雲 紫]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Yukari.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 100;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;
	FLAN_ESS_NOCALL_MAINLOOP = false;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			SetPosition( FLAN_BOSS_HOME_X, FLAN_BOSS_HOME_Y + RandBlur( 0.1 ) );
		}
		SetTimer( 43 );
		SetLife( 2500 );
		SetDamageRate( 75, 75 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 61 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_YOUMU + CL_TTH_CHARACTER_NAME_YOUMU_YUKARI;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 当たり判定 */
		if( m_nWarpStatus == 0 ){
			FLAN_ENEMY_COLLISION_A = 32;
			FLAN_ENEMY_COLLISION_B = 16;
		}
		else if( m_nWarpStatus >= 3 ){
			FLAN_ENEMY_COLLISION_A = 32;
			FLAN_ENEMY_COLLISION_B = 0;
		}
		else{
			FLAN_ENEMY_COLLISION_A = 0;
			FLAN_ENEMY_COLLISION_B = 0;
		}

	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		SetDrawDataYukari();
		DrawBossFloat( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		__Wait( 60 );

		let nAssign = 1;

		loop{

			/** うずまき弾 */
			let nAngle = 90 + 45 * nAssign + RandBlur( 5 );
			TwiddleShot( nAngle, nAssign );
			__Wait( 60 );

			/** 回転全方向弾 */
			RollRoundShot( nAngle );
			__Wait( 270 );

			/** 移動 */
			Move( 60 );
			__Wait( 90 );

			nAssign = - nAssign;

		}

	}

	/**
	*	うずまき弾
	*	@param nAngle	角度
	*	@param nAssign	割り振り係数
	*/
	task TwiddleShot(let nAngle, let nAssign ){

		let nNum = 70 + 20 * m_nLevel;
		let nWay = 4;
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 0.6;
		let nNumSpeed = 0.03;
		let nWayAngle = 360 / nWay;
		let nNumAngle = 5.8 * nAssign;
		let anGraphic = [ US_KUNAI_BLUE, US_KUNAI_PURPLE ];
		let nDelay = 30;

		SetAction( ACT_SHOT_A5, 45 );
		PlaySEDelay( seShot2, nDelay );
		loop( nNum ){
			let _nAngle = nAngle;
			ascent( let i in 0 .. nWay ){
				CreateShot01( nX, nY, nSpeed, _nAngle, anGraphic[ i % 2 ], nDelay );
				_nAngle += nWayAngle;
			}
			nSpeed += nNumSpeed;
			nAngle += nNumAngle;
		}

	}

	/**
	*	回転全方向弾
	*	@param nAngle	角度
	*/
	task RollRoundShot( let nAngle ){

		let nX = GetX();
		let nY = GetY();
		SetAction( ACT_SHOT_B4, 150 );
		PlaySELoop( seShot1, 120, 6 );
		PlaySEDelay( seKira1, 150 );
		_RollRoundShot( nX, nY, nAngle, 1 );
		_RollRoundShot( nX, nY, nAngle, - 1 );

	}

	/**
	*	回転全方向弾（1セット）
	*	@param nX		弾源x座標
	*	@param nY		弾源y座標
	*	@param nAngle	角度
	*	@param nAssign	割り振り係数
	*/
	task _RollRoundShot( let nX, let nY, let nAngle, let nAssign ){

		let nNum = 61;
		let nFrame = 2;
		let nWay = 4;
		if( m_nLevel == 3 ){ nWay = 6; }
		let _nFrame = [ 30, 150 ];
		let nSpeed = 2.8 + 0.2 * m_nLevel;
		let _nSpeed = nSpeed * ( 1.3 + 0.1 * m_nLevel );
		let nWayAngle = 360 / nWay;
		let nNumAngle = [ 5, 5, 4.5, 4 ][ m_nLevel ] * nAssign;
		let anGraphic = [ US_SCALE_BLUE, US_SCALE_PURPLE ];
		let nDelay = 10;

		loop( nNum ){
			let _nAngle = nAngle;
			ascent( let i in 0 .. nWay ){
				let nGra = i % 2;
				CreateShotA( 0, nX, nY, nDelay );
				SetShotDataA( 0, 0, _nSpeed, _nAngle, 0, 0, 0, anGraphic[ nGra ] );
				SetShotDataA( 0, _nFrame[ 0 ], 0, NULL, 0, 0, 0, anGraphic[ nGra ] );
				SetShotDataA( 0, _nFrame [ 1], nSpeed, NULL, 0, 0, 0, anGraphic[ nGra ] );
				FireShot( 0 );
				_nAngle += nWayAngle;
			}
			__Wait( nFrame );
			nAngle += nNumAngle;
		}

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 10;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}
