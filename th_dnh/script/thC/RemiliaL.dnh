//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ2A　ボス　レミリア・スカーレット　ラストスペル
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[Remilia - ラストスペル]
#Text[ステージ2A ボス
レミリア・スカーレット]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Remilia.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 60;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 0;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** 最大ライフ（ラストスペルエフェクトでm_nFlanEnemyMaxLifeは使えない） */
	let m_nMaxLife = 500;

	/** 次のフェイズに移るか */
	let m_bNextPhase = false;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		m_bDeadEffect = true;
		InitializeBoss();

		/** 個別初期設定 */
		if( m_nLevel > 0 ){ m_nLevel --; }
		SetTimer( 69 );
		SetLife( 500 );
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
			let nBossID = CL_TTH_CHARACTER_NAME_KOUMA + CL_TTH_CHARACTER_NAME_KOUMA_REMILIA;
			SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 
		}
		else{
			SetPosition( FLAN_BOSS_HOME_X, FLAN_BOSS_HOME_Y );
			LastSpellEffect();
		}
		SetDamageRate( 5, 0 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND4 );

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		if( !m_bStage || m_bSpellPractice ){
			SetAction( ACT_MOVE, nFrame );
			BossMoveHome( nFrame, false );
		}
		__Wait( 55 );
		if( m_bDead ){ break; }

		/** ボスID設定 */
		if( m_bStage && !m_bSpellPractice ){
			let nBossID = CL_TTH_CHARACTER_NAME_KOUMA + CL_TTH_CHARACTER_NAME_KOUMA_REMILIA;
			SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 
		}

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_KOUMA + CL_TTH_SPELL_STAGE2_BOSS_LAST + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );
		if( m_bDead ){ break; }

		/** ライフチェック */
		CheckLifePhase();

		/** 弾幕コンボ */
		ShotCombo();

		/** 移動 */
		PlaySEEx( sePower );
		Concentration01( 120 );
		DeleteEnemyShotToItem( ALL );
		SetDamageRate( 5, 0 );
		nFrame = 60;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, false );
		__Wait( 114 );
		if( m_bDead ){ break; }

		/** 全方向機雷弾 */
		SetAction( ACT_SHOT_B3, 66 );
		__Wait( 6 );
		if( m_bDead ){ break; }
		RoundMineShot( 0 );
		__Wait( 30 );
		if( m_bDead ){ break; }
		RoundMineShot( 1 );
		__Wait( 60 );
		if( m_bDead ){ break; }

		/** 弾幕コンボ */
		m_bNextPhase = false;
		ShotCombo();

	}

	/**
	*	弾幕コンボ
	*/
	function ShotCombo{

		let nAssign = 1;

		loop{

			/** クロス直線弾 */
			SetAction( ACT_SHOT_A5, 90 );
			let nHalfY = rand( 20, 40 );
			CrossLineShot( nHalfY, nAssign );
			loop( 18 ){
				if( m_bNextPhase ){ break; }
				yield;
			}
			if( m_bNextPhase || m_bDead ){ break; }
			CrossLineShot( nHalfY, - nAssign );
			loop( 82 ){
				if( m_bNextPhase ){ break; }
				yield;
			}
			if( m_bNextPhase || m_bDead ){ break; }

			/** 移動 */
			Move( 45, -1 );
			loop( 45 ){
				if( m_bNextPhase ){ break; }
				yield;
			}
			if( m_bNextPhase || m_bDead ){ break; }

			/** 全方向レーザー */
			RoundLaser( -1 );
			loop( 140 ){
				if( m_bNextPhase ){ break; }
				yield;
			}
			if( m_bNextPhase || m_bDead ){ break; }

			/** 移動 */
			Move( 45, 0 );
			loop( 45 ){
				if( m_bNextPhase ){ break; }
				yield;
			}
			if( m_bNextPhase || m_bDead ){ break; }

			/** 連続ばらつき弾 */
			RapidVariedShot();
			loop( 100 ){
				if( m_bNextPhase ){ break; }
				yield;
			}
			if( m_bNextPhase || m_bDead ){ break; }

			/** 移動 */
			Move( 45, 1 );
			loop( 45 ){
				if( m_bNextPhase ){ break; }
				yield;
			}
			if( m_bNextPhase || m_bDead ){ break; }

			/** 全方向レーザー */
			RoundLaser( 1 );
			loop( 140 ){
				if( m_bNextPhase ){ break; }
				yield;
			}
			if( m_bNextPhase || m_bDead ){ break; }

			/** 移動 */
			Move( 45, 0 );
			loop( 45 ){
				if( m_bNextPhase ){ break; }
				yield;
			}
			if( m_bNextPhase || m_bDead ){ break; }

			nAssign = - nAssign;
			SetDamageRate( 20, 0 );

		}

	}

	/**
	*	全方向機雷弾
	*	@param nAssign	割り振り係数
	*/
	function RoundMineShot( let nAssign ){

		let nWay = 24 + 4 * m_nLevel;
		let nX = GetX();
		let nY = GetY();
		let nWayAngle = 360 / nWay;
		let nAngle = 90 + nWayAngle / 2 * nAssign;

		PlaySEEx( seKira1 );
		loop( nWay ){
			MineShot( nX, nY, nAngle, nAssign );
			nAngle += nWayAngle;
		}

	}

	/**
	*	機雷弾
	*	@param nX		弾源x座標
	*	@param nY		弾源y座標
	*	@param nAngle	角度
	*	@param nAssign	割り振り係数
	*/
	function MineShot( let nX, let nY, let nAngle, let nAssign ){

		/** 機雷設置弾 */
		let nSpeed = 5;
		let nGraphic = US_BALL_L_PURPLE;

		/** 機雷弾 */
		let nNum = 16;
		let _nGraphic = US_BALL_BS_RED;
		let nDelay = 5;
		let nNumFrame = 7;
		let nFrame = 7;
		if( nAssign == 1 ){ nFrame -= nNumFrame / 2; }

		CreateShotA( 0, nX, nY, 0 );
		SetShotDataA( 0, 0, nSpeed, nAngle, 0, 0, 0, nGraphic );
		loop( nNum ){
			nFrame += nNumFrame;
			CreateShotA( 1, 0, 0, nDelay );
			SetShotDataA( 1, 0, 0, nAngle, 0, 0, 0, _nGraphic );
			AddShot( nFrame, 0, 1, 0 );
		}
		FireShot( 0 );

	}

	/**
	*	全方向レーザー
	*	@param nAssign	割り振り係数
	*/
	task RoundLaser( let nAssign ){

		let nWay = 40 + 4 * m_nLevel;
		if( m_nLevel == 2 ){ nWay += 4; }
		let nWayAngle = 360 / nWay * nAssign;
		let nAngle = - 90 + RandBlur( nWayAngle / 2 );

		SetAction( ACT_SHOT_B3, 130 );
		ascent( let i in 0 .. nWay ){
			Laser( nAngle, nWayAngle, i );
			nAngle += nWayAngle;
		}

	}

	/**
	*	レーザー
	*	@param nAngle		角度
	*	@param nWayAngle	隣のレーザーとの角度
	*	@param nNumberr		番号
	*/
	task Laser( let nAngle, let nWayAngle, let nNumber ){

		let nAssign = 1;
		if( nNumber % 2 == 1 ){ nAssign = -1; }
		let nDelay = 90;
		let nAddLength = 600 / nDelay;
		let nGapLength = 50;
		let nAddAngle = nWayAngle * 2 / ( nDelay - 30 ) * nAssign;
		let nWidth = 16;
		let nGraphic = US_BEAM_RED;
		let nKill = 135;

		CreateLaserB( 0, 0, nWidth, nGraphic, nDelay );
		SetLaserDataB( 0, 0, nAddLength, nGapLength, 0, nAngle, nAddAngle, nAngle, nAddAngle );
		SetLaserDataB( 0, nDelay - 30, 0, NULL, 0, NULL, 0, NULL, 0 );
		SetShotKillTime( 0, nKill );
		FireShot( 0 );
		if( nNumber == 0 ){ PlaySEEx( seLaser1 ); }
		loop( nDelay ){ yield; }

		if( !m_bNextPhase && !m_bDead ){
			nAngle += nWayAngle * 2 * nAssign;
			let nX = GetGapX( GetX(), nGapLength, nAngle );
			let nY = GetGapY( GetY(), nGapLength, nAngle );
			let nSpeed = 14;
			let nLength = 100;
			nWidth = 36;
			nGraphic = US_BALL_M_A_RED;
			CreateLaser01( nX, nY, nSpeed, nAngle, nLength, nWidth, nGraphic, 0 );
			if( nNumber == 0 ){ PlaySEEx( seLaser2 ); }
		}

	}

	/**
	*	クロス直線弾
	*	@param nHalfY	直線開始点〜終了点のy座標距離 / 2
	*	@param nAssign	割り振り係数
	*/
	task CrossLineShot( let nHalfY, let nAssign ){

		let nX = GetX();
		let nY = GetY() + 10;
		let nNum = 4 + m_nLevel;
		let nWay = 30 + 4 * m_nLevel;
		let nHalfX = CL_CEN_X - CL_MIN_X;
		let nLineX = CL_CEN_X - nHalfX * nAssign;
		let nLineEndX = CL_CEN_X + nHalfX * nAssign;
		let nGapX = ( nLineEndX - nLineX ) / ( nWay - 1 );
		let nLineY = CL_CEN_Y - 40 + nHalfY;
		let nLineEndY = CL_CEN_Y - 40 - nHalfY;
		let nGapY = ( nLineEndY - nLineY ) / ( nWay - 1 );
		let nGraphic = US_KNIFE_KOUMA_RED;
		let nDelay = 10;

		PlaySELoopEx( seShot3, nWay, 6 );
		loop( nWay ){
			let nSpeed = GetGapLength( nX, nY, nLineX, nLineY ) / 140;
			let nMaxSpeed = nSpeed * ( 3 + 0.4 * m_nLevel );
			let nAngle = GetGapAngle( nX, nY, nLineX, nLineY );
			_LineShot( nX, nY, nSpeed, nMaxSpeed, nAngle, nNum, nGraphic, nDelay );
			yield;
			if( m_bNextPhase || m_bDead ){ break; }
			nLineX += nGapX;
			nLineY += nGapY;
		}

	}

	/**
	*	連続ばらつき弾
	*/
	task RapidVariedShot{

		let nNum = 5 + m_nLevel;
		let nFrame = 14;
		let nX = GetX();
		let nY = GetY();

		SetAction( ACT_SHOT_A5, nFrame * nNum + 15 );
		loop( nNum ){
			let nAngle = GetAngleToPlayer();
			VariedShot( nX, nY, nAngle );
			__Wait( nFrame );
			if( m_bNextPhase || m_bDead ){ break; }
		}

	}

	/**
	*	ばらつき弾
	*	@param nX		弾源x座標
	*	@param nY		弾源y座標
	*	@param nAngle	角度
	*/
	function VariedShot( let nX, let nY, let nAngle ){

		let nNum = 21;
		let nSpeed = 1.5;
		let nNumSpeed = ( 4.8 + 0.4 * m_nLevel - nSpeed ) / ( nNum - 1 );
		let anGraphic = [ US_BALL_SS_RED, US_BALL_S_RED, US_BALL_M_RED, US_BALL_L_RED ];
		let nGra = 0;
		let nDelay = 12;

		PlaySEEx( seShot1 );
		ascent( let i in 0 .. nNum ){
			if( i == 7 || i == 14 || i == 20 ){ nGra ++; }
			let _nAngle = nAngle + RandBlur( 4 );
			if( i == nNum - 1 ){ _nAngle = nAngle; }
			CreateShot01( nX, nY, nSpeed, _nAngle, anGraphic[ nGra ], nDelay );
			nSpeed += nNumSpeed;
		}

	}

	/**
	*	ライフチェック
	*/
	task CheckLifePhase{

		loop{
			if( GetLife() <= m_nMaxLife * 0.55 ){ break; }
			yield;
		}
		m_bNextPhase = true;

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*	@param nAssign	割り振り係数
	*/
	task Move( let nFrame, let nAssign ){

		let _nX = GetX();
		let _nY = GetY();
		let nX = FLAN_BOSS_HOME_X + RandBlur( 20 );
		let nY = FLAN_BOSS_HOME_Y + RandBlur( 10 );
		if( nAssign != 0 ){
			nX += 80 * nAssign;
			nY += 60;
		}
		let nForce = GetGapLength( _nX, _nY, nX, nY ) * 2;
		let nAngle = GetGapAngle( _nX, _nY, nX, nY );
		SetAction( ACT_MOVE, nFrame );
		SetMovePositionHermite( nX, nY, nForce, nAngle, 0, 0, nFrame - 1 );
		loop( nFrame - 1 ){ yield; }
		if( !m_bNextPhase ){ SetMovePosition02( nX, nY, 1 ); }

	}

}
