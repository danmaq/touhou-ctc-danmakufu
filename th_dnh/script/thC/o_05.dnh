//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		STAGE Ex(妖精雑魚)
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	スクリプトここから
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	THCELをインクルード
//	(FLAN/THCELへのインクルードはTHCELが勝手にやってくれます)
//////////////////////////////////////////////////////////////////////

#include_function ".\INCLUDE\Zako.dnh"


//////////////////////////////////////////////////////////////////////
//	設定定義
//////////////////////////////////////////////////////////////////////

	/**	デフォルトアイテムの落下量を設定します。 */
	ENEMY_ITEMEX_NUM_DEFAULT = 5;
	/**	被弾判定の大きさを設定します。 */
	FLAN_ENEMY_COLLISION_A = 0;
	/**	接触判定の大きさを設定します。 */
	FLAN_ENEMY_COLLISION_B = 0;
	/**	onMainLoopへ処理をまわさないよう設定します。(まわしても何の処理も無い) */
	FLAN_ESS_NOCALL_MAINLOOP = false;


//////////////////////////////////////////////////////////////////////
//	定数宣言
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数宣言
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	固有動作実装部
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通動作実装部
//////////////////////////////////////////////////////////////////////

	/**
	*	敵固有のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTask( let nArgv, let nLevel ){
		PlaySEEx(seShadow);
		__Wait(100);
		if(GetArgument()==0){
			ascent(i in 0..[1,3][nLevel]){
				_RoundShot02(GetX(),GetY,7,-0.3,1.7-i*0.05,GetAngleToPlayer(),54,US_RICE_S_WHITE,20);
			}
			PlaySEEx(seShot1);
		}
		if(GetArgument()==1){
			loop(13){
				let angle=1.7;
				while(angle<180){
					CreateShot02(GetX(),GetY(),Bezier(4,9,2.5,absolute(angle),180)*rand(0.8,1.4),angle+GetAngleToPlayer()+rand(0,4),Smooth(-0.2,0,absolute(angle),180),4,US_FIRE_RED,0);
					CreateShot02(GetX(),GetY(),Bezier(4,9,2.5,absolute(angle),180)*rand(0.8,1.4),-angle+GetAngleToPlayer()-rand(0,4),Smooth(-0.2,0,absolute(angle),180),4,US_FIRE_RED,0);
					angle+=5;
				}
				PlaySEEx(seShot2);
				loop(2){yield;}
			}
		}

		__Wait(70);
		AddLife(-65000);

	}

	/**
	*	初期化時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( let nArgv, let nLevel ){
//		CreateDebugWindow();
		SetLife( 40 );
		SetInvincibility( 55 );
	}

	/**
	*	毎フレームごとに呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
		if(nCount > 50){
			FLAN_ENEMY_COLLISION_A = 13;
		}
	}

	/**
	*	終了時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
		DarwZakoBack();
		if(nCount>50){DrawYousei( RECT_YOUSEI_RED );}
	}

}

