//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージEx　ボス　伊吹 萃香　スペル10
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[SuikaB - スペル10]
#Text[ステージEx ボス
伊吹 萃香]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Suika.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 120;
	FLAN_ESS_NOCALL_MAINLOOP = false;
	FLAN_ENEMY_COLLISION_B = 0;
	FLAN_ENEMY_SE_DAMAGE_CHANGE = 10;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** ビット弾（大/中）回転角度 */
	let m_nLRollGapAngle = 0;
	let m_nMRollGapAngle = 0;

	/** ボス座標 */
	let m_nX = GetX();
	let m_nY = GetY();

	/** フェイズ番号 */
	let m_nPhase = 0;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		m_bDeadEffect = true;
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		SetTimer( 113 );
		SetLife( 500 );
		SetDamageRate( 2, 0 );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );
		Vanish();

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_EXPH + CL_TTH_CHARACTER_NAME_EXPH_SUIKA;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス座標設定 */
		m_nX = GetX();
		m_nY = GetY();

	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){
			if( IsTryLastSpell() ){ DropItemTHC( 24 ); }
		}

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 55 );
		if( m_bDead ){ break; }
		FLAN_ENEMY_COLLISION_B = 16;

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_EXTRA + CL_TTH_SPELL_EXPH_BOSS_10;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );
		if( m_bDead ){ break; }

		/** フェイズチェック */
		CheckPhase();
		SetDamageRate( 4, 0 );

		loop{

			__Wait( 180 );
			if( m_bDead ){ break; }

			/** 移動 */
			Move( 120 );
			__Wait( 120 );

		}

	}

	/**
	*	ビット弾発射
	*/
	task Bit( let nPhase ){

		let nWay = 2 + nPhase;
		let nX = GetX();
		let nY = GetY();
		let nWayAngle = 360 / nWay;
		let nAngle = - 90;
		let anGraphic1 = [ US_BALL_L_PURPLE, US_BALL_L_BLUE, US_BALL_L_SKY, US_BALL_L_GREEN, US_BALL_L_YELLOW, US_BALL_L_RED ];
		let anGraphic2 = [ US_BALL_M_A_PURPLE, US_BALL_M_A_BLUE, US_BALL_M_A_SKY, US_BALL_M_A_GREEN, US_BALL_M_A_YELLOW, US_BALL_M_A_RED ];
		let anGraphic3 = [ US_BALL_S_PURPLE, US_FIRE_BLUE, US_RICE_S_SKY, US_SCALE_GREEN, US_RICE_M_YELLOW, US_BALL_M_RED ];
		PlaySEEx( seShot2 );
		ascent( let i in 0 .. nWay ){
			BitL( nX, nY, nAngle, anGraphic1[ i ], anGraphic2[ i ], anGraphic3[ i ] );
			nAngle += nWayAngle;
		}
		__Wait( 30 );

		ShotSE();

		m_nLRollGapAngle = 370 / 720;
		m_nMRollGapAngle = 0;
		let nAddMRollGapAngle = - 0.05;
		while( m_nPhase == nPhase ){
			m_nMRollGapAngle += nAddMRollGapAngle;
			if( (| m_nMRollGapAngle |) >= 5 ){ nAddMRollGapAngle = - nAddMRollGapAngle; }
			yield;
		}

		/** 弾SE */
		task ShotSE{
			let nFrame = 4;
			while( m_nPhase == nPhase && !m_bDead ){
				PlaySEEx( seShot1 );
				__Wait( nFrame );
			}
		}

	}

	/**
	*	ビット弾（大）
	*	@param nX			弾源x座標
	*	@param nY			弾源y座標
	*	@param nGapAngle	ボスからの間隔角度
	*	@param nGraphic1	弾画像
	*	@param nGraphic2	ビット弾（中）画像
	*	@param nGraphic3	ビット弾（中）が出す弾画像
	*/
	task BitL( let nX, let nY, let nGapAngle, let nGraphic1, let nGraphic2, let nGraphic3 ){

		let obj = Obj_Create( OBJ_SHOT );
		ObjShot_SetGraphic( obj, nGraphic1 );
		Obj_SetAutoDelete( obj, false );
		ObjShot_SetBombResist( obj, true );

		/** 移動 */
		let nFrame = 15;
		let nGapLength = 0;
		let nAddGapLength = 50 / nFrame;
		let nX = 0;
		let nY = 0;
		loop( nFrame ){
			nGapLength += nAddGapLength;
			nX = GetGapX( m_nX, nGapLength, nGapAngle );
			nY = GetGapY( m_nY, nGapLength, nGapAngle );
			Obj_SetPosition( obj, nX, nY );
			yield;
		}

		/** 分裂 */
		let nWay = 3;
		let nWayAngle = 360 / nWay;
		let nAngle = nGapAngle;
		PlaySEEx( seShot2 );
		loop( nWay ){
			BitM( nX, nY, nGapLength, nGapAngle, nAngle, nGraphic2, nGraphic3 );
			nAngle += nWayAngle;
		}

		/** 消滅 */
		nFrame = 30;
		Explosion01( nX, nY, 255 / nFrame, 0.1, nFrame );
		Obj_Delete( obj );

	}

	/**
	*	ビット弾（中）
	*	@param nX			弾源x座標
	*	@param nY			弾源y座標
	*	@param nLGapLength	ボスからの間隔長さ
	*	@param nLGapAngle	ボスからの間隔角度
	*	@param nMGapAngle	中継点からの間隔角度
	*	@param nGraphic2	弾画像
	*	@param nGraphic3	発射する弾画像
	*/
	task BitM( let nX, let nY, let nLGapLength, let nLGapAngle, let nMGapAngle, let nGraphic2, let nGraphic3 ){

		let obj = Obj_Create( OBJ_SHOT );
		let nPhase = m_nPhase;
		ObjShot_SetGraphic( obj, nGraphic2 );
		Obj_SetAutoDelete( obj, false );
		ObjShot_SetBombResist( obj, true );

		/** 移動 */
		let nFrame = 15;
		let nMGapLength = 0;
		let nAddGapLength = 80 / nFrame;
		let nX = 0;
		let nY = 0;
		loop( nFrame ){
			nMGapLength += nAddGapLength;
			nX = m_nX + nLGapLength * cos( nLGapAngle ) + nMGapLength * cos( nMGapAngle );
			nY = m_nY + nLGapLength * sin( nLGapAngle ) + nMGapLength * sin( nMGapAngle );
			Obj_SetPosition( obj, nX, nY );
			yield;
		}

		_SetLocation();

		/** 弾 */
		nFrame = 4;
		while( m_nPhase == nPhase && !m_bDead ){
			let nSpeed = ( GetGapLength( m_nX, m_nY, nX, nY ) + 85 ) / 85;
			CreateShot01( nX, nY, nSpeed, nMGapAngle - 180, nGraphic3, 0 );
			loop( nFrame ){ yield; }
		}

		/** 消滅 */
		nFrame = 30;
		Explosion01( nX, nY, 255 / nFrame, 0.1, nFrame );
		DeleteEnemyShotToItemInCircle( SHOT, nX, nY, 32 );
		Obj_Delete( obj );

		/** 位置設定 */
		task _SetLocation{
			while( !Obj_BeDeleted( obj ) ){
				nLGapAngle += m_nLRollGapAngle;
				nMGapAngle += m_nMRollGapAngle;
				nX = m_nX + nLGapLength * cos( nLGapAngle ) + nMGapLength * cos( nMGapAngle );
				nY = m_nY + nLGapLength * sin( nLGapAngle ) + nMGapLength * sin( nMGapAngle );
				Obj_SetPosition( obj, nX, nY );
				yield;
			}
		}

	}

	/**
	*	フェイズチェック
	*/
	task CheckPhase{

		let anNextLife = [ 400, 300, 200, 100 ];
		let anNextTime = [ 89, 69, 49, 29 ];

		/** 陰陽弾 */
		if( GetSpeed() < 0.1 ){ SetAction( ACT_SHOT_A5, 60 ); }
		Concentration01( 30 );
		__Wait( 30 );
		Bit( m_nPhase );

		while( m_nPhase < 4 ){

			while( GetLife() > anNextLife[ m_nPhase ] && GetTimer() > anNextTime[ m_nPhase ] ){ yield; }
			m_nPhase ++;

			if( GetSpeed() < 0.1 ){ SetAction( ACT_SHOT_A5, 60 ); }
			Concentration01( 30 );
			__Wait( 30 );
			Bit( m_nPhase );

		}

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 30;
		let nMaxMoveX = 60;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}
