//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		STAGE 3c(妖精雑魚)
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	スクリプトここから
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	THCELをインクルード
//	(FLAN/THCELへのインクルードはTHCELが勝手にやってくれます)
//////////////////////////////////////////////////////////////////////

#include_function ".\INCLUDE\Zako.dnh"


//////////////////////////////////////////////////////////////////////
//	設定定義
//////////////////////////////////////////////////////////////////////

	/**	デフォルトアイテムの落下量を設定します。 */
	ENEMY_ITEMEX_NUM_DEFAULT = 50;
	/**	被弾判定の大きさを設定します。 */
	FLAN_ENEMY_COLLISION_A = 0;
	/**	接触判定の大きさを設定します。 */
	FLAN_ENEMY_COLLISION_B = 0;
	/**	onMainLoopへ処理をまわさないよう設定します。(まわしても何の処理も無い) */
	FLAN_ESS_NOCALL_MAINLOOP = false;


//////////////////////////////////////////////////////////////////////
//	変数宣言
//////////////////////////////////////////////////////////////////////

	let nItemType=0;

//////////////////////////////////////////////////////////////////////
//	メンバ変数宣言
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	固有動作実装部
//////////////////////////////////////////////////////////////////////

	/**
	*	敵の移動を管理するタスクです。
	*
	*	@param nLevel レベル(0〜3)
	*/
	task DoMove( let nLevel ){
		loop(4){
			Concentration01(60);
		}
		

	}


//////////////////////////////////////////////////////////////////////
//	共通動作実装部
//////////////////////////////////////////////////////////////////////

	/**
	*	敵固有のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTask( let nArgv, let nLevel ){
		DoMove( nLevel );
		__Wait(85);
		let angle=-180;
		while(angle<180){
			CreateEnemyFromScript("Shadow1",0,0,0,angle,angle);
			angle+=90;
		}
		let angle=-180;
		while(angle<180){
			CreateEnemyFromScript("Shadow2",0,0,0,angle,angle);
			angle+=120;
		}
		PlaySEEx(seShadow);
		while(1){
			_RoundShot01(GetX(),GetY(),2,rand(0,360),16,[US_RICE_S_WHITE,US_STAR_M_WHITE][nLevel],20);
			__Wait(39);
		}
	}

	/**
	*	初期化時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( let nArgv, let nLevel ){
//		CreateDebugWindow();
		SetLife(100);
		SetInvincibility( 400 );
	}

	/**
	*	毎フレームごとに呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
		if(OnBomb()){nItemType=1;}
		if(nCount>60){
			FLAN_ENEMY_COLLISION_A = 13;
			FLAN_ENEMY_COLLISION_B = 8;
		}
	}

	/**
	*	終了時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
		if(nItemType==0){DropItemExtendTHC();}
		else{DropItemBombTHC()}
	}

	/**
	*	絵画時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
		if(nCount>60){
			DarwZakoBack();
			DrawYousei( RECT_YOUSEI_GREEN );
		}
	}

}

//////////////////////////////////////////////////////////////////////
//====================================================================
//	使い魔
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy Shadow1{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shadow.dnh"


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = false;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_SHADOW_LIGHTING = true;
	FLAN_SHADOW_COLLISION = true;
	FLAN_SHADOW_DELETE_SHOT = 32;
	FLAN_ENEMY_COLLISION_A = 24;
	FLAN_ENEMY_COLLISION_B = 0;

//////////////////////////////////////////////////////////////////////
//	定数(書換可能)独自ショートカットShadowBody専用
//////////////////////////////////////////////////////////////////////

	let SHADOW_LIFE = 65000;
	let SHADOW_COLOR = SHADOW_COLOR_YELLOW;

//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

task MainAction( let nLevel ){
	SetCoordinateType(COODINATE_TYPE_PARENT);
	let i=int(rand(0,10));
	while( !BeParentVanished() ){
		loop([68,47][nLevel]){yield;}
		let angle=-36;
		while(angle<=36){
			CreateShot01(GetX(),GetY(),1.5-absolute(angle/40),angle+GetAngle()+90,
			[
				[US_RICE_S_RED,US_RICE_S_YELLOW,US_RICE_S_SKY,US_RICE_S_PURPLE,US_RICE_S_GREEN][i%5],
				[US_STAR_S_RED,US_STAR_S_YELLOW,US_STAR_S_SKY,US_STAR_S_PURPLE,US_STAR_S_GREEN][i%5]
			][nLevel]
			,0);
			angle+=[18,12][nLevel];
		}
		PlaySEEx(seShot3);
		i++;
	}
	VanishEnemy();
}
task SubAction01( let nLevel ){
	let angle=0;
	let gap=0;
	let i=0;
	while(1){
		gap=(120+50*sin(angle))*Smooth(0,1,i,60);
		SetX(cos(GetArgument()+angle)*gap);
		SetY(sin(GetArgument()+angle)*gap);
		SetAngle(GetArgument()+angle);
		yield;
		angle+=0.5;
		i++;
	}
}


	#include_function ".\INCLUDE\ShadowBody.dnh"

}

//////////////////////////////////////////////////////////////////////
//====================================================================
//	使い魔
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy Shadow2{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shadow.dnh"


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = false;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_SHADOW_LIGHTING = true;
	FLAN_SHADOW_COLLISION = true;
	FLAN_SHADOW_DELETE_SHOT = 32;
	FLAN_ENEMY_COLLISION_A = 24;
	FLAN_ENEMY_COLLISION_B = 0;

//////////////////////////////////////////////////////////////////////
//	定数(書換可能)独自ショートカットShadowBody専用
//////////////////////////////////////////////////////////////////////

	let SHADOW_LIFE = 65000;
	let SHADOW_COLOR = SHADOW_COLOR_YELLOW;

//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

task MainAction( let nLevel ){
	SetCoordinateType(COODINATE_TYPE_PARENT);
	let i=int(rand(0,10));
	while( !BeParentVanished() ){
		loop([14,10][nLevel]){yield;}
		let angle=-36;
		while(angle<=36){
			CreateShot01(GetX(),GetY(),1.5-absolute(angle/40),angle+GetAngle()-90,
			[
				[US_RICE_S_RED,US_RICE_S_YELLOW,US_RICE_S_SKY,US_RICE_S_PURPLE,US_RICE_S_GREEN][i%5],
				[US_STAR_S_RED,US_STAR_S_YELLOW,US_STAR_S_SKY,US_STAR_S_PURPLE,US_STAR_S_GREEN][i%5]
			][nLevel]
			,0);
			angle+=[18,12][nLevel];
		}
		PlaySEEx(seShot3);
		i++;
	}
	VanishEnemy();
}
task SubAction01( let nLevel ){
	let angle=0;
	let gap=0;
	let i=0;
	while(1){
		gap=(30+70*cos(angle))*Smooth(0,1,i,60);
		SetX(cos(GetArgument()+angle)*gap);
		SetY(sin(GetArgument()+angle)*gap);
		SetAngle(GetArgument()+angle);
		yield;
		angle+=-2.4;
		i++;
	}
}


	#include_function ".\INCLUDE\ShadowBody.dnh"

}
