//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ1A　ボス　紅 美鈴　スペル2
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////


#ScriptVersion[2]
#BackGround[User]
#Title[Meirin - スペル2]
#Text[ステージ1A ボス
紅 美鈴]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Meirin.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 140;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 0;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** ダメージ率（スペルプラクティス及び単体テスト時に固くする） */
	let m_nDamageRate = 1;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		m_bDeadEffect = true;
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
			m_nDamageRate = 0.8;
		}
		else if( m_bStagePractice ){ m_nDamageRate = 0.8; }
		SetTimer( 61 );
		SetLife( 400 );
		SetDamageRate( 5 * m_nDamageRate, 5 * m_nDamageRate );
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KOUMA + CL_TTH_CHARACTER_NAME_KOUMA_MEIRING;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){
			if( IsTryLastSpell() ){ DropItemTHC( 10 ); }
		}

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, false );
		__Wait( 46 );
		if( m_bDead ){ break; }

		/** スペルカード発動 */
		SetAction( ACT_SPELL4, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_KOUMA + CL_TTH_SPELL_STAGE1_BOSS_2 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );
		if( m_bDead ){ break; }

		/** ため */
		SetAction( ACT_SHOT_B3, 6000 );
		PlaySEEx( sePower );
		Concentration01( 120 );
		__Wait( 120 );
		if( m_bDead ){ break; }
		SetDamageRate( 13 * m_nDamageRate, 13 * m_nDamageRate );

		/** 花弾 */
		FlowerShot( -1 );
		FlowerShot( 1 );

		let nTurn = 0;

		loop{

			__Wait( 180 );
			if( m_bDead ){ break; }

			/** 全方向弾 */
			RoundShotEx( nTurn );
			nTurn ++;

		}

	}

	/**
	*	花弾
	*	@param nAssign	割り振り係数
	*/
	task FlowerShot( let nAssign ){

		let nFrame = [ 17, 17, 13, 11 ][ m_nLevel ];
		let nWay = 3 + 2 * m_nLevel;
		if( m_nLevel == 0 ){ nWay = 4; }
		let nTurnFrame = 60;
		let nX = GetX();
		let nY = GetY();
		let nSpeed0 = 4;
		let nAccelSpeed0 = - nSpeed0 / nTurnFrame;
		let nSpeed1 = 2;
		let _nSpeed = 1.2;
		let nWayAngle = 360 / nWay;
		let nAngle = 90 - nWayAngle / 2;
		let nTurnAngle = - 165 * nAssign;
		let nAddAngle = 360 / 480 * nAssign;
		let anGraphic = [ US_RICE_S_RED, US_RICE_S_ORANGE, US_RICE_S_YELLOW, US_RICE_S_GREEN, US_RICE_S_SKY, US_RICE_S_BLUE, US_RICE_S_PURPLE ];
		let nGra = 0;
		let nDelay = 10;

		loop{
			let _nGra = trunc( nGra ) % 7;
			let _nAngle = nAngle;
			loop( nWay ){
				CreateShotA( 0, nX, nY, nDelay );
				SetShotDataA( 0, 0, nSpeed0, _nAngle, 0, nAccelSpeed0, 0, anGraphic[ _nGra ] );
				SetShotDataA( 0, nTurnFrame, nSpeed1, _nAngle + nTurnAngle, 0, 0, 0, anGraphic[ _nGra ] );
				CreateShotA( 1, 0, 0, 0 );
				SetShotDataA( 1, 0, _nSpeed, _nAngle + nTurnAngle - 180, 0, 0, 0, anGraphic[ _nGra ] );
				AddShot( nTurnFrame, 0, 1, 0 );
				FireShot( 0 );
				_nAngle += nWayAngle;
			}
			PlaySEEx( seShot3 );
			__Wait( nFrame );
			if( m_bDead ){ break; }
			nAngle += nAddAngle * nFrame;
			nGra += 0.2;
		}

	}

	/**
	*	全方向弾
	*	@param nTurn	ターン数
	*/
	function RoundShotEx( let nTurn ){

		let nWay = 6;
		let nSpeed = 7 + 1.5 * m_nLevel;
		let nMaxSpeed = 0.8;
		let nAccelSpeed = ( nMaxSpeed - nSpeed ) / 30;
		let nAngle = GetAngleToPlayer();
		let nGraphic = [ US_LIGHT_RED, US_LIGHT_ORANGE, US_LIGHT_YELLOW, US_LIGHT_GREEN, US_LIGHT_SKY, US_LIGHT_BLUE, US_LIGHT_PURPLE ][ nTurn % 7 ];

		_RoundShot02( GetX(), GetY(), nSpeed, nAccelSpeed, nMaxSpeed, nAngle, nWay, nGraphic, 0 );
		PlaySEEx( seShot1 );

	}

}
