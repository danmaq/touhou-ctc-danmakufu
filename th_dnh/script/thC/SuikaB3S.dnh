//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージEx　ボス　伊吹 萃香　スペル3
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#ScriptVersion[2]
#BackGround[User]
#Title[SuikaB - スペル3]
#Text[ステージEx ボス
伊吹 萃香]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Suika.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 160;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 120;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		SetTimer( 63 );
		SetLife( 500 );
		SetDamageRate( 5, 0 );
		SetShotAutoDeleteClip( 96, 96, 96, 96 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );
		CheckExplosion01Ex();
		Vanish();

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_EXPH + CL_TTH_CHARACTER_NAME_EXPH_SUIKA;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){ DropItemTHC( 24 ); }

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 55 );

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_EXTRA + CL_TTH_SPELL_EXPH_BOSS_3;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );

		loop{

			/** 三角レーザー */
			SetAction( ACT_SHOT_A5, 120 );
			Concentration01( 30 );
			__Wait( 30 );
			TriLaser( 0 );
			nFrame = GetRatioFrame( 60 );
			__Wait( nFrame + 120 );

			/** 使い魔召喚 */
			SetAction( ACT_SHOT_A5, 120 );
			CreateShotFromScript( "Shadow", GetX(), GetY(), 0, 0, 0, 0 );
			PlaySEEx( seShadow );
			__Wait( 30 );
			nFrame = GetRatioFrame( 60 );
			__Wait( nFrame + 120 );

			SetDamageRate( 20, 0 );

		}

	}

	/**
	*	三角レーザー
	*	@param nAngle	角度
	*/
	task TriLaser( let nAngle ){

		let nNum = 3;
		let nWay = 6;
		let nX = GetX();
		let nY = GetY();
		let nWayAngle = 60;
		let nLength = 60;
		let nDelay = 60;
		let nFrame = 10;

		ascent( let i in 0 .. nNum ){
			let _nAngle = nAngle;
			loop( nWay ){
				let _nX = nX + nLength * i * cos( _nAngle );
				let _nY = nY + nLength * i * sin( _nAngle );
				ascent( let j in 0 .. i + 1 ){
					let __nX = _nX + nLength * j * cos( _nAngle - 120 );
					let __nY = _nY + nLength * j * sin( _nAngle - 120 );
					_TriLaser( __nX, __nY, _nAngle, nLength, 0, nDelay );
				}
				_nAngle += nWayAngle;
			}
			PlaySEEx( seLaser2 );
			__Wait( nFrame );
			nDelay -= nFrame;
		}
		PlaySEDelay( seKira1, nDelay );
		PlaySEDelay( seShot2, nDelay + 50 );

	}

	/**
	*	三角レーザー
	*	@param nX			レーザー源x座標
	*	@param nY			レーザー源y座標
	*	@param nAngle		角度
	*	@param nMaxLength	長さ
	*	@param nNumber		辺番号
	*	@param nDelay		遅延フレーム数
	*/
	task _TriLaser( let nX, let nY, let nAngle, let nMaxLength, let nNumber, let nDelay ){

		let obj = Obj_Create( OBJ_LASER );
		let nShotFrame = nDelay + 30;
		let nWidth = 10;
		Obj_SetPosition( obj, nX, nY );
		Obj_SetAngle( obj, nAngle );
		ObjLaser_SetWidth( obj, nWidth );
		ObjShot_SetGraphic( obj, US_BEAM_YELLOW );
		ObjShot_SetDelay( obj, nDelay );
		Obj_SetAutoDelete( obj, false );
		ObjLaser_SetSource( obj, false );

		/** 伸びる */
		let nFrame = 5;
		let nLength=0;
		let nAddLength = ( nMaxLength - nLength ) / nFrame;
		loop( nFrame ){
			nLength += nAddLength;
			ObjLaser_SetLength( obj, nLength );
			yield;
		}

		/** 次の辺を出す */
		if( nNumber < 2 && !Obj_BeDeleted( obj ) ){
			_TriLaser( ObjLaser_GetEndX( obj ), ObjLaser_GetEndY( obj ), nAngle - 120, nMaxLength, nNumber + 1, nDelay - nFrame );
		}
		loop( nShotFrame - nFrame ){ yield; }

		/** 扇状弾 */
		let nSpeed = 0;
		let nMaxSpeed = 2;
		let nAccelSpeed = ( nMaxSpeed - nSpeed ) / 180;
		let _nDelay = 20;
		let nGraphic = US_BALL_M_ORANGE;
		CreateShot02( nX, nY, nSpeed, nAngle - 30, nAccelSpeed, nMaxSpeed, nGraphic, _nDelay );
		CreateShot02( nX, nY, nSpeed, nAngle + 30, nAccelSpeed, nMaxSpeed, nGraphic, _nDelay );
		loop( _nDelay ){ yield; }

		/** 細る */
		nFrame = 10;
		let nAddWidth = - nWidth / nFrame;
		loop( nFrame ){
			nWidth += nAddWidth;
			ObjLaser_SetWidth( obj, nWidth );
			yield;
		}
		Obj_Delete( obj );

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 20;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

	/**
	*	ライフorタイム比率フレーム取得
	*	@param nFrame	最大フレーム数
	*/
	function GetRatioFrame( let nFrame ){

		let nMaxLife = 500;
		let nMaxCount = 60 * 60;
		let nLifeRatio = GetLife() / nMaxLife;
		let nTimeRatio = ( nMaxCount - ( m_nFlanCount - 180 ) ) / nMaxCount;

		return trunc( nFrame * Min( nLifeRatio, nTimeRatio ) );

	}

}


//////////////////////////////////////////////////////////////////////
//====================================================================
//	使い魔
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_shot Shadow{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Shot.dnh"


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////

	FLAN_ESS_NOGONE = true;
	FLAN_RINGOUT_BORDER = 48;
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 個別初期設定 */
		m_bShadow = true;
		m_bShadowDead = true;
		CheckBossLife();

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 魔法陣描画 */
		let nShadowImage = SHADOW_IMAGE_6S;
		let nShadowColor = SHADOW_COLOR_WHITE;
		let nAngle = 2 * m_nFlanCount;
		let nScale = 0.8;
		DrawShadowEx( nShadowImage, nShadowColor, nAngle, nScale );

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 移動 */
		SlowMove( GetPlayerX(), GetPlayerY(), 30 );
		loop( 30 ){ yield; }

		/** 三角レーザー */
		TriLaser( GetAngle() );
		loop( 120 ){ yield; }

		/** 消滅 */
		End();

	}

	/**
	*	三角レーザー
	*	@param nAngle	角度
	*/
	task TriLaser( let nAngle ){

		let nNum = 3;
		let nWay = 6;
		let nX = GetX();
		let nY = GetY();
		let nWayAngle = 60;
		let nLength = 50;
		let nDelay = 60;
		let nFrame = 10;

		ascent( let i in 0 .. nNum ){
			let _nAngle = nAngle;
			loop( nWay ){
				let _nX = nX + nLength * i * cos( _nAngle );
				let _nY = nY + nLength * i * sin( _nAngle );
				ascent( let j in 0 .. i + 1 ){
					let __nX = _nX + nLength * j * cos( _nAngle - 120 );
					let __nY = _nY + nLength * j * sin( _nAngle - 120 );
					_TriLaser( __nX, __nY, _nAngle, nLength, 0, nDelay );
				}
				_nAngle += nWayAngle;
			}
			PlaySEEx( seLaser2 );
			__Wait( nFrame );
			nDelay -= nFrame;
		}
		PlaySEDelay( seKira1, nDelay );
		PlaySEDelay( seShot2, nDelay + 50 );

	}

	/**
	*	三角レーザー
	*	@param nX			レーザー源x座標
	*	@param nY			レーザー源y座標
	*	@param nAngle		角度
	*	@param nMaxLength	長さ
	*	@param nNumber		辺番号
	*	@param nDelay		遅延フレーム数
	*/
	task _TriLaser( let nX, let nY, let nAngle, let nMaxLength, let nNumber, let nDelay ){

		let obj = Obj_Create( OBJ_LASER );
		let nShotFrame = nDelay + 30;
		let nWidth = 10;
		Obj_SetPosition( obj, nX, nY );
		Obj_SetAngle( obj, nAngle );
		ObjLaser_SetWidth( obj, nWidth );
		ObjShot_SetGraphic( obj, US_BEAM_RED );
		ObjShot_SetDelay( obj, nDelay );
		Obj_SetAutoDelete( obj, false );
		ObjLaser_SetSource( obj, false );

		/** 伸びる */
		let nFrame = 5;
		let nLength=0;
		let nAddLength = ( nMaxLength - nLength ) / nFrame;
		loop( nFrame ){
			nLength += nAddLength;
			ObjLaser_SetLength( obj, nLength );
			yield;
		}

		/** 次の辺を出す */
		if( nNumber < 2 && !Obj_BeDeleted( obj ) ){
			_TriLaser( ObjLaser_GetEndX( obj ), ObjLaser_GetEndY( obj ), nAngle - 120, nMaxLength, nNumber + 1, nDelay - nFrame );
		}
		loop( nShotFrame - nFrame ){ yield; }

		/** 扇状弾 */
		let nSpeed = 0;
		let nMaxSpeed = 2;
		let nAccelSpeed = ( nMaxSpeed - nSpeed ) / 180;
		let _nDelay = 20;
		let nGraphic = US_BALL_BS_RED;
		CreateShot02( nX, nY, nSpeed, nAngle - 30, nAccelSpeed, nMaxSpeed, nGraphic, _nDelay );
		CreateShot02( nX, nY, nSpeed, nAngle + 30, nAccelSpeed, nMaxSpeed, nGraphic, _nDelay );
		loop( _nDelay ){ yield; }

		/** 細る */
		nFrame = 10;
		let nAddWidth = - nWidth / nFrame;
		loop( nFrame ){
			nWidth += nAddWidth;
			ObjLaser_SetWidth( obj, nWidth );
			yield;
		}
		Obj_Delete( obj );

	}

}
