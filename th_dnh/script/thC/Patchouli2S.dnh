//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		ステージ3A　ボス　パチュリー・ノーレッジ　スペル2
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////


#ScriptVersion[2]
#BackGround[User]
#Title[Patchouli - スペル2]
#Text[ステージ3A ボス
パチュリー・ノーレッジ]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メインスクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

	#include_function ".\INCLUDE\Boss.dnh"
	#include_function ".\INCLUDE\BOSS\Patchouli.dnh"


//////////////////////////////////////////////////////////////////////
//	FLAN設定定義
//////////////////////////////////////////////////////////////////////

	FLAN_BOSS_HOME_X = CL_CEN_X;
	FLAN_BOSS_HOME_Y = CL_MIN_Y + 120;
	FLAN_BOSS_MOVE_MARGIN_SIDE = 100;
	FLAN_ESS_NOCALL_MAINLOOP = false;


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	/** 最大残りフレーム数 */
	let m_nMaxCount = 54 * 60;

	/** 次のフェイズに移行するか */
	let m_bNextPhase = false;

	/** プレイヤー座標 */
	let m_nPlayerX = 0;
	let m_nPlayerY = 0;


//////////////////////////////////////////////////////////////////////
//	共通処理
//////////////////////////////////////////////////////////////////////

	/**
	*	初期化時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( nArgv, nLevel ){

		/** 共通初期設定 */
		InitializeBoss();

		/** 個別初期設定 */
		if( !m_bStage || m_bSpellPractice ){
			if( !m_bFlanPlural ){ SetPosition( m_nPracticeX, m_nPracticeY ); }
		}
		SetTimer( 57 );
		SetLife( 500 );
		SetDamageRate( 13.5, 13.5 );
		SetShotAutoDeleteClip( 96, 96, 96, 32 );
		SetInvincibility( 181 );
		BehaviorBoss( ACT_STAND3 );

		/** ボスID設定 */
		let nBossID = CL_TTH_CHARACTER_NAME_KOUMA + CL_TTH_CHARACTER_NAME_KOUMA_PACHOULI;
		SetCommonDataEx( CL_CDNS_TEMP, CL_CD_BOSS_ID, nBossID ); 

	}

	/**
	*	毎フレームごとに呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/**	プレイヤー座標設定 */
		m_nPlayerX = GetPlayerX();
		m_nPlayerY = GetPlayerY();

	}

	/**
	*	終了時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** アイテム放出 */
		if( m_bStage && !m_bSpellPractice ){ DropItemTHC( 14 ); }

		/** 共通終了設定 */
		FinalizeBoss();

	}

	/**
	*	絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** ボス描画 */
		DrawBoss( m_szImageBoss );

	}

	/**
	*	背景絵画時に呼ばれます。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onBackGroundTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){

		/** 背景描画 */
		DrawSpellBG();

	}


//////////////////////////////////////////////////////////////////////
//	固有処理
//////////////////////////////////////////////////////////////////////

	/**
	*	固有動作のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTaskTHC( let nArgv, let nLevel ){

		/** 初期移動 */
		let nFrame = 45;
		SetAction( ACT_MOVE, nFrame );
		BossMoveHome( nFrame, true );
		__Wait( 55 );

		/** スペルカード発動 */
		SetAction( ACT_SPELL5, 0 );
		SetScoreTHC( m_nSpellScore );
		let nSpellID = CL_TTH_SPELL_KOUMA + CL_TTH_SPELL_STAGE3_BOSS_2 + m_nLevel;
		PushCLCutInQueueEnemy( m_szImageCutIn, nSpellID );
		__Wait( 125 );

		/** 回転弾 */
		RollShot();

		/** 狙い弾 */
		SearchShot();

		loop{

			SetAction( ACT_SHOT_A3, 90 );
			__Wait( 90 );

			/** 移動 */
			Move( 90 );
			__Wait( 90 );

		}

	}

 	/**
	*	回転弾
	*/
	task RollShot{

		let nAssign = 1;
		let nFrame = 100;
		loop{
			_RollShot( nAssign );
			__Wait( nFrame );
			nAssign = - nAssign;
		}

	}

 	/**
	*	回転弾（1セット）
	*	@param nAssign	割り振り係数
	*/
	task _RollShot( let nAssign ){

		let nFrame = 60;
		let nNum = 3 + m_nLevel;
		let nWay = 22;
		let nX = GetX();
		let nY = GetY();
		let nSpeed = 3;
		let nNumSpeed = 1;
		let nMaxSpeed = 1;
		let nNumMaxSpeed = 0.2;
		let nAngle = rand( 0, 360 );
		let nWayAngle = 360 / nWay;
		let nAddAngle = 180 / nFrame * nAssign;
		let nGraphic = US_SCALE_GREEN;
		let nDelay = 30;

		PlaySEDelay( seShot1, nDelay );
		loop( nNum ){
			let nAccelSpeed = ( nMaxSpeed - nSpeed ) / nFrame;
			let _nAngle = nAngle;
			loop( nWay ){
				CreateShotA( 0, nX, nY, nDelay );
				SetShotDataA( 0, 0, nSpeed, _nAngle, nAddAngle, nAccelSpeed, nMaxSpeed, nGraphic );
				SetShotDataA( 0, nFrame, NULL, NULL, 0, 0, 0, nGraphic);
				FireShot( 0 );
				_nAngle += nWayAngle;
			}
			nSpeed += nNumSpeed;
			nMaxSpeed += nNumMaxSpeed;
		}

	}

	/**
	*	狙い弾
	*/
	task SearchShot{

		PhaseCheck;

		let nFrame = 100;
		let nWay = 16;
		let nSpeed = 3.5;
		let nNumSpeed =  4;
		let nWayAngle = ( 100 + 20 * m_nLevel ) / ( nWay - 1 );
		let nAngle = 90 - nWayAngle * ( nWay - 1 ) / 2;
		let nDelay = 30;

		__Wait( nFrame / 2 );
		loop{
			if( m_bNextPhase ){
				let nX = GetX();
				let nY = GetY();
				let _nAngle = nAngle;
				loop( nWay ){
					_SearchShot( nX, nY, nSpeed, _nAngle, nDelay );
					_nAngle += nWayAngle;
				}
				PlaySEDelay( seShot1, nDelay );
			}
			__Wait( nFrame );
		}

	}

	/**
	*	狙い弾（1発）
	*	@param nX		弾源x座標
	*	@param nY		弾源y座標
	*	@param nSpeed	速度
	*	@param nAngle	角度
	*	@param nDelay	遅延フレーム数
	*/
	task _SearchShot( let nX, let nY, let nSpeed, let nAngle, let nDelay ){

		let obj = Obj_Create( OBJ_SHOT );
		let nGraphic = US_BALL_M_ORANGE;
		Obj_SetPosition( obj, nX, nY );
		Obj_SetAngle( obj, nAngle );
		ObjShot_SetDelay( obj, nDelay );
		ObjShot_SetGraphic( obj, nGraphic );

		/** 遅延 */
		loop( nDelay ){ yield; }

		/** 減速 */
		let nFrame = 60;
		let nAccelSpeed = - nSpeed / nFrame;
		loop( nFrame ){
			if( Obj_BeDeleted( obj ) ){ break; }
			nSpeed += nAccelSpeed;
			Obj_SetSpeed( obj, nSpeed );
			yield;
		}

		/** 拡散 */
		if( !Obj_BeDeleted( obj ) ){
			let nWay = 1;
			if( m_nLevel >= 2 ){ nWay = 3; }
			nX = Obj_GetX( obj );
			nY = Obj_GetY( obj );
			nAngle = GetGapAngle( nX, nY, m_nPlayerX, m_nPlayerY );
			nAccelSpeed = ( 3 + 0.5 * m_nLevel ) / 60;
			let nWideAngle = 76 - 8 * m_nLevel;
			_WideShot02( nX, nY, 0, nAccelSpeed, 99, nAngle, nWideAngle, nWay, nGraphic, 0 );
			Obj_Delete( obj );
		}

	}

	/**
	*	フェイズチェック
	*/
	task PhaseCheck{

		loop{
			let nRatioLife = GetLife() / m_nFlanEnemyMaxLife;
			let nRatioCount = ( m_nMaxCount + 3 * 60 - m_nFlanCount ) / m_nMaxCount;
			if( Min( nRatioLife, nRatioCount ) <= 0.55 ){ break; }
			yield;
		}
		Concentration01( 120 );
		PlaySEEx( sePower );
		__Wait( 120 );
		m_bNextPhase = true;

	}

	/**
	*	移動
	*	@param nFrame	移動完了フレーム数
	*/
	task Move( let nFrame ){

		let nMinMoveX = 40;
		let nMaxMoveX = 80;
		let nMinMoveY = 0;
		let nMaxMoveY = 10;

		SetAction( ACT_MOVE, nFrame );
		BossMove( nMinMoveX, nMaxMoveX, nMinMoveY, nMaxMoveY, nFrame );

	}

}
