//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		STAGE 3c(毛玉雑魚)
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	スクリプトここから
//////////////////////////////////////////////////////////////////////

script_enemy_main{


//////////////////////////////////////////////////////////////////////
//	THCELをインクルード
//	(FLAN/THCELへのインクルードはTHCELが勝手にやってくれます)
//////////////////////////////////////////////////////////////////////

#include_function ".\INCLUDE\Zako.dnh"


//////////////////////////////////////////////////////////////////////
//	設定定義
//////////////////////////////////////////////////////////////////////

	/**	デフォルトアイテムの落下量を設定します。 */
	ENEMY_ITEMEX_NUM_DEFAULT = 2;
	/**	被弾判定の大きさを設定します。 */
	FLAN_ENEMY_COLLISION_A = 13;
	/**	接触判定の大きさを設定します。 */
	FLAN_ENEMY_COLLISION_B = 8;
	/**	onMainLoopへ処理をまわさないよう設定します。(まわしても何の処理も無い) */
	FLAN_ESS_NOCALL_MAINLOOP = true;


//////////////////////////////////////////////////////////////////////
//	定数宣言
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数宣言
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	固有動作実装部
//////////////////////////////////////////////////////////////////////

	/**
	*	敵の移動を管理するタスクです。
	*
	*	@param nLevel レベル(0〜3)
	*/
	task DoMove( let nLevel ){
		let angle_s=GetAngle();
		let angle_f=rand(270,320);
		let maki=[-1,1][GetX()<GetCenterX()];
		ascent(i in 0..250){
			SetAngle(angle_s+Accelerate( 0 , angle_f , i , 250 )*maki);
			yield;
		}
	}


//////////////////////////////////////////////////////////////////////
//	共通動作実装部
//////////////////////////////////////////////////////////////////////

	/**
	*	敵固有のタスクです。onInitializeTHC()より1フレーム後に呼ばれます。
	*	ここに固有の動作を記述します。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	task MainTask( let nArgv, let nLevel ){
		DoMove( nLevel );
		__Wait([70,55,45,30][nLevel]*rand(0.3,1.5));
		if(GetArgument()==0){
			let angle=-180;
			while(angle<180){
				let speed=[3,4,6,8][nLevel];
				SetShotDirectionType(ABSOLUTE);
				CreateShotA(0,GetX(),GetY(),15);
				SetShotDataA(0,0,speed,angle,0,-speed/25,0,US_BALL_S_WHITE);
				SetShotDirectionType(PLAYER);
				SetShotDataA(0,50,0,0,0,0.03,[1.5,2,3,4][nLevel],US_BALL_S_RED);
				FireShot(0);
				angle+=[24,16,12,8][nLevel];
			}
			PlaySEEx(seShot1);
		}
		if(GetArgument()==1){
			let angle=-180;
			while(angle<180){
				let speed=[3,4,6,8][nLevel];
				SetShotDirectionType(ABSOLUTE);
				CreateShotA(0,GetX(),GetY(),15);
				SetShotDataA(0,0,speed,angle,0,-speed/25,0,US_BALL_S_WHITE);
				SetShotDataA(0,50,0,rand(0,360),0,0.03,[1.5,2,3,4][nLevel],US_BALL_S_BLUE);
				FireShot(0);
				angle+=[24,16,12,8][nLevel];
			}
			PlaySEEx(seShot1);
		}
		SetShotDirectionType(ABSOLUTE);
	}

	/**
	*	初期化時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*/
	function onInitializeTHC( let nArgv, let nLevel ){
//		CreateDebugWindow();
		SetLife(12);
		SetInvincibility( 20 );
	}

	/**
	*	毎フレームごとに呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onMainLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	終了時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onFinalizeTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
	}

	/**
	*	絵画時に呼ばれます。
	*
	*	@param nArgv 任意の値
	*	@param nLevel レベル(0〜3)
	*	@param nCount 現在のカウンタ値
	*	@param nPhase 現在のフェーズ
	*	@param nPhaseCount 現在のフェーズカウンタ値
	*	@param nPrevPhase 1つ前の状態のフェーズ
	*/
	function onDrawLoopTHC( let nArgv, let nLevel, let nCount, let nPhase, let nPhaseCount, let nPrevPhase ){
		DrawRKedama(RECT_R_KEDAMA_PURPLE,nCount);
	}

}
