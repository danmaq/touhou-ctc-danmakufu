#東方弾幕風
#Title[Patchouli - スペルカード3]
#Text[ステージ3A 中ボス
パチュリー・ノーレッジ
（月＆水符）
下記以外のスタート＝Easy
スキップ＋スタート＝Normal
ユーザー＋スタート＝Hard
ｽｷｯﾌﾟ＋ﾕｰｻﾞｰ＋ｽﾀｰﾄ＝Lunatic]
#Image[]
#BackGround[Default]
#Player[FREE]
#ScriptVersion[2]

script_enemy_main{

	// 共通関数読み込み
	#include_function ".\INCLUDE\Enemy.dnh"

	// 画像及び効果音ファイル
	let imgBoss=dotBossPatchouli;

	// 難易度
	Debug_SetLevel;
	let Lv=GetCommonDataDefault("Level",0);

	let objP=[];

	// -------------------------------------------------------------------------
	@Initialize{

		// 画像及び効果音をロード
		LoadGraphic(imgBoss);

		// スペルカード設定（カード名、スコア、制限時間、弾削除範囲等）
		SetText("＊符「＊＊＊」");
		SetScore(100000);
		SetTimer(65);
		SetShotAutoDeleteClip(20,20,20,20);
		SetEnemyMarker(true);

		// ボスステータス設定（ライフ、ダメージ率等）
		SetLife(500);
		SetDamageRate(15,10);

		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		// 当たり判定（自弾,体当たり）
		Collision(32,24);

		// カウンタ加算
		m_nCount++;

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		SetInvincibility(302);
		_Wait(2);

		// 初期移動
		let fr=120;
		let x=cenX;
		let y=minY+120+RandBlur(1);
		SetMovePosition02(x,y,fr);
		_Wait(fr);

		// プリズム弾
		Concentration01(60);
		_Wait(60);
		PrismShot;
		_Wait(120);

		// プリズムシード弾
		Concentration01(30);
		_Wait(30);
		PrismSeedShot;

		loop{

			_Wait(120);

			// 移動
			move(60);
			_Wait(60);

		}

	}

	// プリズム弾 --------------------------------------------------------------
	task PrismShot{

		let assign=1;
		let num=[2,4,4,6];
		let fr=[90,30,30,15];
		loop(num[Lv]){
			_PrismShot(assign);
			_Wait(fr[Lv]);
			assign*=-1;
		}

	}

	task _PrismShot(let assign){

		// 初期設定 ----------------------------------------
		let obj=Obj_Create(OBJ_SHOT);
		objP=objP~[obj];

		ObjShot_SetGraphic(obj,YELLOW02);
		Obj_SetAutoDelete(obj,false);
		ObjShot_SetBombResist(obj,true);

		// メイン処理 --------------------------------------
		let xTurnAngle=20;
		let zTurnAngle=-45*assign;
		let gapLength=0;
		let gapAngle=0;
		setGapLength;
		setGapAngle;
		setAlpha;

		// 位置設定
		loop{
			let x=GetGapX(GetX,gapLength,gapAngle);
			let y=GetGapY(GetY,gapLength*sin(xTurnAngle),gapAngle);
			let _gapLength=GetGapLength(GetX,GetY,x,y);
			let _gapAngle=GetGapAngle(GetX,GetY,x,y)+zTurnAngle;
			let _x=GetGapX(GetX,_gapLength,_gapAngle);
			let _y=GetGapY(GetY,_gapLength,_gapAngle);
			Obj_SetX(obj,_x);
			Obj_SetY(obj,_y);
			yield;
		}

		// 間隔長さ設定
		task setGapLength{
			let fr=60;
			let accGapLength=100/fr;
			loop(fr){
				gapLength+=accGapLength;
				yield;
			}
		}

		// 間隔角度設定
		task setGapAngle{
			let accGapAngle=360/120*assign;
			loop{
				gapAngle+=accGapAngle;
				yield;
			}
		}

		// α設定
		task setAlpha{
			let fr=60;
			let alpha=0;
			let accAlpha=255/fr;
			loop(fr){
				alpha+=accAlpha;
				Obj_SetAlpha(obj,alpha);
				yield;
			}
		}

	}

	// プリズムシード弾 --------------------------------------------------------
	task PrismSeedShot{

		let way=40+10*Lv;
		loop{
			_PrismSeedShot(way);
			_Wait(way);
		}

	}

	task _PrismSeedShot(let way){

		let sortS=CreateMixOrderArray(way);
		let sortA=CreateMixOrderArray(way);
		let baseSpeed=2;
		let waySpeed=(3.5-baseSpeed)/(way-1);
		let baseAngle=rand(0,360);
		let wayAngle=360/way;

		ascent(let i in 0 .. way){
			let speed=baseSpeed+waySpeed*sortS[i];
			let angle=baseAngle+wayAngle*sortA[i];
			__PrismSeedShot(speed,angle);
			yield;
		}

	}

	task __PrismSeedShot(let speed, let angle){

		// 初期設定 ----------------------------------------
		let obj=Obj_Create(OBJ_SHOT);
		let delay=10;

		Obj_SetX(obj,GetX);
		Obj_SetY(obj,GetY);
		Obj_SetSpeed(obj,speed);
		Obj_SetAngle(obj,angle);
		ObjShot_SetDelay(obj,delay);
		ObjShot_SetGraphic(obj,AQUA23);

		// メイン処理 --------------------------------------
		loop(delay){
			if(Obj_BeDeleted(obj)){break;}
			yield;
		}

		let fr=trunc(200/speed);
		loop(fr){
			if(Obj_BeDeleted(obj)){break;}
			ascent(let i in 0 .. length(objP)){
				if(Collision_Obj_Obj(obj,objP[i])){
					speed=4.5+Lv;
					let Length=180+20*Lv;
					let width=8;
					let graphic=YELLOW02;
					SetShotDirectionType(ABSOLUTE);
					CreateLaser01(Obj_GetX(obj),Obj_GetY(obj),speed,angle,Length,width,graphic,0);
					Obj_Delete(obj);
					break;
				}
			}
			yield;
		}

	}

	// 移動 --------------------------------------------------------------------
	function move(let fr){

		let x=GetX;
		let y=GetY;
		let mx=rand(60,80);
		let my=rand(0,10);
		if(x>=GetPlayerX){
			if(x-mx>=minX+100){mx=-mx;}
		}
		else{
			if(x+mx>=maxX-100){mx=-mx;}
		}
		if(y>=minY+120){my=-my;}
		x+=mx;
		y+=my;
		let power=GetGapLength(GetX,GetY,x,y)*2;
		let angle=GetGapAngle(GetX,GetY,x,y);
		SetMovePositionHermite(x,y,power,angle,0,0,fr);

	}

	// -------------------------------------------------------------------------
	@Finalize{

		// アイテム放出
		DropItem(16,80);

		// ロードしたファイルを削除
		DeleteGraphic(imgBoss);

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// ボス描画
		let x=0;
		let y=0;
		let sLength=128;
		SetAlpha(255);
		SetColor(255,255,255);
		_DrawChrRectSqr(imgBoss,GetX,GetY,x,y,sLength);

	}

}
