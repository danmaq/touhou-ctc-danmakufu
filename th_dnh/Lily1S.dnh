#東方弾幕風
#Title[Lily - スペルカード1]
#Text[ステージ1C 中ボス
リリー・ホワイト



下記以外のスタート＝Hard
ｽｷｯﾌﾟ＋ﾕｰｻﾞｰ＋ｽﾀｰﾄ＝Lunatic]
#Image[]
#BackGround[Default]
#Player[FREE]
#ScriptVersion[2]

script_enemy_main{

	// 共通関数読み込み
	#include_function ".\INCLUDE\Enemy.dnh"

	// 画像及び効果音ファイル
	let imgBoss=dotBossLily;

	// 難易度
	Debug_SetLevel;
	let Lv=GetCommonDataDefault("Level",0);
	if(Lv<3){Lv=0;}
	else{Lv=1;}

	let warpSt=0;
	let warpFr=0;
	let maxWarpFr=16;
	let objE;

	// -------------------------------------------------------------------------
	@Initialize{

		// 画像及び効果音をロード
		LoadGraphic(imgBoss);

		// スペルカード設定（カード名、スコア、制限時間、弾削除範囲等）
		SetShotAutoDeleteClip(20,20,20,20);
		SetEnemyMarker(true);

		// ボスステータス設定（ライフ、ダメージ率等）
		SetLife(500);
		SetDamageRate(10,6);

		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		// 当たり判定（自弾,体当たり）
		Collision(32,24);

		// カウンタ加算
		m_nCount++;

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		SetInvincibility(242);
		_Wait(2);

		// 初期移動
		warp(60);
		_Wait(60);
		let fr=120;
		let x=cenX;
		let y=cenY;
		SetMovePosition02(x,y,fr);

		SetText("＊符「＊＊＊」");
		SetScore(100000);
		SetTimer(62);
		_Wait(fr);

		// 木の葉消去弾
		EraseLeafShot;
		let turn=0;

		loop{

			// 全方向分岐レーザー
			Concentration01(60);
			_Wait(60);
			RoundForkLaser(turn);
			_Wait(300);

			turn++;
			if(turn>=4){turn=0;}

		}

	}

	// 全方向分岐レーザー ------------------------------------------------------
	task RoundForkLaser(let turn){

		let way=3;//+1*Lv;
		let fork=5;
		let wayAngle=360/way;
		let baseAngle=GetAngleToPlayer+wayAngle/2;

		ascent(let i in 0 .. way){
			let angle=baseAngle+wayAngle*i;
			ForkLaser(GetX,GetY,angle,fork,true,turn);
		}

	}

	// 分岐レーザー ------------------------------------------------------------
	task ForkLaser(let x, let y, let angle, let fork, let first, let turn){

		// 初期設定 ----------------------------------------
		let obj=Obj_Create(OBJ_LASER);
		let delay=60;

		Obj_SetX(obj,x);
		Obj_SetY(obj,y);
		Obj_SetAngle(obj,angle);
		ObjLaser_SetWidth(obj,6+fork*2);
		ObjShot_SetDelay(obj,delay);
		ObjShot_SetGraphic(obj,ORANGE21);
		Obj_SetAutoDelete(obj,false);
		Obj_SetCollisionToPlayer(obj,false);
		ObjLaser_SetSource(obj,false);

		// メイン処理 --------------------------------------
		// 長さ設定
		let Length=0;
		let maxLength=100+10*fork;
		setLength;

		// 分岐
		let num=2;
		let numAngle=45;
		let randAngle=10;
		let baseAngle=angle-numAngle*(num-1)/2;
		let waitFr=trunc(delay/4/(num+1));
		fork--;

		ascent(let i in 0 .. num){
			loop(waitFr){yield;}
			if(fork>=0){
				let gapLength=maxLength/2+rand(-maxLength/5,-maxLength/5);
				let xF=GetGapX(x,gapLength,angle);
				let yF=GetGapY(y,gapLength,angle);
				let angleF=baseAngle+numAngle*i+rand(-randAngle,randAngle);
				ForkLaser(xF,yF,angleF,fork,false,turn);
			}
		}
		loop(100){yield;}

		// 木の葉弾
		if(!first){
			let xL=GetGapX(x,maxLength,angle);
			let yL=GetGapY(y,maxLength,angle);
			let angleL=GetGapAngle(xL,yL,GetX,GetY);
			let graphic=[PURPLE12,GREEN12,ORANGE12,WHITE12];
			LeafShot(xL,yL,angleL,graphic[turn]);
		}
		loop(140){yield};

		// 消滅
		ObjShot_FadeDelete(obj);

		// 長さ設定 ----------------------------------------
		task setLength{
			let fr=trunc(delay/4);
			let addLength=maxLength/fr;
			loop(fr){
				Length+=addLength;
				ObjLaser_SetLength(obj,Length);
				yield;
			}
			loop(fr*5){yield;}
			Obj_SetCollisionToPlayer(obj,true);
		}

	}

	// 木の葉弾 ----------------------------------------------------------------
	task LeafShot(let x, let y, let angle, let graphic){

		// 初期設定 ----------------------------------------
		let obj=Obj_Create(OBJ_SHOT);

		Obj_SetX(obj,x);
		Obj_SetY(obj,y);
		Obj_SetSpeed(obj,0);
		Obj_SetAngle(obj,angle);
		ObjShot_SetDelay(obj,30);
		ObjShot_SetGraphic(obj,graphic);
		Obj_SetAutoDelete(obj,false);

		// メイン処理 --------------------------------------
		loop(75){
			if(Obj_BeDeleted(obj)){break;}
			yield;
		}

		let fr=90;
		let speed=0;
		let maxSpeed=1.2;
		let addSpeed=(maxSpeed-speed)/fr;

		loop(fr){
			if(Obj_BeDeleted(obj)){break;}
			speed+=addSpeed;
			Obj_SetSpeed(obj,speed);
			yield;
		}

		speed=2.4;
		if(Lv==1){speed=4.8;}

		loop{
			if(Obj_BeDeleted(obj)){break;}
			if(Collision_Obj_Obj(obj,objE)){
				angle=GetGapAngle(Obj_GetX(obj),Obj_GetX(obj),GetPlayerX,GetPlayerY);
				Obj_SetSpeed(obj,speed);
				Obj_SetAngle(obj,angle);
				Obj_SetAutoDelete(obj,true);
				break;
			}
			yield;
		}

	}

	// 木の葉消去弾 ------------------------------------------------------------
	task EraseLeafShot{

		// 初期設定 ----------------------------------------
		objE=Obj_Create(OBJ_SHOT);

		Obj_SetX(objE,GetX);
		Obj_SetY(objE,GetY);
		Obj_SetSpeed(objE,0);
		Obj_SetAngle(objE,0);
		ObjShot_SetGraphic(objE,WHITE02);
		Obj_SetAlpha(objE,0);
		Obj_SetCollisionToPlayer(objE,false);
		ObjShot_SetBombResist(objE,true);
		ObjShot_ToItem(objE,false);

	}

	// ワープ移動 --------------------------------------------------------------
	task warp(let fr){

		// 消滅
		warpSt=1;
		warpFr=0;
		loop(maxWarpFr){
			yield;
			warpFr++;
		}

		// 待ち
		SetEnemyMarker(false);
		warpSt=2;
		SetX(cenX);
		SetY(minY-400);
		_Wait(fr-maxWarpFr*2);

		// 出現
		SetEnemyMarker(true);
		SetX(cenX);
		SetY(minY+60);
		warpSt=3;
		warpFr=0;
		loop(maxWarpFr){
			yield;
			warpFr++;
		}
		warpSt=0;

	}

	// -------------------------------------------------------------------------
	@Finalize{

		// アイテム放出
		DropItem(16,80);

		// ロードしたファイルを削除
		DeleteGraphic(imgBoss);

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// ボス描画
		let x=0;
		let y=0;
		let sLength=128;
		SetAlpha(255);
		SetColor(255,255,255);
		setDrawData;
		_DrawChrRectSqr(imgBoss,GetX,GetY,x,y,sLength);

	}

	// 描画倍率 ----------------------------------------------------------------
	function setDrawData{

		alternative(warpSt)
		case(1){
			let scX=1;
			let scY=1;
			let halfWarpFr=maxWarpFr/2;
			if(warpFr<halfWarpFr){
				scX=1+0.5/halfWarpFr*warpFr;
				scY=1-0.9/halfWarpFr*warpFr;
			}
			else{
				scX=1.5-1.5/halfWarpFr*(warpFr-halfWarpFr);
				scY=0.1+2.4/halfWarpFr*(warpFr-halfWarpFr);
			}
			SetGraphicScale(scX,scY);
			SetAlpha(255);
		}
		case(2){
			SetGraphicScale(1,1);
			SetAlpha(0);
		}
		case(3){
			let scX=1;
			let scY=1;
			let halfWarpFr=maxWarpFr/2;
			if(warpFr<halfWarpFr){
				scX=1.5/halfWarpFr*warpFr;
				scY=2.5-2.4/halfWarpFr*warpFr;
			}
			else{
				scX=1.5-0.5/halfWarpFr*(warpFr-halfWarpFr);
				scY=0.1+0.9/halfWarpFr*(warpFr-halfWarpFr);
			}
			SetGraphicScale(scX,scY);
			SetAlpha(255);
		}
		others{
			SetGraphicScale(1,1);
			SetAlpha(255);
		}

	}

}
