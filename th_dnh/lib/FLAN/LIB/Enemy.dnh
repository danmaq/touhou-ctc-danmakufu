//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	Framework of LunAtic Notation
//	(c)2006 danmaq
//
//		※各上位ライブラリから間接的にインクルードされます。
//			直接インクルードすることはありません。
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数(原則書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	共通処理
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	該当スクリプトの共通初期化処理です。
*	注意:自動的に内部から呼ばれますので直接呼び出すことは通常ありません。
*/
function __FlanCommonEnemyInitialize(){
	__FlanCommonEnemyShadowInitialize( true );
	__FlanCommonEnemyShotInitialize( false );
	__FlanCommonEnemyMainLoop();
}

/**
*	該当スクリプトの共通メインループ処理です。
*	注意:自動的に内部から呼ばれますので直接呼び出すことは通常ありません。
*/
task __FlanCommonEnemyMainLoop(){
	loop{
		yield;
		Collision( FLAN_ENEMY_COLLISION_A, FLAN_ENEMY_COLLISION_B );
	}
}

/**
*	該当スクリプトの共通終了処理です。
*	注意:自動的に内部から呼ばれますので直接呼び出すことは通常ありません。
*/
function __FlanCommonEnemyFinalize(){
	if( FLAN_ENEMY_ITEM > 0 ){ DropItemPoint( FLAN_ENEMY_ITEM ); }
	if( FLAN_ENEMY_ITEM_BOMB > 0 ){ DropItemBomb( FLAN_ENEMY_ITEM_BOMB ); }
	if( FLAN_ENEMY_ITEM_EXTEND > 0 ){ DropItemExtend( FLAN_ENEMY_ITEM_EXTEND ); }
	__FlanCommonEnemyShotFinalize();
}
