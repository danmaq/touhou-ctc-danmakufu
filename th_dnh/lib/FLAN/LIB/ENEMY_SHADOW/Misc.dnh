//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	Framework of LunAtic Notation
//	(c)2006 danmaq
//
//		※各上位ライブラリから間接的にインクルードされます。
//			直接インクルードすることはありません。
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////

/**	種別がボスであることを示します。 */
let FLAN_ENEMY_KIND_BOSS	= 0;
/**	種別がザコであることを示します。 */
let FLAN_ENEMY_KIND_ZAKO	= 1;
/**	種別が使い魔であることを示します。 */
let FLAN_ENEMY_KIND_SHADOW	= 2;


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////

/**	敵本体の被弾判定半径(0指定で判定無し)。 */
let FLAN_ENEMY_COLLISION_A	= 0;
/**	敵本体の体当たり接触判定半径(0指定で判定無し)。 */
let FLAN_ENEMY_COLLISION_B	= 0;
/** GetArgumentで取得できる任意データのデフォルト値。 */
let FLAN_ENEMY_ARGV_DEFAULT	= 0;


//////////////////////////////////////////////////////////////////////
//	メンバ変数(書換不可)
//////////////////////////////////////////////////////////////////////

/**	自分自身の種別を定義されます。 */
let m_nFlanEnemyKind	= FLAN_ENEMY_KIND_ZAKO;
/**	最大ライフが格納されます。 */
let m_nFlanEnemyMaxLife = 0;


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ダメージ率設定
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	指定したフレーム数遅延してダメージの通り具合を設定します。
*	SetDamageRateのラッパーです。
*
*	@param nRateShot ショットダメージの通り具合(単位:%)
*	@param nRateBomb ボムダメージの通り具合(単位:%)
*	@param nDelay 遅延フレーム数
*/
task SetDamageRateDelay( let nRateShot, let nRateBomb, let nDelay ){
	loop( nDelay ){ yield; }
	SetDamageRate( nRateShot, nRateBomb );
}

/**
*	指定したフレーム数遅延してダメージの通り具合を設定します。
*	SetDamageRateExのラッパーです。
*
*	@param nRateShot ショットダメージの通り具合(単位:%)
*	@param nRateBomb ボムダメージの通り具合(単位:%)
*	@param nRateShotParent ショットダメージの親スクリプトへの影響する比率(単位:%)
*	@param nRateBombParent ボムダメージの親スクリプトへの影響する比率(単位:%)
*	@param nDelay 遅延フレーム数
*/
task SetDamageRateDelayEx( let nRateShot, let nRateBomb, let nRateShotParent, let nRateBombParent, let nDelay ){
	loop( nDelay ){ yield; }
	SetDamageRateEx( nRateShot, nRateBomb, nRateShotParent, nRateBombParent );
}

/**
*	その場で自殺します。
*	AddLifeのラッパーです。
*/
function OwnKill(){	AddLife( -m_nFlanEnemyMaxLife ); }


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	共通処理
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	該当スクリプトの共通初期化処理です。
*	注意:自動的に内部から呼ばれますので直接呼び出すことは通常ありません。
*
*	@param bESSInitialize 下位初期化処理を呼ぶかどうか
*/
function __FlanCommonEnemyShadowInitialize( let bESSInitialize ){
	m_vFlanArgv = GetArgumentDefault( FLAN_ENEMY_ARGV_DEFAULT );
	if( bESSInitialize ){ __FlanCommonESSInitialize(); }
	m_nFlanEnemyMaxLife = GetLife();
	__PlayDamageSELoop();
}
