//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	Framework of LunAtic Notation
//	(c)2006 danmaq
//
//		※各上位ライブラリから間接的にインクルードされます。
//			直接インクルードすることはありません。
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////

/**	アイテムを落とすX座標を示す要素番号です。 */
let FLAN_ITEM_X = 0;
/**	アイテムを落とすY座標を示す要素番号です。 */
let FLAN_ITEM_Y = 1;


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////

/**	アイテムのばら撒き半径を設定します。 */
let FLAN_ITEM_WIDTH	= 32;
/**	アイテムが画面側方外にはみ出るのを補正する精度を設定します。
*	値を増やすほど画面外にアイテムがはみ出にくくなりますが代わりに重くなります(最悪フリーズします)。
*	逆に値を減らすと軽くなりますが画面外にアイテムがはみ出やすくなります。
*/
let FLAN_ITEM_OUT_COMPENSATION = 20;
/**	この定数にtrueを代入すると画面外に出ても自動的に自殺しません。 */
let FLAN_ESS_NOGONE	= false;


//////////////////////////////////////////////////////////////////////
//	メンバ変数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	判定関数
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	自分自身が画面から一定以上はみ出ているか判定します。
*	IsOutPosのラッパーです。
*
*	@param nDeadline 画面端からの判定猶予距離
*	@return 画面端から指定の判定猶予距離以上はみ出ていればtrue
*/
function IsOut( let nDeadline ){ return IsOutPos( GetX(), GetY(), nDeadline ); }


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	マイクロスレッド制御
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	自分自身のマイクロスレッドを一時停止して、一定速度以下になるまで待機します。
*
*	@param nSpeed 一時停止解除の条件となる速度
*/
function WaitSpeedDown( let nSpeed ){
	yield;
	while( absolute( GetSpeed() ) > nSpeed ){ yield; }
}

/**
*	自分自身のマイクロスレッドを一時停止して、速度がゼロになるまで待機します。
*	WaitSpeedDownのラッパーです。
*/
function WaitZeroSpeed(){ WaitSpeedDown( 0 ); }


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	アイテム関連
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	アイテムを落とす座標を生成します。
*
*	@param nNum アイテムの数
*	@return アイテム座標の配列[ [ X1, Y1 ], [ X2, Y2 ], ... ]
*/
function GetDropItemPosList( let nNum ){
	let aanPosList = [];
	ascent( let i in 0..nNum ){
		let anPos = [
			[ -65536, GetX() ][ i == 0 ],
			[ -65536, GetY() ][ i == 0 ]
		];
		let nRandCount = 0;
		while( nRandCount <= FLAN_ITEM_OUT_COMPENSATION && ( anPos[ FLAN_ITEM_X ] < GetClipMinX() || anPos[ FLAN_ITEM_X ] > GetClipMaxX() ) ){
			let nAngle = rand( 0, 360 );
			let nRadius = RandBlur( FLAN_ITEM_WIDTH );
			anPos[ FLAN_ITEM_X ] = GetX() - cos( nAngle ) * nRadius;
			anPos[ FLAN_ITEM_Y ] = GetY() + sin( nAngle ) * nRadius;
			nRandCount++;
		}
		aanPosList = aanPosList ~ [ anPos ];
	}
	return aanPosList;
}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	移動制御関連
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	自分自身を指定座標に瞬間移動させます。
*	SetX/SetYのラッパーです。
*
*	@param nX 移動先のX座標
*	@param nY 移動先のY座標
*/
function SetPosition( let nX, let nY ){
	SetX( nX );
	SetY( nY );
}

/**
*	自分自身のベクトルを設定します。
*	SetAngle/SetSpeedのラッパーです。
*
*	@param SetAngle 角度
*	@param SetSpeed 速度
*/
function SetVector( let nAngle, let nSpeed ){
	SetAngle( nAngle );
	SetSpeed( nSpeed );
}
