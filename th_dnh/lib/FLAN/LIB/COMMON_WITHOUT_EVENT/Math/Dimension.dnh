//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	Framework of LunAtic Notation
//	(c)2006 danmaq
//
//		※各上位ライブラリから間接的にインクルードされます。
//			直接インクルードすることはありません。
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	メンバ変数(原則書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	算術関数(二次元座標系)
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**	2D座標において原点からの距離を返します。
*	@param nX X座標値
*	@param nY Y座標値
*	@return 原点(0,0)からの距離
*/
function Hypot( let nX, let nY ){ return ( ( nX ^ 2 ) + ( nY ^ 2 ) ) ^ 0.5; }

/**	2D座標において二点間の距離を求めます。
*	Hypotのラッパーです。
*	@param nX1 点1のX座標
*	@param nY1 点1のY座標
*	@param nX2 点2のX座標
*	@param nY2 点2のY座標
*	@return 二点間の距離
*/
function GetGapLength( let nX1, let nY1, let nX2, let nY2 ){ return ( ( ( nX2 - nX1 ) ^ 2 ) + ( ( nY2 - nY1 ) ^ 2 ) ) ^ 0.5; }

/**	2D座標において指定した点から標的座標への角度を求めます。
*	@param nX1 原点とするX座標
*	@param nY1 原点とするY座標
*	@param nX2 標的のX座標
*	@param nY2 標的のY座標
*	@return 角度(deg)
*/
function GetGapAngle( let nX1, let nY1, let nX2, let nY2 ){ return atan2( nY2 - nY1, nX2 - nX1 ); }

/**	2D座標において指定した点から特定距離・特定角度にある点のX座標を求めます。
*	@param nX 原点とするX座標
*	@param nLength 距離
*	@param nAngle 角度
*	@return 指定した点から特定距離・特定角度にある点のX座標
*/
function GetGapX( let nX, let nLength, let nAngle ){ return nX + nLength * cos( nAngle ); }

/**	2D座標において指定した点から特定距離・特定角度にある点のY座標を求めます。
*	@param nY 原点とするX座標
*	@param nLength 距離
*	@param nAngle 角度
*	@return 指定した点から特定距離・特定角度にある点のY座標
*/
function GetGapY( let nY, let nLength, let nAngle ){ return nY + nLength * sin( nAngle ); }

/**	2D座標において指定した点から特定距離・特定角度にある座標を求めます。
*	GetGapX/GetGapYのラッパーです。
*	@param nX 原点とするX座標
*	@param nY 原点とするX座標
*	@param nLength 距離
*	@param nAngle 角度
*	@return 指定した点から特定距離・特定角度にある座標の配列[X,Y]
*/
function GetGapPosition( let nX, let nY, let nLength, let nAngle ){ return [ nX + nLength * cos( nAngle ), nY + nLength * sin( nAngle ) ]; }
