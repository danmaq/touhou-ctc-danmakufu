//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	Framework of LunAtic Notation
//	(c)2006 danmaq
//
//		※各上位ライブラリから間接的にインクルードされます。
//			直接インクルードすることはありません。
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換可能)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	定数(書換不可)
//////////////////////////////////////////////////////////////////////

/**	プレイヤーの攻撃力がランクアップするパワー値の配列を設定します。 */
let FLAN_PLAYER_POWER_UPPOINT = [ 8, 24, 48, 80, 128 ];
/**	プレイヤーの攻撃力最大値を設定します。 */
let FLAN_PLAYER_POWER_MAX = 128;


//////////////////////////////////////////////////////////////////////
//	メンバ変数(原則書換不可)
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	配列操作
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	指定要素数の配列を作り、全ての要素を要素番号で埋め、ランダムにソートします。
*	注意:絵画時(onDrawLoop/onBackGround/onBottomObject/onTopObject)には絶対に使用しないでください
*	(リプレイがずれます)
*
*	@param nSize 配列のサイズ
*	@return 各要素番号がランダムに代入された指定サイズの配列
*/
function CreateMixOrderArray( let nSize ){
	if( nSize <= 0 ){ return []; }
	let array = CreateOrderArray( nSize );
	let mArray = MixArray( array );
	return mArray;
}

/**
*	指定した配列の全要素をランダムに並び替えます。
*	注意:絵画時(onDrawLoop/onBackGround/onBottomObject/onTopObject)には絶対に使用しないでください
*	(リプレイがずれます)
*
*	@param array 対象の配列
*	@return 指定した配列をランダムに並び替えた配列
*/
function MixArray( let array ){
	if( length( array ) <= 0 ){ return []; }
	let mArray = [];
	while( length( array ) > 0 ){
		let total = length( array );
		let pos = rand_int( 0, total - 1 );
		let char = array[ pos ];
		mArray = mArray ~ [ char ];
		array = erase( array, pos );
	}
	return mArray;
}

/**
*	指定した配列から要素を1つランダムに選択し、取り出します。
*	注意:絵画時(onDrawLoop/onBackGround/onBottomObject/onTopObject)には絶対に使用しないでください
*	(リプレイがずれます)
*
*	@param array 対象の配列
*	@return 指定した配列からランダムに選ばれた要素
*/
function GetRandomArray( let array ){
	if( length( array ) <= 0 ){ return; }
	return array[ rand_int( 0, length( array - 1 ) ) ];
}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	BGM/効果音関連
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	効果音を一定時間ごとに再生します。
*
*	@param szSEFile 効果音へのファイルパス
*	@param nTotal 効果音を再生する合計時間
*	@param nInterval 待機するフレーム数
*/
task PlaySELoop( let szSEFile, let nTotal, let nInterval ){
	loop( truncate( nTotal / nInterval ) ){
		PlaySEEx( szSEFile );
		loop( nInterval ){ yield; }
	}
}

/**
*	指定フレーム後に効果音を再生します。
*
*	@param szSEFile 効果音へのファイルパス
*	@param nDelay 遅延フレーム数
*/
task PlaySEDelay( let szSEFile, let nDelay ){
	loop( nDelay ){ yield; }
	PlaySEEx( szSEFile );
}

/**
*	効果音を再生します。
*	但しCommonDataを参照し、効果音が無効な場合再生しません。
*
*	@param szSEFile 効果音へのファイルパス
*/
function PlaySEEx( let szSEFile ){
	if( GetCommonDataDefaultEx( FLAN_CDNS, FLAN_CD_SE_ENABLE, true ) ){ PlaySE( szSEFile ); }
}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	マイクロスレッド制御
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	現在のマイクロスレッドを停止し指定フレーム数待機します。
*	注意:少ないフレーム数でみだりに呼び出さないでください(過負荷の原因となります)
*	注意:オブジェクト弾では原則この関数を使わずにWaitObjectを使用してください。
*
*	@param nWait 待機するフレーム数
*/
function __Wait( let nWait ){ if( nWait > 0 ){ loop( nWait ){ yield; } } }

/**
*	現在のマイクロスレッドを停止し敵が誰も居なくなるまで待機します。
*	注意:敵スクリプトでこの関数を呼び出すとそのマイクロスレッドは二度と動作を再開しなくなります。
*/
function WaitZeroEnemy(){ while( GetEnemyNum() != 0 ){ yield; } }

/**
*	指定フレーム数のみキー入力を待ちます。
*
*	@param nKeyType 受け付けるキーの種類
*	@param nWait 待機するフレーム数
*	@return 指定フレーム数以内にキー入力を受け付けたらtrue
*/
function WaitPushKey( let nKeyType, let nWait ){
	loop( nWait ){
		if( GetKeyState( nKeyType ) == KEY_PUSH ){ return true; }
		yield;
	}
	return false;
}

/**
*	現在のマイクロスレッドを停止し指定ミリ秒間待機します。
*	注意:この機能を使用するとほぼ確実にリプレイずれが生じますので影響の無いところで使用してください。
*
*	@param nMS 待機するミリ秒
*/
function WaitRealTime( let nMS ){
	let nStartTime = GetTime();
	let nTime = 0;
	while( nTime < nMS ){
		nTime = GetTime() - nStartTime;
		yield;
	}
}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	絵画関連
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

/**
*	絵画対象のフレームカウントを刻みます。
*	注意:自動的に内部から呼ばれますので直接呼び出すことは通常ありません。
*/
task __DrawCountLoop(){
	loop{
		yield;
		if( IsRenderFrame() ){ AddCommonDataEx( FLAN_CDNS, FLAN_CD_COUNT_DRAW, 1, 0 ); }
	}
}


