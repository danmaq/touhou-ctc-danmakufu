//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		専用魔理沙スクリプト
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#東方弾幕風[Player]
#ScriptVersion[2]
#ReplayName[THC_MC]
#Menu[魔理沙 魔符]
#Image[.\IMAGE\Select.png]
#Text[狭指向強力タイプ]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メイン部スクリプト
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_player_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

#include_function ".\INCLUDE\player.dnh"


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

let m_nSubShotADir = 1;
let m_nSubShotBAngle = 3;


//////////////////////////////////////////////////////////////////////
//	マイクロスレッド
//////////////////////////////////////////////////////////////////////

	//	メイン
	task Main(){
		yield;
		KeyCheck();
	}
	
	//	サブショット(ビットタスクより呼ばれる)
	function SubShot( let obj, let bLeft ){
		if( !BeCanFire( trunc( Smooth( 40, 4, m_nPowerPhase, 5 ) ) ) ){ return; }
		if( m_bSlow ){
			SuperExplodeShot( Obj_GetX( obj ), Obj_GetY( obj ), m_nSubShotBAngle % 30 * [ 1, -1 ][ bLeft ] );
			if( bLeft ){ m_nSubShotBAngle += 3; }
		}
		else{
			ExplodeShot( Obj_GetX( obj ), Obj_GetY( obj ), m_nSubShotADir * [ 1, -1 ][ bLeft ] );
			if( bLeft ){ m_nSubShotADir = -m_nSubShotADir; }
		}
	}
	
	//	マジックミサイル(低速)
	task SuperExplodeShot( let nX, let nY, let nAngle ){
		let nObjCount = 0;
		let obj = Obj_Create( OBJ_SHOT );
		let nNowX = nX;
		let nNowY = nY;
		Obj_SetPosition( obj, nX, nY );
		Obj_SetAngle( obj, 270 + nAngle );
		ObjShot_SetGraphic( obj, US_SUBSHOT_LONG );
		ObjShot_SetDamage( obj, 4.5 );
		ObjShot_SetPenetration( obj, 3 );
		while( !Obj_BeDeleted( obj ) ){
			Obj_SetAlpha( obj, Smooth( 0, 192, nObjCount, 20 ) );
			nNowX = Obj_GetX( obj );
			nNowY = Obj_GetY( obj );
			Obj_SetSpeed( obj, Accelerate( 3, 20, nObjCount, 100 ) );
			if( nObjCount > 55 ){ Obj_Delete( obj ); }
			yield;
			nObjCount++;
		}
		if( IsOutPos( nNowX, nNowY, 32 ) ){ return; }
		SuperDelayBomb( nNowX, nNowY, 3, 10, 64 );
	}

	//	遅延範囲攻撃(エフェクト表示のみ)
	task SuperDelayBomb( let nX, let nY, let nDamage, let nTime, let nMaxSize ){
		let nObjCount = 0;
		let nVertex = 16;
		DelayBomb( nX, nY, nDamage, nTime );
		let obj = Obj_Create( OBJ_EFFECT );
		Obj_SetPosition( obj, nX, nY );
		ObjEffect_SetTexture( obj, imgFlash );
		ObjEffect_SetRenderState( obj, ALPHA );
		ObjEffect_SetPrimitiveType( obj, PRIMITIVE_TRIANGLEFAN );
		ObjEffect_CreateVertex( obj, nVertex * 3 );
		ascent( let i in 0..( nVertex * 3 ) ){ ObjEffect_SetVertexUV( obj, i, Smooth( 0, 128, trunc( ( i + 1 ) / 3 ), nVertex ), [ 1, 32 ][ i % 3 == 0 ] ); }
		while( !Obj_BeDeleted( obj ) ){
			let nSize = SlowDown( 0, nMaxSize, nObjCount, nTime );
			let nAlpha = Accelerate( 255, 0, nObjCount, nTime );
			ascent( let i in 0..( nVertex * 3 ) ){
				let nScale = nSize * [ 0, 1, 1 ][ i % 3 ];
				let nDeg = Smooth( 0, 360, trunc( ( i + 1 ) / 3 ), nVertex );
				ObjEffect_SetVertexXY( obj, i, nScale * cos( nDeg ), nScale * sin( nDeg ) );
				ObjEffect_SetVertexColor( obj, i, nAlpha, Accelerate( 128, 255, nObjCount, nTime ), 128, Accelerate( 255, 0, nObjCount, nTime ) );
			}
			if( nObjCount > nTime ){ Obj_Delete( obj ); }
			yield;
			nObjCount++;
		}

	}

	//	マジックミサイル
	task ExplodeShot( let nX, let nY, let nDir ){
		let nObjCount = 0;
		let obj = Obj_Create( OBJ_SHOT );
		let nNowX = nX;
		let nNowY = nY;
		Obj_SetPosition( obj, nX, nY );
		Obj_SetAngle( obj, 270 + 2 * nDir );
		ObjShot_SetGraphic( obj, US_SUBSHOT );
		ObjShot_SetDamage( obj, 3.5 );
		ObjShot_SetPenetration( obj, 2 );
		while( !Obj_BeDeleted( obj ) ){
			Obj_SetAlpha( obj, Smooth( 0, 192, nObjCount, 20 ) );
			nNowX = Obj_GetX( obj );
			nNowY = Obj_GetY( obj );
			Obj_SetSpeed( obj, Accelerate( 2, 20, nObjCount, 100 ) );
			yield;
			nObjCount++;
		}
		if( IsOutPos( nNowX, nNowY, 16 ) ){ return; }
		SuperDelayBomb( nNowX, nNowY, 2, 5, 32 );
	}
	
	//	遅延範囲攻撃(ダメージのみ)
	task DelayBomb( let nX, let nY, let nDamage, let nTime ){
		let nObjCount = 0;
		let obj = Obj_Create( OBJ_SHOT );
		Obj_SetPosition( obj, nX, nY );
		Obj_SetAlpha( obj, 0 );
		ObjShot_SetGraphic( obj, US_BLANK64 );
		ObjShot_SetDamage( obj, nDamage );
		ObjShot_SetPenetration( obj, nTime );
		while( !Obj_BeDeleted( obj ) ){
			if( nObjCount > nTime ){ Obj_Delete( obj ); }
			yield;
			nObjCount++;
		}
	}


//////////////////////////////////////////////////////////////////////
//	初期処理
//////////////////////////////////////////////////////////////////////

	@Initialize{
		OnInitialize( 188, 5, 2, 1, 32, 10, 7, 3, 0.4, "StarDustReverie", "MilkyWay", "魔符「スターダストレヴァリエ」", "魔符「ミルキーウェイ」" );
		Main();
	}


//////////////////////////////////////////////////////////////////////
//	毎フレーム呼ばれるメインループ
//////////////////////////////////////////////////////////////////////

	@MainLoop{
		OnMainLoop();
	}


//////////////////////////////////////////////////////////////////////
//	撃墜中のみ毎フレーム呼ばれるループ
//////////////////////////////////////////////////////////////////////

	@Missed{
		OnMissedLoop();
	}


//////////////////////////////////////////////////////////////////////
//	スペルカード処理
//////////////////////////////////////////////////////////////////////

	@SpellCard{
		OnSpellCard();
	}


//////////////////////////////////////////////////////////////////////
//	絵画処理
//////////////////////////////////////////////////////////////////////

	@DrawLoop{
		OnDrawLoop();
	}


//////////////////////////////////////////////////////////////////////
//	終了処理
//////////////////////////////////////////////////////////////////////

	@Finalize{
		OnFinalize();
	}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メイン部スクリプトここまで
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	スペルカード部スクリプト
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////


//	スターダストレヴァリエ
script_spell StarDustReverie{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

#include_function ".\INCLUDE\spell.dnh"


//////////////////////////////////////////////////////////////////////
//	定数
//////////////////////////////////////////////////////////////////////

let SPELL_STAR_SCALE				= 112;


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	マイクロスレッド
//////////////////////////////////////////////////////////////////////

	//	メイン
	task Main(){
		ascent( let i in 0..5 ){
			ascent( let j in 0..4 ){
				let n = ( i * 4 + j ) % SPELL_STAR_COLORTABLE_LENGTH;
				ReverieStar( j * 90 + Smooth( 0, 90, i, 5 ), SPELL_STAR_SCALE, Smooth( 0, 4.5, i, 5 ), SPELL_STAR_COLORTABLE_RED[ n ], SPELL_STAR_COLORTABLE_GREEN[ n ], SPELL_STAR_COLORTABLE_BLUE[ n ] );
			}
			_Wait( 3 );
		}
		_Wait( 180 );
		End();
	}

//////////////////////////////////////////////////////////////////////
//	初期処理
//////////////////////////////////////////////////////////////////////

	@Initialize{
		OnInitialize( 260 );
		Main();
	}


//////////////////////////////////////////////////////////////////////
//	毎フレーム呼ばれるメインループ
//////////////////////////////////////////////////////////////////////

	@MainLoop{
		OnMainLoop();
	}


//////////////////////////////////////////////////////////////////////
//	終了処理
//////////////////////////////////////////////////////////////////////

	@Finalize{
		OnFinalize();
	}


}

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

//	ミルキーウェイ
script_spell MilkyWay{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

#include_function ".\INCLUDE\spell.dnh"


//////////////////////////////////////////////////////////////////////
//	定数
//////////////////////////////////////////////////////////////////////

let SPELL_STAR_SCALE				= 112;


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//	マイクロスレッド
//////////////////////////////////////////////////////////////////////

	//	メイン
	task Main(){
		yield;
		ascent( let i in 0..20 ){
			let n = i % SPELL_STAR_COLORTABLE_LENGTH;
			ReverieStar( RandBlur( 20 ) - 90 + [ 0, 20 ][ m_bLeft ] - [ 0, 20 ][ m_bRight ], SPELL_STAR_SCALE, 2, SPELL_STAR_COLORTABLE_RED[ n ], SPELL_STAR_COLORTABLE_GREEN[ n ], SPELL_STAR_COLORTABLE_BLUE[ n ] );
			_Wait( 8 );
		}
		_Wait( 180 );
		End();
	}


//////////////////////////////////////////////////////////////////////
//	初期処理
//////////////////////////////////////////////////////////////////////

	@Initialize{
		OnInitialize( 400 );
		Main();
	}


//////////////////////////////////////////////////////////////////////
//	毎フレーム呼ばれるメインループ
//////////////////////////////////////////////////////////////////////

	@MainLoop{
		OnMainLoop();
	}


//////////////////////////////////////////////////////////////////////
//	終了処理
//////////////////////////////////////////////////////////////////////

	@Finalize{
		OnFinalize();
	}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	スペルカードスクリプト部ここまで
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

}
