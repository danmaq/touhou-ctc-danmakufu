//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇専用 プレイヤースクリプト共通ライブラリ
//		魔理沙専用 スペルカード部
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	上位ライブラリをインクルード
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////
#include_function "player\THC_MARISA\INCLUDE\common.dnh"


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	定数
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

let PLAYER_SHOTPULL_FRAMELAG		= 30;	// キーを離してからショット発射が残るフレーム
let SPELL_STAR_ALPHA				= 192;
let SPELL_STAR_COLORTABLE_RED		= [ 255,	255,	127,	0,		0,		0,		0,		0,		127,	255,	255 ];
let SPELL_STAR_COLORTABLE_GREEN		= [ 0,		127,	255,	255,	255,	255,	127,	0,		0,		0,		0 ];
let SPELL_STAR_COLORTABLE_BLUE		= [ 0,		0,		0,		0,		127,	255,	255,	255,	255,	255,	127 ];
let SPELL_STAR_COLORTABLE_LENGTH	= Min( Min( length( SPELL_STAR_COLORTABLE_RED ), length( SPELL_STAR_COLORTABLE_GREEN ) ), length( SPELL_STAR_COLORTABLE_BLUE ) );


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メンバ変数
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	共通動作
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	共通メインタスク
task CommonTask(){
//	CreateDebugWindow();
	yield;
}

//	共通初期化部
function OnInitialize( let nInvincibilityTime ){
	SetPlayerInvincibility( nInvincibilityTime );
	CommonTask();
}

//	共通メインループ
function OnMainLoop(){
	OnMainLoopCommon();
}

//	共通終了部
function OnFinalize(){
}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	キャラ固有の共通動作
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	星を作る
function CreateStar( let szImageFile, let nSize, let nColorR, let nColorG, let nColorB ){
	let obj = Obj_Create( OBJ_SPELL );
	Obj_SetAutoDelete( obj, true );
	ObjEffect_SetLayer( obj, 2 );
	ObjEffect_SetTexture( obj, szImageFile );
	ObjEffect_SetRenderState( obj, ADD );
	ObjEffect_SetPrimitiveType( obj, PRIMITIVE_TRIANGLEFAN );
	ObjEffect_CreateVertex( obj, 30 );
	ascent( let i in 0..30 ){
		let nScale = nSize * [ 0, 1, 0.5, 0, 0.5, 1 ][ i % 6 ];
		let nDeg = Smooth( 0, 360, trunc( ( i + 1 ) / 3 ), 10 );
		ObjEffect_SetVertexUV( obj, i, [ 0, 128 ][ i % 2 ], [ 1, 32 ][ i % 3 == 0 ] );
		ObjEffect_SetVertexXY( obj, i, nScale * cos( nDeg ), nScale * sin( nDeg ) );
		ObjEffect_SetVertexColor( obj, i, SPELL_STAR_ALPHA, nColorR, nColorG, nColorB );
	}
	return obj;
}

//	スターダストレヴァリエ風の星
task ReverieStar( let nAngle, let nSize, let nStartSpeed, let nColorR, let nColorG, let nColorB ){
	let nObjCount = 0;
	let obj = CreateStar( imgEdge, nSize, nColorR, nColorG, nColorB );
	Obj_SetAngle( obj, nAngle );
	Obj_SetPosition( obj, GetPlayerX(), GetPlayerY() );
	while( !Obj_BeDeleted( obj ) && !IsOutPos( Obj_GetX( obj ), Obj_GetY( obj ), 128 ) ){
		let fScale = SlowDown( 0, 1, nObjCount, 20 );
		ObjEffect_SetScale( obj, fScale, fScale );
		StarLoop( obj, nObjCount, 2, nSize, 1.4 );
		Obj_SetSpeed( obj, Accelerate( nStartSpeed, 20, nObjCount, 192 ) );
		yield;
		nObjCount++;
	}
	Obj_Delete( obj );
}

//	星ループ中の処理
function StarLoop( let obj, let nObjCount, let nRotateSpeed, let nCollisionSize, let nDamage ){
	SetIntersectionCircle( Obj_GetX( obj ), Obj_GetY( obj ), nCollisionSize / 2, nDamage, true );
	ObjEffect_SetAngle( obj, 0, 0, nObjCount * nRotateSpeed );
}
