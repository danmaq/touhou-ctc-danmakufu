script_enemy_main{

	// 画像及び効果音ファイル
	#include_function ".\IMAGE\CHAR\index.dnh"
	#include_function ".\index_UserShot.dnh"
	let imgBoss=dotBossSample;
	let imgShot=dotPoisonShot;
	let userShot=shotMedicine;

	// 座標設定
	let cenX=GetCenterX;
	let cenY=GetCenterY;
	let minX=GetClipMinX;
	let maxX=GetClipMaxX;
	let minY=GetClipMinY;
	let maxY=GetClipMaxY;

	// 難易度
	Debug_SetLevel;
	let Lv=GetCommonDataDefault("Level",0);

	// -------------------------------------------------------------------------
	@Initialize{

		// 画像及び効果音をロード
		LoadGraphic(imgBoss);
		LoadGraphic(imgShot);
		LoadUserShotData(userShot);

		// スペルカード設定（カード名、スコア、制限時間、弾削除範囲等）
		SetText("＊符「＊＊＊」");
		SetScore(100000);
		SetTimer(63);
		SetShotAutoDeleteClip(20,20,20,20);
		SetEnemyMarker(true);

		// ボスステータス設定（ライフ、ダメージ率Shot%,Bomb%等）
		SetLife(500);
		SetDamageRate(15,10);

		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		// 当たり判定（A:自弾,B:体当たり）
		SetCollisionA(GetX,GetY,32);
		SetCollisionB(GetX,GetY,24);

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		SetInvincibility(242);
		wait(2);

		// 初期移動
		let fr=180;
		let x=cenX;
		let y=minY+110+rand(-1,1);
		SetMovePosition02(x,y,fr);
		wait(fr);

		let assign=-1;

		loop{

			// 扇状毒霧
			Concentration01(30);
			wait(30);
			WidePoisonShot(assign);
			wait(90);

			// 隠れ弾
			HiddenShot(-1);
			HiddenShot(1);
			wait(80);

			// ランダム隠れ弾
			RandomHiddenShot(assign);
			wait(100);

			// 移動
			move(60);
			wait(60);

			assign*=-1;

		}

	}

	// 隠れ弾 ------------------------------------------------------------------
	task HiddenShot(let assign){

		let gapLength=70;
		let gapAngle=GetGapAngle(GetX,GetY,cenX,cenY)-90*assign;
		let x=GetGapX(GetX,gapLength,gapAngle);
		let y=GetGapY(GetY,gapLength,gapAngle);
		let way=[19,22,30,32];
		let num=8;
		let minSpeed=1.5;
		let maxSpeed=3.5;
		let baseAngle=gapAngle-165*assign;
		let wayAngle=330/(way[Lv]-1)*assign;
		let graphic=2;
		let delay=15;
		let fr=3;

		ascent(let i in 0 .. way[Lv]){
			let angle=baseAngle+wayAngle*i;
			SetShotDirectionType(ABSOLUTE);
			LineShot(x,y,minSpeed,maxSpeed,angle,num,graphic,delay);
			wait(fr);
		}

	}

	// ランダム隠れ弾 ----------------------------------------------------------
	task RandomHiddenShot(let assign){

		let num=[15,30,50,100];
		let way=3;
		let accFr=15;
		let speed=4;
		let maxSpeed=1.6+0.3*Lv;
		let accSpeed=(maxSpeed-speed)/10;
		let baseAngle=-90;
		let wayAngle=360/way;
		let numAngle=wayAngle/3*assign;
		let graphic=1;
		let delay=5;
		let shotFr=4-Lv;

		ascent(let i in 0 .. num[Lv]){
			let baseAngle_=baseAngle+numAngle*i+rand(-numAngle/2,numAngle/2);
			SetShotDirectionType(ABSOLUTE);
			ascent(let j in 0 .. way){
				let angle=baseAngle_+wayAngle*j;
				CreateShotA(0,GetX,GetY,delay);
				SetShotDataA(0,0,speed,angle,0,0,0,graphic);
				SetShotDataA(0,accFr,NULL,angle,0,accSpeed,maxSpeed,graphic);
				FireShot(0);
			}
			wait(shotFr);
		}

	}

	// 扇状毒霧 ----------------------------------------------------------------
	task WidePoisonShot(let assign){

		let way=31;
		let gapLength=10;
		let baseAngle=GetGapAngle(GetX,GetY,cenX,cenY)-90*assign;
		let wayAngle=180/(way-1)*assign;
		let fr=2;

		ascent(let i in 0 .. way){
			let speed=5.2+rand(-2,2);
			let angle=baseAngle+wayAngle*i;
			let x=GetGapX(GetX,gapLength,angle);
			let y=GetGapY(GetY,gapLength,angle);
			PoisonSeed(x,y,speed,angle);
			wait(fr);
		}

	}

	// 毒霧弾 ------------------------------------------------------------------
	task PoisonSeed(
		let x,
		let y,
		let speed,
		let angle
	){

		// 初期設定 ----------------------------------------
		let obj=Obj_Create(OBJ_SHOT);
		let delay=15;

		Obj_SetX(obj,x);
		Obj_SetY(obj,y);
		Obj_SetSpeed(obj,speed);
		Obj_SetAngle(obj,angle);
		ObjShot_SetDelay(obj,delay);
		ObjShot_SetGraphic(obj,BLUE02);
		ObjShot_SetBombResist(obj,true);

		// メイン処理 --------------------------------------
		loop(delay+30){
			if(Obj_BeDeleted(obj)){break;}
			yield;
		}
		if(!Obj_BeDeleted(obj)){
			CreateShotFromScript("PoisonMist",Obj_GetX(obj),Obj_GetY(obj),0,rand(0,360),0,0);
			Obj_Delete(obj);
		}

	}

	// 移動 --------------------------------------------------------------------
	function move(let fr){

		let x=GetX;
		let y=GetY;
		let mx=rand(40,80);
		let my=rand(0,20);
		if(x>=GetPlayerX){
			if(x-mx>=minX+100){mx=-mx;}
		}
		else{
			if(x+mx>=maxX-100){mx=-mx;}
		}
		if(y>=minY+110){my=-my;}
		x+=mx;
		y+=my;
		SetMovePosition02(x,y,fr);

	}

	// 待ち --------------------------------------------------------------------
	function wait(let fr){

		loop(fr){yield;}

	}

	// -------------------------------------------------------------------------
	@Finalize{

		// ロードしたファイルを削除
		DeleteGraphic(imgBoss);
		DeleteGraphic(imgShot);

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// ボス描画
		SetTexture(imgBoss);
		if(GetSpeed==0){SetGraphicRect(1,1,64,64);}
		else if(GetAngle>-90&&GetAngle<=90){SetGraphicRect(192,1,255,64);}
		else {SetGraphicRect(128,1,191,64);}
		SetAlpha(255);
		SetColor(255,255,255);
		DrawGraphic(GetX,GetY);

	}

	// 共通関数読み込み
	#include_function ".\INCLUDE\patternShot.dnh"
	#include_function ".\INCLUDE\library_request.dnh"

}

// 毒霧 ------------------------------------------------------------------------
script_shot PoisonMist{

	// 画像及び効果音ファイル
	#include_function ".\IMAGE\CHAR\DOT\index.dnh"
	let imgShot=dotPoisonShot;

	// 座標設定
	let cenX=GetCenterX;
	let cenY=GetCenterY;
	let minX=GetClipMinX;
	let maxX=GetClipMaxX;
	let minY=GetClipMinY;
	let maxY=GetClipMaxY;

	let scale=0.15;
	let Lv=GetCommonDataDefault("Level",0);

	// -------------------------------------------------------------------------
	@Initialize{

		SetBombResist;
		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		yield;

		// 拡大
		let fr=180;
		let maxScale=0.7+0.1*Lv;
		let addScale=(maxScale-scale)/fr;
		loop(fr){
			scale+=addScale;
			yield;
		}

		// 消滅
		fr=20+20*Lv;
		addScale=-scale/fr;
		loop(fr){
			scale+=addScale;
			yield;
		}
		End;

	}

	// 待ち --------------------------------------------------------------------
	function wait(let fr){

		loop(fr){yield;}

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// 弾描画
		SetTexture(imgShot);
		SetGraphicRect(0,0,256,256);
		SetRenderState(ADD);
		SetColor(255,255,255);
		SetGraphicScale(scale,scale);
		DrawGraphic(GetX,GetY);

	}

}
