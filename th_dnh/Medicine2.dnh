script_enemy_main{

	// 画像及び効果音ファイル
	#include_function ".\IMAGE\CHAR\index.dnh"
	let imgBoss=dotBossSample;

	// 座標設定
	let cenX=GetCenterX;
	let cenY=GetCenterY;
	let minX=GetClipMinX;
	let maxX=GetClipMaxX;
	let minY=GetClipMinY;
	let maxY=GetClipMaxY;

	// 難易度
	Debug_SetLevel;
	let Lv=GetCommonDataDefault("Level",0);

	// -------------------------------------------------------------------------
	@Initialize{

		// 画像及び効果音をロード
		LoadGraphic(imgBoss);

		// スペルカード設定（カード名、スコア、制限時間、弾削除範囲等）
		SetTimer(38);
		SetShotAutoDeleteClip(20,20,20,20);
		SetEnemyMarker(true);

		// ボスステータス設定（ライフ、ダメージ率Shot%,Bomb%等）
		SetLife(2500);
		SetDamageRate(80,40);

		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		// 当たり判定（A:自弾,B:体当たり）
		SetCollisionA(GetX,GetY,32);
		SetCollisionB(GetX,GetY,24);

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		SetInvincibility(182);
		wait(2);

		// 初期移動
		let fr=180;
		let x=cenX;
		let y=minY+120+rand(-1,1);
		SetMovePosition02(x,y,fr);
		wait(fr);

		loop{

			// ワインド直線弾
			WindLineShot;
			wait(150);

			// 移動＋ランダム直線弾
			RandomLineShot(150);
			move(120);
			wait(210);

		}

	}

	// ワインド直線弾 ----------------------------------------------------------
	task WindLineShot{

		let way=36;
		let num=[1,1,2,2];
		let minSpeed=[2.6, 3.2, 2.6, 1.4];
		let maxSpeed=[2.6, 3.2, 4.2, 3.4];
		let wideAngle=95;
		let graphic=PURPLE02;
		let delay=20;
		let fr=2;
		let assign=1;
		if(GetPlayerX<cenX){assign=-1;}

		loop(2){
			let baseAngle=GetGapAngle(GetX,GetY,cenX,maxY)-90*assign;
			let wayAngle=wideAngle/(way-1)*assign;
			ascent(let i in 0 .. way){
				let angle=baseAngle+wayAngle*i;
				SetShotDirectionType(ABSOLUTE);
				LineShot(GetX,GetY,minSpeed[Lv],maxSpeed[Lv],angle,num[Lv],graphic,delay);
				angle=baseAngle-wayAngle*i;
				LineShot(GetX,GetY,minSpeed[Lv],maxSpeed[Lv],angle,num[Lv],graphic,delay);
				wait(fr);
			}
			assign*=-1;
		}

	}

	// ランダム直線弾 ----------------------------------------------------------
	task RandomLineShot(let totalFr){

		let fr=[8,6,4,2];
		let fr_=trunc(fr[Lv]/2);
		let shotNum=trunc(totalFr/fr[Lv]);
		let num=[5,3];
		let minSpeed=[1, 1.4];
		let maxSpeed=[2.4, 2];
		let graphic=[RED12,RED21];
		let delay=15;
		let assign=1;
		if(GetX>cenX){assign=-1;}
		let assignAngle=45;

		ascent(let i in 0 .. shotNum){
			ascent(let j in 0 .. 2){
				let gapLength=rand(0,15);
				let gapAngle=rand(0,360);
				let x=GetGapX(GetX,gapLength,gapAngle);
				let y=GetGapY(GetY,gapLength,gapAngle);
				let angle=rand(90+assignAngle*i*assign,90+assignAngle*(i+1)*assign)+180*j;
				SetShotDirectionType(ABSOLUTE);
				LineShot(x,y,minSpeed[j],maxSpeed[j],angle,num[j],graphic[j],delay);
				wait(fr_);
			}
		}

	}

	// 移動 --------------------------------------------------------------------
	task move(let fr){

		let x=GetX;
		let y=GetY;
		let mx=rand(40,80);
		let my=rand(0,20);
		if(x>=GetPlayerX){
			if(x-mx>=minX+100){mx=-mx;}
		}
		else{
			if(x+mx>=maxX-100){mx=-mx;}
		}
		if(y>=minY+120){my=-my;}
		x+=mx;
		y+=my;
		SetMovePosition02(x,y,fr);

	}

	// 待ち --------------------------------------------------------------------
	function wait(let fr){

		loop(fr){yield;}

	}

	// -------------------------------------------------------------------------
	@Finalize{

		// ロードしたファイルを削除
		DeleteGraphic(imgBoss);

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// ボス描画
		SetTexture(imgBoss);
		if(GetSpeed==0){SetGraphicRect(1,1,64,64);}
		else if(GetAngle>-90&&GetAngle<=90){SetGraphicRect(192,1,255,64);}
		else {SetGraphicRect(128,1,191,64);}
		SetAlpha(255);
		SetColor(255,255,255);
		DrawGraphic(GetX,GetY);

	}

	// 共通関数読み込み
	#include_function ".\INCLUDE\patternShot.dnh"
	#include_function ".\INCLUDE\library_request.dnh"

}
