//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		STAGE 1d
//
//		※ステージライブラリから自動的にインクルードされます
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メンバ変数
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

let m_aszStage1DLoadFileListGraphic = [];
let m_aszStage1DLoadFileListEnemy = [];
let m_aszStage1DLoadFileListSound = [];


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	内部処理
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	初期化
function Stage1DInitialize(){
	SetCommonData("Level",m_nStageLevel);
	SetCommonData("DeleteEnemy",0);
	LoadProgress( m_aszStageDefaultLoadFileListGraphic ~ m_aszStage1DLoadFileListGraphic, m_aszStage1DLoadFileListEnemy, m_aszStageDefaultLoadFileListSE ~ m_aszStage1DLoadFileListSound );
}

//	ここにステージの中身を書く
task Stage1D(){

	_Wait(200);

//part01---------------------------------------------------------------

	let i=0;
	loop(10)
	{
		CreateEnemyFromFile(z02_02,GetClipMinX()-20,GetCenterY()/2,7+0.25*i,60-i*8,1);
		_Wait(10);
		i++;
	}

	_Wait(60);

	let i=0;
	loop(10)
	{
		CreateEnemyFromFile(z02_02,GetClipMaxX()-20,GetCenterY()/2,7+0.25*i,100+i*8,1);
		_Wait(10);
		i++;
	}

	_Wait(200);

//part02---------------------------------------------------------------

	CreateEnemyFromFile(z02_01,GetCenterX()/2,GetClipMinY()-20,5,90,0);
	_Wait([300,250,170,130][m_nStageLevel]);
	CreateEnemyFromFile(z02_01,GetCenterX()*1.5,GetClipMinY()-20,5,90,0);
	_Wait([300,250,170,130][m_nStageLevel]);

	_Wait(200);

//part03---------------------------------------------------------------

	loop(10)
	{
		CreateEnemyFromFile(z02_02,rand(GetClipMinX()+40,GetClipMaxX()-40),GetClipMinY()-20,rand(4,9),90-rand(-10,10),1);
		_Wait(20);
		CreateEnemyFromFile(z02_02,rand(GetClipMinX()+40,GetClipMaxX()-40),GetClipMinY()-20,rand(4,9),90-rand(-10,10),0);
		_Wait(20);
		CreateEnemyFromFile(z02_03,GetCenterX(),GetClipMinY()-20,rand(1,3),rand(45,135),0);
	}
	_Wait(300);

//part04---------------------------------------------------------------

	CreateEnemyFromFile(z02_04,GetCenterX()/2,GetClipMinY()-20,5,90,0);
	CreateEnemyFromFile(z02_04,GetCenterX()*1.5,GetClipMinY()-20,5,90,0);




	_Wait(300);
	SetCommonData("DeleteEnemy",1);
	DeleteEnemyShotToItem(ALL);


///////////////////////////////////////////////////////////////////////
//ここに中ボスが入る
	_Wait(100);
///////////////////////////////////////////////////////////////////////



	SetCommonData("DeleteEnemy",0);
	_Wait(200);

//part05---------------------------------------------------------------


	let i=0;
	loop(8)
	{
		CreateEnemyFromFile(z02_02,GetCenterX/2,GetClipMinY()-20,7+0.6*i,20+i*11,1);
		CreateEnemyFromFile(z02_02,GetCenterX*1.5,GetClipMinY()-20,7+0.6*i,160-i*11,1);
		_Wait(9);
		i++;
	}
	_Wait(150);

	let i=0;
	loop(8)
	{
		CreateEnemyFromFile(z02_02,GetCenterX/2,GetClipMinY()-20,7+0.6*i,97-i*11,1);
		CreateEnemyFromFile(z02_02,GetCenterX*1.5,GetClipMinY()-20,7+0.6*i,93+i*11,1);
		_Wait(9);
		i++;
	}
	_Wait(300);

//part06---------------------------------------------------------------

	loop(2)
	{
		let i=0;
		loop(8)
		{
			CreateEnemyFromFile(z02_02,Smooth(GetClipMaxX()-30,GetClipMinX()+30,i,8),GetClipMinY()-20,rand(3,6),90,int(rand(0,100))%2);
			_Wait(25);
			i++;
		}
		CreateEnemyFromFile(z02_01,GetCenterX()*1.5,GetClipMinY()-20,5,90,0);
		let i=0;
		loop(8)
		{
			CreateEnemyFromFile(z02_02,Smooth(GetClipMinX()+30,GetClipMaxX()-30,i,8),GetClipMinY()-20,rand(3,6),90,int(rand(0,100))%2);
			_Wait(25);
			i++;
		}
		CreateEnemyFromFile(z02_04,GetCenterX()/2,GetClipMinY()-20,5,90,0);
		let i=0;
		loop(8)
		{
			CreateEnemyFromFile(z02_02,Smooth(GetClipMaxX()-30,GetClipMinX()+30,i,8),GetClipMinY()-20,rand(3,6),90,int(rand(0,100))%2);
			_Wait(25);
			i++;
		}
	}

	_Wait(300);

//part07---------------------------------------------------------------

	let i=0;
	loop(3)
	{
		CreateEnemyFromFile(z02_03,Smooth(GetClipMinX()+30,GetCenterX-22,i,3),GetClipMinY()-20,Smooth(6,1,i,3),90,0);
		CreateEnemyFromFile(z02_03,Smooth(GetClipMaxX()-30,GetCenterX+22,i,3),GetClipMinY()-20,Smooth(6,1,i,3),90,0);
		i++;
	}
	CreateEnemyFromFile(z02_04,GetCenterX()/2,GetClipMinY()-20,5,90,0);
	_Wait(200);

	let i=0;
	loop(3)
	{
		CreateEnemyFromFile(z02_03,Smooth(GetClipMinX()+30,GetCenterX-22,i,3),GetClipMinY()-20,Smooth(6,1,i,3),90,0);
		CreateEnemyFromFile(z02_03,Smooth(GetClipMaxX()-30,GetCenterX+22,i,3),GetClipMinY()-20,Smooth(6,1,i,3),90,0);
		i++;
	}
	CreateEnemyFromFile(z02_04,GetCenterX()*1.5,GetClipMinY()-20,5,90,0);

	_Wait(350);

	SetCommonData("DeleteEnemy",1);
	_Wait(10);
	SetCommonData("DeleteEnemy",0);
	DeleteEnemyShotToItem(ALL);

///////////////////////////////////////////////////////////////////////
//ここにボスが入る
	_Wait(100);
///////////////////////////////////////////////////////////////////////



//ショットキーを押すと次のステージへ////////////////
	while(GetKeyState(VK_SHOT) != KEY_PUSH)
	{
		yield;
	}
////////////////////////////////////////////////////


	Stage2();
}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メイン部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	@MainLoop()にて毎フレーム呼ばれる部分
function Stage1DMainLoop(){
}

//	@BackGround()にて毎回呼ばれる部分
function Stage1DDrawBackGround(){
}

//	@DrawBottomObject()にて毎回呼ばれる部分
function Stage1DDrawBottomObject(){
}

//	@DrawTopObject()にて毎回呼ばれる部分
function Stage1DDrawTopObject(){
}
