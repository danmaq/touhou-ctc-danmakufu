//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		STAGE 1c
//
//		※ステージライブラリから自動的にインクルードされます
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メンバ変数
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

let m_aszStage1CLoadFileListGraphic = [];
let m_aszStage1CLoadFileListEnemy = [];
let m_aszStage1CLoadFileListSound = [];


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	内部処理
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	初期化
function Stage1CInitialize(){
	SetCommonData("Level",m_nStageLevel);
	SetCommonData("DeleteEnemy",0);
	LoadProgress( m_aszStageDefaultLoadFileListGraphic ~ m_aszStage1CLoadFileListGraphic, m_aszStage1CLoadFileListEnemy, m_aszStageDefaultLoadFileListSE ~ m_aszStage1CLoadFileListSound );
}

//	ここにステージの中身を書く
task Stage1C(){

	_Wait(200);

//---------------------------------------------------------------

	loop(2)
	{
		let i=0;
		loop(7)
		{
			CreateEnemyFromFile(z_s_07,Smooth( GetClipMinX()+40,GetClipMaxX()-40,i,7 ),GetClipMinY()-20,0,0,GetCenterX/3);
			_Wait(20);
			i++;
		}
		_Wait(150);
		let i=0;
		loop(7)
		{
			CreateEnemyFromFile(z_s_07,Smooth( GetClipMaxX()-40,GetClipMinX()+40,i,7 ),GetClipMinY()-20,0,0,GetCenterX()+GetCenterX/3*2);
			_Wait(20);
			i++;
		}
		_Wait(150);
	}

//---------------------------------------------------------------

	CreateEnemyFromFile(z_g_11,GetCenterX(),GetClipMinY()-20,6.5,90,0);

	_Wait(400);

//---------------------------------------------------------------

	loop(5)
	{
		CreateEnemyFromFile(z_g_12,GetCenterX()/3+rand(-20,20),GetClipMinY()-20,5,90,[1,0][rand(0,100)<50]);
		_Wait(70);
		CreateEnemyFromFile(z_g_12,GetCenterX()+GetCenterX()/3*2+rand(-20,20),GetClipMinY()-20,5,90,[1,0][rand(0,100)<50]);
	}

	_Wait(400);

	DeleteEnemyShotToItem(ALL);
	SetCommonData("DeleteEnemy",1);


///////////////////////////////////////////////////////////////////////
//ここに中ボスが入る
	_Wait(100);
///////////////////////////////////////////////////////////////////////

	SetCommonData("DeleteEnemy",0);
	_Wait(200);

	loop(2)
	{
		loop(10)
		{
			CreateEnemyFromFile(z_s_07,rand(GetClipMinX()+30,GetClipMaxX()-30),GetClipMinY()-20,0,0,rand(GetClipMinX()+30,GetClipMaxX()-30));
			_Wait(10);
		}
		_Wait(150);
	}
		_Wait(150);

//---------------------------------------------------------------

	loop(5)
	{
		CreateEnemyFromFile(z_g_12,rand(GetClipMinX()+30,GetClipMaxX()-30),GetClipMinY()-20,5,90,0);
	}
	_Wait(100);

//---------------------------------------------------------------

	CreateEnemyFromFile(z_g_11,GetCenterX()/2,GetClipMinY()-20,6.5,90,0);
	CreateEnemyFromFile(z_g_11,GetCenterX()*1.5,GetClipMinY()-20,6.5,90,0);

	_Wait(650);


	DeleteEnemyShotToItem(ALL);
	SetCommonData("DeleteEnemy",1);
	_Wait(10);
	SetCommonData("DeleteEnemy",0);


///////////////////////////////////////////////////////////////////////
//ここにボスが入る
	_Wait(100);
///////////////////////////////////////////////////////////////////////



//ショットキーを押すと次のステージへ////////////////
	while(GetKeyState(VK_SHOT) != KEY_PUSH)
	{
		yield;
	}
////////////////////////////////////////////////////

	Stage2();
}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メイン部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	@MainLoop()にて毎フレーム呼ばれる部分
function Stage1CMainLoop(){
}

//	@BackGround()にて毎回呼ばれる部分
function Stage1CDrawBackGround(){
}

//	@DrawBottomObject()にて毎回呼ばれる部分
function Stage1CDrawBottomObject(){
}

//	@DrawTopObject()にて毎回呼ばれる部分
function Stage1CDrawTopObject(){
}
