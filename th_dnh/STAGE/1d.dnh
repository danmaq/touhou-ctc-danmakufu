//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//		STAGE 1d
//
//		※ステージライブラリから自動的にインクルードされます
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メンバ変数
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

let m_aszStage1DLoadFileListGraphic = [];
let m_aszStage1DLoadFileListEnemy = [];
let m_aszStage1DLoadFileListSound = [];


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	内部処理
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	初期化
function Stage1DInitialize(){
	SetCommonData("Level",m_nStageLevel);
	SetCommonData("DeleteEnemy",0);
	LoadProgress( m_aszStageDefaultLoadFileListGraphic ~ m_aszStage1DLoadFileListGraphic, m_aszStage1DLoadFileListEnemy, m_aszStageDefaultLoadFileListSE ~ m_aszStage1DLoadFileListSound );
}

//	ここにステージの中身を書く
task Stage1D(){

	_Wait(200);

//---------------------------------------------------------------

	loop(2)
	{
		loop(8)
		{
			CreateEnemyFromFile(z_o_03,GetCenterX()*1.5+rand(-50,+50),GetClipMinY()-20,rand(2,[6,8,10,13][m_nStageLevel]),90+rand(0,30),0);
			_Wait(16);
		}
		_Wait(200);
		loop(8)
		{
			CreateEnemyFromFile(z_o_03,GetCenterX()/2+rand(-50,+50),GetClipMinY()-20,rand(2,[6,8,10,13][m_nStageLevel]),90-rand(0,30),0);
			_Wait(16);
		}
		_Wait(200);
	}
	_Wait(100);

//---------------------------------------------------------------

	CreateEnemyFromFile(z_m_13,GetCenterX(),GetClipMinY()-20,5,90,0);

	_Wait(400);

//---------------------------------------------------------------




	_Wait(500);
	DeleteEnemyShotToItem(ALL);
	SetCommonData("DeleteEnemy",1);

///////////////////////////////////////////////////////////////////////
//ここに中ボスが入る
	_Wait(100);
///////////////////////////////////////////////////////////////////////

	SetCommonData("DeleteEnemy",0);
	_Wait(200);





	SetCommonData("DeleteEnemy",1);
	yield;
	DeleteEnemyShotToItem(ALL);
	SetCommonData("DeleteEnemy",0);


///////////////////////////////////////////////////////////////////////
//ここにボスが入る
	_Wait(100);
///////////////////////////////////////////////////////////////////////



//ショットキーを押すと次のステージへ////////////////
	while(GetKeyState(VK_SHOT) != KEY_PUSH)
	{
		yield;
	}
////////////////////////////////////////////////////

	Stage2();
}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メイン部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	@MainLoop()にて毎フレーム呼ばれる部分
function Stage1DMainLoop(){
}

//	@BackGround()にて毎回呼ばれる部分
function Stage1DDrawBackGround(){
}

//	@DrawBottomObject()にて毎回呼ばれる部分
function Stage1DDrawBottomObject(){
}

//	@DrawTopObject()にて毎回呼ばれる部分
function Stage1DDrawTopObject(){
}
