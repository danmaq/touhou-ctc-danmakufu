script_enemy_main{

	// 画像及び効果音ファイル
	#include_function ".\IMAGE\CHAR\index.dnh"
	let imgBoss=dotBossSample;
	let imgEnemy=dotCircle6s;

	// 座標設定
	let cenX=GetCenterX;
	let cenY=GetCenterY;
	let minX=GetClipMinX;
	let maxX=GetClipMaxX;
	let minY=GetClipMinY;
	let maxY=GetClipMaxY;

	// 難易度
	Debug_SetLevel;
	let Lv=GetCommonDataDefault("Level",0);

	// -------------------------------------------------------------------------
	@Initialize{

		// 画像及び効果音をロード
		LoadGraphic(imgBoss);
		LoadGraphic(imgEnemy);

		// スペルカード設定（カード名、スコア、制限時間、弾削除範囲等）
		SetText("＊符「＊＊＊」");
		SetScore(100000);
		SetTimer(64);
		SetShotAutoDeleteClip(20,40,20,20);
		SetEnemyMarker(true);

		// ボスステータス設定（ライフ、ダメージ率Shot%,Bomb%等）
		SetLife(500);
		SetDamageRate(15,10);

		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		// 当たり判定（A:自弾,B:体当たり）
		SetCollisionA(GetX,GetY,32);
		SetCollisionB(GetX,GetY,24);

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		SetInvincibility(242);
		wait(2);

		// 初期移動
		let fr=120;
		let x=cenX;
		let y=minY+160;
		SetMovePosition02(x,y,fr);
		wait(fr);

		// 発動
		Concentration01(120);
		wait(120);

		let turn=0;

		loop{

			// 使い魔召喚
			SummonEnemy(turn);
			wait(240);

			turn++;

		}

	}

	// 使い魔召喚 --------------------------------------------------------------
	task SummonEnemy(let turn){

		let way=3+turn%2;
		let speed=2;
		let wayAngle=40;
		let baseAngle=GetAngleToPlayer-180-wayAngle*(way-1)/2;

		ascent(let i in 0 .. way){
			let angle=baseAngle+wayAngle*i;
			CreateEnemyFromScript("Enemy",GetX,GetY,speed,angle,0);
		}

	}

	// 待ち --------------------------------------------------------------------
	function wait(let fr){

		loop(fr){yield;}

	}

	// -------------------------------------------------------------------------
	@Finalize{

		// ロードしたファイルを削除
		DeleteGraphic(imgBoss);
		DeleteGraphic(imgEnemy);

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// ボス描画
		SetTexture(imgBoss);
		if(GetSpeed==0){SetGraphicRect(1,1,64,64);}
		else if(GetAngle>-90&&GetAngle<=90){SetGraphicRect(192,1,255,64);}
		else {SetGraphicRect(128,1,191,64);}
		SetAlpha(255);
		SetColor(255,255,255);
		DrawGraphic(GetX,GetY);

	}

	// 共通関数読み込み
	#include_function ".\INCLUDE\patternShot.dnh"
	#include_function ".\INCLUDE\library_request.dnh"

}

// 使い魔 ----------------------------------------------------------------------
script_enemy Enemy{

	// 画像及び効果音ファイル
	#include_function ".\IMAGE\CHAR\DOT\index.dnh"
	let imgEnemy=dotCircle6s;

	// 座標設定
	let cenX=GetCenterX;
	let cenY=GetCenterY;
	let minX=GetClipMinX;
	let maxX=GetClipMaxX;
	let minY=GetClipMinY;
	let maxY=GetClipMaxY;

	let Lv=GetCommonDataDefault("Level",0);
	let drawAngle=0;

	// -------------------------------------------------------------------------
	@Initialize{

		// ステータス設定（ライフ、自ダメ率Shot%,Bomb%,親ダメ率Shot%,Bomb%等）
		SetLife(50);
		SetDamageRateExDelay(30,100,50,100,100);

		// 光
		Light;

		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		// 回転
		drawAngle+=2;

		// 当たり判定（A:自弾,B:体当たり）
		if(GetKeyState(VK_SLOWMOVE)==KEY_PULL||GetKeyState(VK_SLOWMOVE)==KEY_FREE){
			SetCollisionA(GetX,GetY,24);
			SetCollisionB(GetX,GetY,18);
		}

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		SetInvincibility(31);
		yield;

		// 後方弾
		TailShot;
		wait(210);

		// 消滅
		VanishEnemy;

	}

	// 後方弾 ------------------------------------------------------------------
	task TailShot{

		let way=3;
		let num=[9,11,13,20];
		let speed=[1.8,1.2,1.8];
		let wayAngle=15;
		let baseAngle=GetAngle+180-wayAngle*(way-1)/2;
		let tailAngle=0;
		let accTailAngle=60/(num[Lv]-1);
		let delay=5;
		let graphic=RED11;
		let baseGB=255;
		let numGB=(127-255)/(num[Lv]-1);
		let numFr=11-2*Lv;

		ascent(let i in 0 .. num[Lv]){
			let GB=baseGB+numGB*i;
			SetShotColor(255,GB,GB);
			ascent(let j in 0 .. way){
				let angle=baseAngle+wayAngle*j+tailAngle;
				SetShotDirectionType(ABSOLUTE);
				CreateShot01(GetX,GetY,speed[j],angle,graphic,delay);
				angle=baseAngle+wayAngle*j-tailAngle;
				CreateShot01(GetX,GetY,speed[j],angle,graphic,delay);
			}
			SetShotColor(255,255,255);
			wait(numFr);
			tailAngle+=accTailAngle;
		}

	}

	// 光 ----------------------------------------------------------------------
	task Light{

		loop{
			if(GetKeyState(VK_SLOWMOVE)==KEY_PULL||GetKeyState(VK_SLOWMOVE)==KEY_FREE){
				Light_(WHITE01);
			}
			wait(3);
		}

	}

	task Light_(let graphic){

		// 初期設定 ----------------------------------------
		let obj=Obj_Create(OBJ_SHOT);
		let delay=15;

		Obj_SetX(obj,GetX);
		Obj_SetY(obj,GetY);
		ObjShot_SetDelay(obj,delay);
		ObjShot_SetGraphic(obj,graphic);
		Obj_SetAlpha(obj,0);
		Obj_SetCollisionToPlayer(obj,false);
		ObjShot_SetBombResist(obj,true);

		// メイン処理 --------------------------------------
		loop(delay){
			if(GetKeyState(VK_SLOWMOVE)==KEY_PUSH||GetKeyState(VK_SLOWMOVE)==KEY_HOLD){
				break;
			}
			yield;
		}
		Obj_Delete(obj);

	}

	// 待ち --------------------------------------------------------------------
	function wait(let fr){

		loop(fr){yield;}

	}

	// -------------------------------------------------------------------------
	@Finalize{

		if(GetLife<=0){
			DeleteEnemyShotToItemInCircle(ALL,GetX,GetY,40);
		}

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// 本体描画
		SetTexture(imgEnemy);
		SetGraphicRect(64,0,128,64);
		if(GetKeyState(VK_SLOWMOVE)==KEY_PUSH||GetKeyState(VK_SLOWMOVE)==KEY_HOLD){
			SetAlpha(127);
		}
		else{
			SetAlpha(255);
		}
		SetColor(255,255,255);
		SetGraphicScale(0.8,0.8);
		SetGraphicAngle(0,0,drawAngle);
		DrawGraphic(GetX,GetY);

	}

	// 共通関数読み込み
	#include_function ".\INCLUDE\patternShot.dnh"
	#include_function ".\INCLUDE\library_request.dnh"

}
