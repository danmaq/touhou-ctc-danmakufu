#東方弾幕風
#Title[Remilia - スペルカード2]
#Text[ステージ2A ボス
レミリア・スカーレット

下記以外のスタート＝Easy
スキップ＋スタート＝Normal
ユーザー＋スタート＝Hard
ｽｷｯﾌﾟ＋ﾕｰｻﾞｰ＋ｽﾀｰﾄ＝Lunatic]
#Image[]
#BackGround[Default]
#Player[FREE]
#ScriptVersion[2]

script_enemy_main{

	// 共通関数読み込み
	#include_function ".\INCLUDE\Enemy.dnh"

	// 画像及び効果音ファイル
	let imgBoss=dotBossRemilia;
	let imgShadow=dotCircle6s;
	let seHidden=seShadowHidden;
	let seSudden=seShadowSudden;

	// 難易度
	Debug_SetLevel;
	let Lv=GetCommonDataDefault("Level",0);

	// -------------------------------------------------------------------------
	@Initialize{

		// 画像及び効果音をロード
		LoadGraphic(imgBoss);
		LoadGraphic(imgShadow);
		LoadSE(seHidden);
		LoadSE(seSudden);

		// スペルカード設定（カード名、スコア、制限時間、弾削除範囲等）
		SetText("＊符「＊＊＊」");
		SetScore(100000);
		SetTimer(64);
		SetShotAutoDeleteClip(20,40,20,20);
		SetEnemyMarker(true);

		// ボスステータス設定（ライフ、ダメージ率等）
		SetLife(500);
		SetDamageRate(15,10);

		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		// 当たり判定（自弾,体当たり）
		Collision(32,24);

		// カウンタ加算
		m_nCount++;

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		SetInvincibility(242);
		_Wait(2);

		// 初期移動
		let fr=120;
		let x=cenX;
		let y=minY+160;
		SetMovePosition02(x,y,fr);
		_Wait(fr);

		// 発動
		Concentration01(120);
		_Wait(120);

		let turn=0;

		loop{

			// 使い魔召喚
			SummonShadow(turn);
			_Wait(240);

			turn++;

		}

	}

	// 使い魔召喚 --------------------------------------------------------------
	task SummonShadow(let turn){

		let way=3+turn%2;
		let speed=2;
		let wayAngle=40;
		let baseAngle=GetAngleToPlayer-180-wayAngle*(way-1)/2;

		ascent(let i in 0 .. way){
			let angle=baseAngle+wayAngle*i;
			CreateEnemyFromScript("Shadow",GetX,GetY,speed,angle,0);
		}

	}

	// -------------------------------------------------------------------------
	@Finalize{

		// アイテム放出
		DropItem(16,80);

		// ロードしたファイルを削除
		DeleteGraphic(imgBoss);
		DeleteGraphic(imgShadow);
		DeleteSE(seHidden);
		DeleteSE(seSudden);

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// ボス描画
		let x=0;
		let y=0;
		let sLength=128;
		SetAlpha(255);
		SetColor(255,255,255);
		_DrawChrRectSqr(imgBoss,GetX,GetY,x,y,sLength);

	}

}

// 使い魔 ----------------------------------------------------------------------
script_enemy Shadow{

	// 共通関数読み込み
	#include_function ".\INCLUDE\Shadow.dnh"

	// 画像及び効果音ファイル
	let imgShadow=dotCircle6s;
	let seHidden=seShadowHidden;
	let seSudden=seShadowSudden;

	let Lv=GetCommonDataDefault("Level",0);

	// -------------------------------------------------------------------------
	@Initialize{

		// ステータス設定（ライフ、ダメージ率等）
		SetLife(50);
		SetDamageRateExDelay(30,100,50,100,100);

		// 実体化時の光
		LightShadow;

		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		// 画面外で消滅
		GoneEx(40);

		// 当たり判定（自弾,体当たり）
		if(!m_bHidden){Collision(24,18);}

		// 使い魔基本処理
		BehaviorShadow(seHidden,seSudden);

		// カウンタ加算
		m_nCount++;

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		yield;

		// 後方弾
		TailShot;

	}

	// 後方弾 ------------------------------------------------------------------
	task TailShot{

		let way=3;
		let num=[9,11,13,20];
		let speed=[1.8,1.2,1.8];
		let wayAngle=15;
		let baseAngle=GetAngle+180-wayAngle*(way-1)/2;
		let tailAngle=0;
		let accTailAngle=60/(num[Lv]-1);
		let delay=5;
		let graphic=RED11;
		let baseGB=255;
		let numGB=(127-255)/(num[Lv]-1);
		let numFr=11-2*Lv;

		ascent(let i in 0 .. num[Lv]){
			let GB=baseGB+numGB*i;
			SetShotColor(255,GB,GB);
			ascent(let j in 0 .. way){
				let angle=baseAngle+wayAngle*j+tailAngle;
				SetShotDirectionType(ABSOLUTE);
				CreateShot01(GetX,GetY,speed[j],angle,graphic,delay);
				angle=baseAngle+wayAngle*j-tailAngle;
				CreateShot01(GetX,GetY,speed[j],angle,graphic,delay);
			}
			SetShotColor(255,255,255);
			_Wait(numFr);
			tailAngle+=accTailAngle;
		}

	}

	// -------------------------------------------------------------------------
	@Finalize{

		// 弾消し
		DestructShadow(40);

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// 本体描画
		let x=64;
		let y=0;
		let sLength=64;
		let angle=2*m_nCount;
		let scale=0.8;
		SetColor(255,255,255);
		DrawShadow(imgShadow,x,y,sLength,angle,scale,scale);

	}

}
