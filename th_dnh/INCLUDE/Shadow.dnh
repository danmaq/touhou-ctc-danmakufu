//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	使い魔スクリプト専用インクルードライブラリ
//
//		※使い魔スクリプト以外からは使用出来ません。
//			それ以外からはインクルードしないでください。
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	下位ライブラリをインクルード
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////
#include_function ".\INCLUDE\EnemyShadow.dnh"


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	定数
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

let SHADOW_TIMELAG = 8;	//	切り替わりのタイムラグ


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メンバ変数
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

let m_nChangeTime = 0;	//	最後に切り替わった時間
let m_bHidden = false;	//	隠蔽中か否か


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	判定関数
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	タイムラグ時間終了したか否かを返す
function IsElapsedTimeLag(){ return m_nCount - m_nChangeTime > SHADOW_TIMELAG; }


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	未分類
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	死亡時に特定半径の弾を消す
function DestructShadow( let fRadius ){
	if( !BeVanished() ){ DeleteEnemyShotToItemInCircle( SHOT, GetX(), GetY(), fRadius ); }
	DeleteEnemyShotToItemInCircle( ALL, GetX(), GetY(), 0 );
}

//	基本処理
//	※@MainLoopの最後にm_nCount++;と共に毎回呼び出すこと
function BehaviorShadow( let szSEHiddenFile, let szSESuddenFile ){
	alternative( GetKeyState( VK_SLOWMOVE ) )
	case( KEY_PUSH ){
		PlaySE( szSEHiddenFile );
		m_nChangeTime = m_nCount;
	}
	case( KEY_PULL ){
		PlaySE( szSESuddenFile );
		m_nChangeTime = m_nCount;
	}
	case( KEY_HOLD ){ if( IsElapsedTimeLag() ){ m_bHidden = true; } }
	case( KEY_FREE ){ if( IsElapsedTimeLag() ){ m_bHidden = false; } }
}

//　出現時隠蔽チェック
//　※@Initializeで1回呼び出すこと、但しLightShadowを使う場合は不要
function InitialBehaviorShadow{
	if( GetKeyState( VK_SLOWMOVE ) == KEY_HOLD ){ m_bHidden = true; }
}

//　実体化時の光 (※注 task)
//　※@Initializeで1回呼び出すこと、基本処理を実施していること
task LightShadow{
	let call = 3;		//　何フレーム毎に光が出るか（小さい程光が濃くなる）
	let delay = 15;		//　1つの光が最大何フレーム残るか（大きい程光が大きくなる）
	InitialBehaviorShadow;
	loop{
		if( !m_bHidden ){ _LightShadow; }
		loop( call ){ yield; }
	}
	task _LightShadow{
		let obj = SetShotObject( GetX, GetY, 500, 0, WHITE05, delay );
		Obj_SetAlpha( obj, 0 );
		Obj_SetCollisionToPlayer( obj, false );
		ObjShot_SetBombResist( obj, true );
		ObjShot_ToItem( obj, false );
		loop( delay ){
			if( m_bHidden ){ break; }
			yield;
		}
		Obj_Delete( obj );
	}
}

//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	絵画関数
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////
//　使い魔を絵画する
//　※テクスチャ切り出し範囲が正方形であること、基本処理を実施していること
function DrawShadow( let szTexFile, let srcx, let srcy, let sLength, let angle, let scaleH, let scaleS ){
	if( m_bHidden ){
		SetAlpha( 127 );
		SetGraphicScale( scaleH, scaleH );
	}
	else{
		SetAlpha( 255 );
		SetGraphicScale( scaleS, scaleS );
	}
	SetGraphicAngle( 0, 0, angle );
	_DrawChrRectSqr( szTexFile, GetX, GetY, srcx, srcy, sLength );
}

///////////////////////////////////
//追加060214　使い魔のdrowloop
///////////////////////////////////
function _DrowShadow( let FileName, let now, let x, let y, let Dxy){
	SetTexture(FileName);
	SetGraphicRect(x,y,x+Dxy,y+Dxy);
	if(GetKeyState(VK_SLOWMOVE)==KEY_PUSH||GetKeyState(VK_SLOWMOVE)==KEY_HOLD){
		SetAlpha(127);
		SetGraphicScale(0.8,0.8);
	}
	else{
		SetAlpha(255);
		SetGraphicScale(0.5,0.5);
	}
	SetGraphicAngle(0,0,now);
	DrawGraphic(GetX,GetY);
}

function DrowShadowEasy(let now){
	_DrowShadow( dotCircle6s,now,0,0,64);
}

//実体化時の光
function LightOfShadow(let now){
	if(GetKeyState(VK_SLOWMOVE)==KEY_FREE)
	{
		Collision( 16,12 );
		if(int(now/3)==now/3)
		{
			CreateShotA(0,GetX(),GetY(),10);
			SetShotDataA(0,0,0,0,0,0,0,WHITE05);
			SetShotKillTime(0,0);
			FireShot(0);
		}
	}
}

