//////////////////////////////////////////////////////////////////////
//====================================================================
//
//	全スクリプトで使用できる共通ライブラリ
//
//		※各上位ライブラリから間接的にインクルードされます。
//			直接インクルードすることはありません。
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	メンバ変数
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////
//	体験版製品版完全版ではfalseにすること
let m_bDebug = true;			//	デバッグモード


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ロード/セーブ関連
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	夢終劇ローダを介さず弾幕風標準の機能で直接複数画像を一気に読み出す
function LoadGraphicList( let aszFileList ){ ascent( let i in 0..length( aszFileList ) ){ LoadGraphic( aszFileList[ i ] ); } }


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	算術関数
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	expr1をexpr2単位で切り捨てる
function truncEx( let expr1, let expr2 ){ return trunc( expr1 / expr2 ) * expr2; }

//	expr1とexpr2を比較し大きい方を返す
function Max( let expr1, let expr2 ){ return [ expr2, expr1 ][ expr1 > expr2 ]; }

//	expr1とexpr2を比較し小さい方を返す
function Min( let expr1, let expr2 ){ return [ expr1, expr2 ][ expr1 > expr2 ]; }

//	(0,0)-(x,0)-(x,y)頂点を持った直角三角形の斜辺の長さを算出する
function Hypot( let x, let y ){	return ( ( x ^ 2 ) + ( y ^ 2 ) ) ^ 0.5; }

//	exprをnBitビット分だけビットシフトした値を返す
function Shift( let expr, let nBit ){ return expr * 2 ^ nBit; }

//	exprをリミットの範囲内に補正した値を返す
function MinMax( let expr, let limit1, let limit2 ){ return Max( Min( expr, Max( limit1, limit2 ) ), Min( limit1, limit2 ) ); }

//	exprをリミットの範囲内に補正した値を返す(範囲から外れた場合逆の限界値にループする)
//	limit1 <= expr < limit2 なので注意
function MinMaxLoop( let expr, let limit1, let limit2 ){
	if( limit1 > limit2 ){
		let limittemp = limit1;
		limit1 = limit2;
		limit2 = limittemp;
	}
	while( expr <= limit1 ){ expr += limit2; }
	while( expr >= limit2 ){ expr = ( expr - limit1 ) % limit2; }
	return expr;
}

//	expr1とexpr2の距離がlen以下か否かを返す
function Near( let expr1, let expr2, let len ){ return absolute( expr1 - expr2 ) < len; }


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	内分カウンタ
//	0〜nowの時間の間start〜endの中間値を返します
//	例)	let r = Smooth( -5, 10, n, 50 );	//	等速変化
//		n == 0 … r == -5
//		n == 10 … r == -2
//		n == 20 … r == 1
//		n == 30 … r == 4
//		n == 40 … r == 7
//		n == 50 … r == 10
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	等速変化
function Smooth( let start, let end, let now, let limit ){
	if( now >= limit ){ return end; }
	if( now <= 0 ){ return start; }
	return start + ( end - start ) * MinMax( now, 0, limit ) / limit;
}

//	加速変化
function Accelerate( let start, let end, let now, let limit ){
	if( now >= limit ){ return end; }
	if( now <= 0 ){ return start; }
	return start + ( end - start ) * Shift( ( now + 1 ) * now, -1 ) / Shift( ( limit + 1 ) * limit, -1 );
}

//	減速変化
function SlowDown( let start, let end, let now, let limit ){
	if( now >= limit ){ return end; }
	if( now <= 0 ){ return start; }
	return start + ( end - start ) * Shift( ( Shift( limit, 1 ) - now + 1 ) * now, -1 ) / Shift( ( limit + 1 ) * limit, -1 );
}

//	スプラインもどき(減速→加速)
function SplineFakeFSF( let start, let end, let now, let limit ){
	if( now >= limit ){ return end; }
	if( now <= 0 ){ return start; }
	let center = start + ( end - start ) / 2;
	return [ SlowDown( start, center, now, limit / 2 ), Accelerate( center, end, now, limit ) ][ now > limit / 2 ];
}

//	スプラインもどき(加速→減速)
function SplineFakeSFS( let start, let end, let now, let limit ){
	if( now >= limit ){ return end; }
	if( now <= 0 ){ return start; }
	let center = start + ( end - start ) / 2;
	let limithalf = limit / 2;
	return [ Accelerate( start, center, now, limithalf ), SlowDown( center, end, now - limithalf, limithalf ) ][ now >= limithalf ];
}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	配列操作
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	指定要素の配列を作り、指定値で埋める
function CreateArray( let nSize, let expr ){
	if( nSize <= 0 ){ return; }
	let array = [];
	ascent( let i in 0..nSize ){ array = array ~ [ expr ]; }
	return array;
}

//	配列array内を数値charで検索し、要素番号を返す
function SearchArray( let array, let char ){
	let total = length( array );
	let pos = 0;
	while( pos < total && array[ pos ] != char ){ pos++; }
	return pos;
}

//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	文字列操作
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

//	floatな文字列をint化
function StringToStringInt( let str ){ return str[ 0 .. SearchArray( str, '.' ) ]; }

//	数値を整数化した上で文字列に変換する
function ToStringInt( let num ){ return StringToStringInt( ToString( num ) ); }

//	数字の文字を数値化する
function CharToInteger( let char ){ return char - 48; }

//	数字の文字列を数値化する
function StringToInteger( let str ){
	let strint = StringToStringInt( str );
	let res = 0;
	ascent( let grade in 0..length( strint ) ){ res += CharToInteger( strint[ grade ] ) * 10 ^ grade; }
	return res;
}
