script_enemy_main{

	// 画像及び効果音ファイル
	#include_function ".\IMAGE\CHAR\index.dnh"
	let imgBoss=dotBossSample;

	// 座標設定
	let cenX=GetCenterX;
	let cenY=GetCenterY;
	let minX=GetClipMinX;
	let maxX=GetClipMaxX;
	let minY=GetClipMinY;
	let maxY=GetClipMaxY;

	// 難易度
	Debug_SetLevel;
	let Lv=GetCommonDataDefault("Level",0);

	let warpSt=-1;
	let warpFr=0;
	let maxWarpFr=16;

	// -------------------------------------------------------------------------
	@Initialize{

		// 画像及び効果音をロード
		LoadGraphic(imgBoss);

		// スペルカード設定（カード名、スコア、制限時間、弾削除範囲等）
		SetTimer(39);
		SetShotAutoDeleteClip(64,64,64,20);
		SetEnemyMarker(true);

		// ボスステータス設定（ライフ、ダメージ率Shot%,Bomb%等）
		SetLife(2000);
		SetDamageRate(100,50);
		SetX(cenX);
		SetY(maxY+50);

		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		// 当たり判定（A:自弾,B:体当たり）
		if(warpSt!=2){
			SetCollisionA(GetX,GetY,32);
			if(warpSt!=-1){SetCollisionB(GetX,GetY,24);}
		}

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		SetInvincibility(302);
		wait(2);

		// 初期移動＋対称弾
		SymmetryShot;
		wait(240);
		warpSt=0;

		// 発動
		ExplosionBoss;
		wait(60);

		let assign=1;

		loop{

			// 花弾
			FlowerShot(assign);
			assign*=-1;
			wait(90);

			// ワープ移動
			let area=1;
			if(GetPlayerX>GetX){area=2;}
			warp(maxWarpFr+40,area);
			wait(90);

			// 花弾
			FlowerShot(assign);
			assign*=-1;
			wait(90);

			// ワープ移動
			area=3-area;
			warp(maxWarpFr+40,area);
			wait(90);

			// 花弾
			FlowerShot(assign);
			assign*=-1;
			wait(90);

			// ワープ移動
			area=0;
			warp(maxWarpFr+40,area);
			wait(90);

		}

	}

	// 花弾 --------------------------------------------------------------------
	task FlowerShot(assign){

		let num=[3,5,9,12];
		let way_=8;
		let way=way_*5;
		let baseSpeed0=0.8;
		let maxSpeed0=2.4+0.6*Lv;
		let numSpeed0=(maxSpeed0-baseSpeed0)/(num[Lv]-1);
		let speed1=1.4+0.2*Lv;
		let baseAngle=rand(0,360);
		let numAngle=8*assign;
		let wayAngle=360/way*assign;
		let graphic=[PURPLE21,AQUA12];
		let delay=15;
		let fr1=90;

		SetShotDirectionType(ABSOLUTE);
		ascent(let i in 0 .. num[Lv]){
			let speed0=baseSpeed0+numSpeed0*i;
			let accSpeed0=-speed0/fr1;
			ascent(let j in 0 .. way){
				let angle=baseAngle+numAngle*i+wayAngle*j;
				CreateShotA(0,GetX,GetY,delay);
				if(j%way_<way_/2){
					SetShotDataA(0,0,speed0,angle,0,accSpeed0,0,graphic[0]);
					SetShotDataA(0,fr1,speed1,angle,0,0,0,graphic[0]);
				}
				else{
					SetShotDataA(0,0,speed0,angle,0,accSpeed0,0,graphic[1]);
					SetShotDataA(0,fr1,speed1,angle+90*assign,0,0,0,graphic[1]);
				}
				FireShot(0);
			}
		}

	}

	// ワープ移動 --------------------------------------------------------------
	task warp(
		let fr,
		let area
	){

		// 消滅
		warpSt=1;
		warpFr=0;
		loop(maxWarpFr){
			yield;
			warpFr++;
		}

		// 待ち
		SetEnemyMarker(false);
		warpSt=2;
		SetX(cenX);
		SetY(minY-200);
		wait(fr-maxWarpFr*2);

		// 出現
		SetEnemyMarker(true);
		alternative(area)
		case(1){
			SetX(rand(minX+60,cenX-60));
			SetY(minY+100+rand(-20,20));
		}
		case(2){
			SetX(rand(cenX+60,maxX-60));
			SetY(minY+100+rand(-20,20));
		}
		others{
			SetX(cenX);
			SetY(minY+100);
		}
		warpSt=3;
		warpFr=0;
		loop(maxWarpFr){
			yield;
			warpFr++;
		}
		warpSt=0;

	}

	// 初期移動＋対称弾 --------------------------------------------------------
	task SymmetryShot{

		// 移動
		let x=cenX;
		let y=maxY+16;
		let powerA=200;
		let angleA=-90;
		let powerB=50;
		let angleB=90;
		let fr=30;
		let subAlpha=255/fr;
		let accScale=0.1;
		SetMovePositionHermite(x,y,powerA,angleA,powerB,angleB,fr);
		Explosion01(x,y,255/30,0.1,fr);
		wait(90);

		y=minY+80;
		fr=150;
		SetMovePosition02(x,y,150);

		// 対称弾
		let num=30;
		let way=[2,2,5,9];
		let minSpeed=0.8;
		let maxSpeed=1.6+0.4*Lv;
		let wideAngle=45;
		let numAngle=(270-wideAngle)/(num-1);
		let wayAngle=wideAngle/(way[Lv]-1);
		let baseAngle=[0,180];
		let graphic=[RED04,BLUE04];
		let delay=5;
		let assign=[1,-1];
		fr=4;

		ascent(let i in 0 .. num){
			SetShotDirectionType(ABSOLUTE);
			ascent(let j in 0 .. way[Lv]){
				let speed=rand(minSpeed,maxSpeed);
				ascent(let k in 0 .. 2){
					let angle=baseAngle[k]+(numAngle*i+wayAngle*j)*assign[k];
					CreateShot01(GetX,GetY,speed,angle,graphic[k],delay);
				}
			}
			wait(fr);
		}

	}

	// 待ち --------------------------------------------------------------------
	function wait(let fr){

		loop(fr){yield;}

	}

	// -------------------------------------------------------------------------
	@Finalize{

		// ロードしたファイルを削除
		DeleteGraphic(imgBoss);

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// ボス描画
		SetTexture(imgBoss);
		if(GetSpeed==0){SetGraphicRect(1,1,64,64);}
		else if(GetAngle>-90&&GetAngle<=90){SetGraphicRect(192,1,255,64);}
		else {SetGraphicRect(128,1,191,64);}
		setDrawData;
		SetColor(255,255,255);
		DrawGraphic(GetX,GetY);

	}

	// 描画倍率 ----------------------------------------------------------------
	function setDrawData{

		alternative(warpSt)
		case(1){
			let scX=1;
			let scY=1;
			let halfWarpFr=maxWarpFr/2;
			if(warpFr<halfWarpFr){
				scX=1+0.5/halfWarpFr*warpFr;
				scY=1-0.9/halfWarpFr*warpFr;
			}
			else{
				scX=1.5-1.5/halfWarpFr*(warpFr-halfWarpFr);
				scY=0.1+2.4/halfWarpFr*(warpFr-halfWarpFr);
			}
			SetGraphicScale(scX,scY);
			SetAlpha(255);
		}
		case(2){
			SetGraphicScale(1,1);
			SetAlpha(0);
		}
		case(3){
			let scX=1;
			let scY=1;
			let halfWarpFr=maxWarpFr/2;
			if(warpFr<halfWarpFr){
				scX=1.5/halfWarpFr*warpFr;
				scY=2.5-2.4/halfWarpFr*warpFr;
			}
			else{
				scX=1.5-0.5/halfWarpFr*(warpFr-halfWarpFr);
				scY=0.1+0.9/halfWarpFr*(warpFr-halfWarpFr);
			}
			SetGraphicScale(scX,scY);
			SetAlpha(255);
		}
		others{
			SetGraphicScale(1,1);
			SetAlpha(255);
		}

	}

	// 共通関数読み込み
	#include_function ".\INCLUDE\patternShot.dnh"
	#include_function ".\INCLUDE\library_request.dnh"

}
