#東方弾幕風
#Title[Medicine - スペルカード1]
#Text[ステージ1C ボス
メディスン・メランコリー

下記以外のスタート＝Easy
スキップ＋スタート＝Normal
ユーザー＋スタート＝Hard
ｽｷｯﾌﾟ＋ﾕｰｻﾞｰ＋ｽﾀｰﾄ＝Lunatic]
#Image[]
#BackGround[Default]
#Player[FREE]
#ScriptVersion[2]

script_enemy_main{

	// 共通関数読み込み
	#include_function ".\INCLUDE\Enemy.dnh"

	// 画像及び効果音ファイル
	let imgBoss=dotBossMedicine;
	let imgShadow=dotCircle6s;
	let seHidden=seShadowHidden;
	let seSudden=seShadowSudden;

	// 難易度
	Debug_SetLevel;
	let Lv=GetCommonDataDefault("Level",0);

	let phase=0;
	let nextLife=[500,400,300,200];
	let nextTime=[59,44,29,14];

	// -------------------------------------------------------------------------
	@Initialize{

		// 画像及び効果音をロード
		LoadGraphic(imgBoss);
		LoadGraphic(imgShadow);
		LoadSE(seHidden);
		LoadSE(seSudden);

		// スペルカード設定（カード名、スコア、制限時間、弾削除範囲等）
		SetText("＊符「＊＊＊」");
		SetScore(100000);
		SetTimer(65);
		SetShotAutoDeleteClip(20,20,20,20);
		SetEnemyMarker(true);

		// ボスステータス設定（ライフ、ダメージ率等）
		SetLife(500);
		SetDamageRate(15,10);

		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		// 当たり判定（自弾,体当たり）
		Collision(32,24);

		// カウンタ加算
		m_nCount++;

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		SetInvincibility(242);
		_Wait(2);

		// 初期移動
		let fr=120;
		let x=cenX;
		let y=minY+120+RandBlur(1);
		SetMovePosition02(x,y,fr);
		_Wait(fr);

		// 発動
		fr=120;
		Concentration01(fr);
		_Wait(fr);

		// 使い魔召喚
		SummonShadow;
		_Wait(60);

		let assign=1;

		loop{

			// 移動
			loop(2){
				_Wait(60);
				move(60);
				_Wait(60);
			}

			// 全方向弾
			_RoundShot(assign);
			_Wait(60);

			assign*=-1;

		}

	}

	// 使い魔召喚 --------------------------------------------------------------
	task SummonShadow{

		let baseAngle=-90;
		CreateEnemyFromScript("Shadow",GetX,GetY,0,baseAngle,0);
		while(phase<Lv){
			if(GetLife<=nextLife[phase+1]||GetTimer<=nextTime[phase+1]){
				let angle=baseAngle+3*m_nCount;
				phase++;
				CreateEnemyFromScript("Shadow",GetX,GetY,0,angle,phase);
			}
			yield;
		}

	}

	// 全方向弾 ----------------------------------------------------------------
	function _RoundShot(let assign){

		let num=1+Lv;
		let way=[32,36,44,56];
		let baseSpeed=1.2;
		let numSpeed=0.3;
		let baseAngle=0;
		let numAngle=360/way[Lv]/(1+Lv)*assign;
		let graphic=RED01;
		let delay=30;

		SetShotDirectionType(PLAYER);
		ascent(let i in 0 .. num){
			let speed=baseSpeed+numSpeed*i;
			let angle=baseAngle+numAngle*i;
			RoundShot01(GetX,GetY,speed,angle,way[Lv],graphic,delay);
		}

	}

	// 移動 --------------------------------------------------------------------
	function move(let fr){

		let x=GetX;
		let y=GetY;
		let mx=rand(40,80);
		let my=rand(0,20);
		if(x>=GetPlayerX){
			if(x-mx>=minX+100){mx=-mx;}
		}
		else{
			if(x+mx>=maxX-100){mx=-mx;}
		}
		if(y>=minY+120){my=-my;}
		x+=mx;
		y+=my;
		SetMovePosition02(x,y,fr);

	}

	// -------------------------------------------------------------------------
	@Finalize{

		// アイテム放出
		DropItem(16,80);

		// ロードしたファイルを削除
		DeleteGraphic(imgBoss);
		DeleteGraphic(imgShadow);
		DeleteSE(seHidden);
		DeleteSE(seSudden);

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// ボス描画
		let x=0;
		let y=0;
		let sLength=128;
		SetAlpha(255);
		SetColor(255,255,255);
		_DrawChrRectSqr(imgBoss,GetX,GetY,x,y,sLength);

	}

}

// 使い魔 ----------------------------------------------------------------------
script_enemy Shadow{

	// 共通関数読み込み
	#include_function ".\INCLUDE\Shadow.dnh"

	// 画像及び効果音ファイル
	let imgShadow=dotCircle6s;
	let seHidden=seShadowHidden;
	let seSudden=seShadowSudden;

	let Lv=GetCommonDataDefault("Level",0);
	let assign=GetArgument;

	// -------------------------------------------------------------------------
	@Initialize{

		// ステータス設定（ライフ、ダメージ率等）
		SetLife(150);
		SetDamageRateExDelay(30,15,10,50,50);

		// 実体化時の光
		LightShadow;

		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		// 当たり判定（自弾,体当たり）
		if(!m_bHidden){Collision(24,18);}

		// 使い魔基本処理
		BehaviorShadow(seHidden,seSudden);

		// カウンタ加算
		m_nCount++;

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		let gapLength=150;
		let compY=0.4;
		let baseAngle=GetAngle+360/(Lv+1)*assign;
		let x=GetGapX(GetEnemyX,gapLength,baseAngle);
		let y=GetGapY(GetEnemyY,gapLength*compY,baseAngle);
		SetX(x);
		SetY(y);

		yield;

		// 平行狙い弾
		Concentration01(30);
		ParallelShot;


		// 移動
		loop{
			let angle=baseAngle+3*m_nCount;
			x=GetGapX(GetEnemyX,gapLength,angle);
			y=GetGapY(GetEnemyY,gapLength*compY,angle);
			SetX(x);
			SetY(y);
			yield;
		}

	}

	// 平行狙い弾 --------------------------------------------------------------
	task ParallelShot{

		let graphic=BLUE12;
		let fr=7;
		if(Lv>=2){fr=6;}

		loop{

			let speed=rand(1.5,2.5);
			let angle=90;
			if(Lv<2){
				if(GetPlayerY<GetY){angle=-90;}
			}
			else{angle=GetGapAngle(GetEnemyX,GetEnemyY,GetPlayerX,GetPlayerY);}

			SetShotDirectionType(ABSOLUTE);
			CreateShot01(GetX,GetY,speed,angle,graphic,0);
			_Wait(fr);

		}

	}

	// -------------------------------------------------------------------------
	@Finalize{

		// 弾消し
		DestructShadow(40);

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// 本体描画
		let x=64;
		let y=0;
		let sLength=64;
		let angle=2*m_nCount;
		let scale=0.8;
		SetColor(255,255,255);
		DrawShadow(imgShadow,x,y,sLength,angle,scale,scale);

	}

}
