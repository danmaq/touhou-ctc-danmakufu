#東方弾幕風
#Title[Medicine - 通常攻撃1]
#Text[ステージ1C ボス
メディスン・メランコリー

下記以外のスタート＝Easy
スキップ＋スタート＝Normal
ユーザー＋スタート＝Hard
ｽｷｯﾌﾟ＋ﾕｰｻﾞｰ＋ｽﾀｰﾄ＝Lunatic]
#Image[]
#BackGround[Default]
#Player[FREE]
#ScriptVersion[2]

script_enemy_main{

	// 共通関数読み込み
	#include_function ".\INCLUDE\Enemy.dnh"
	#include_function ".\index_UserShot.dnh"

	// 画像及び効果音ファイル
	let imgBoss=dotBossMedicine;
	let imgShadow=dotCircle6s;
	let userShot=shotLight;

	// 難易度
	Debug_SetLevel;
	let Lv=GetCommonDataDefault("Level",0);

	// -------------------------------------------------------------------------
	@Initialize{

		// 画像及び効果音をロード
		LoadGraphic(imgBoss);
		LoadGraphic(imgShadow);
		LoadUserShotData(userShot);

		// スペルカード設定（カード名、スコア、制限時間、弾削除範囲等）
		SetTimer(33);
		SetShotAutoDeleteClip(20,20,20,20);
		SetEnemyMarker(true);

		// ボスステータス設定（ライフ、ダメージ率等）
		SetLife(2500);
		SetDamageRate(100,50);
		SetX(cenX);
		SetY(minY+110+rand(-1,1));

		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		// 当たり判定（自弾,体当たり）
		Collision(32,24);

		// カウンタ加算
		m_nCount++;

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		SetInvincibility(62);
		_Wait(2);

		// 発動
		ExplosionBoss;
		_Wait(60);

		loop{

			loop(2){

				// 使い魔召喚
				SummonShadow(-1);
				SummonShadow(1);
				_Wait(60);

				// 移動
				move(60);
				_Wait(60);

			}

			// 隠れ弾
			HiddenShot(-1);
			HiddenShot(1);
			_Wait(180);

			// 移動
			move(60);
			_Wait(60);

		}

	}

	// 使い魔召喚 --------------------------------------------------------------
	function SummonShadow(let assign){

		let way=1+Lv;
		let speed=5;
		let wayAngle=30*assign;
		let baseAngle=90+90*assign-wayAngle*(way-1)/2;

		ascent(let i in 0 .. way){
			let angle=baseAngle+wayAngle*i;
			CreateEnemyFromScript("Shadow",GetX,GetY,speed,angle,0);
		}

	}

	// 隠れ弾 ------------------------------------------------------------------
	task HiddenShot(let assign){

		let gapLength=70;
		let gapAngle=GetGapAngle(GetX,GetY,cenX,cenY)-90*assign;
		let x=GetGapX(GetX,gapLength,gapAngle);
		let y=GetGapY(GetY,gapLength,gapAngle);
		let way=[19,22,30,32];
		let num=8;
		let minSpeed=1.5;
		let maxSpeed=3.5;
		let baseAngle=gapAngle-165*assign;
		let wayAngle=330/(way[Lv]-1)*assign;
		let graphic=2;
		let delay=15;
		let fr=3;

		ascent(let i in 0 .. way[Lv]){
			let angle=baseAngle+wayAngle*i;
			SetShotDirectionType(ABSOLUTE);
			LineShot(x,y,minSpeed,maxSpeed,angle,num,graphic,delay);
			_Wait(fr);
		}

	}

	// 移動 --------------------------------------------------------------------
	task move(let fr){

		let x=GetX;
		let y=GetY;
		let mx=rand(40,80);
		let my=rand(0,20);
		if(x>=GetPlayerX){
			if(x-mx>=minX+100){mx=-mx;}
		}
		else{
			if(x+mx>=maxX-100){mx=-mx;}
		}
		if(y>=minY+110){my=-my;}
		x+=mx;
		y+=my;
		SetMovePosition02(x,y,fr);

	}

	// -------------------------------------------------------------------------
	@Finalize{

		// ロードしたファイルを削除
		DeleteGraphic(imgBoss);
		DeleteGraphic(imgShadow);

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// ボス描画
		let x=0;
		let y=0;
		let sLength=128;
		SetAlpha(255);
		SetColor(255,255,255);
		_DrawChrRectSqr(imgBoss,GetX,GetY,x,y,sLength);

	}

}

// 使い魔 ----------------------------------------------------------------------
script_enemy Shadow{

	// 共通関数読み込み
	#include_function ".\INCLUDE\Shadow.dnh"

	// 画像及び効果音ファイル
	let imgShadow=dotCircle6s;
	let seHidden=seMute;
	let seSudden=seMute;

	let Lv=GetCommonDataDefault("Level",0);

	// -------------------------------------------------------------------------
	@Initialize{

		// ステータス設定（ライフ、ダメージ率等）
		SetLife(100);
		SetDamageRateExDelay(30,100,50,33,33);

		// 実体化時の光
		LightShadow;

		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		// 画面外で消滅
		GoneEx(40);

		// 当たり判定（自弾,体当たり）
		if(!m_bHidden){Collision(24,18);}

		// 使い魔基本処理
		BehaviorShadow(seHidden,seSudden);

		// カウンタ加算
		m_nCount++;

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		yield;

		// 速度設定
		setSpeed;
		_Wait(60);

		let fr=[120,100,80,40];

		loop{

			// 自機狙い扇状弾
			SearchWideShot;
			_Wait(fr[Lv]);

		}

	}

	// 自機狙い扇状弾 ----------------------------------------------------------
	function SearchWideShot{

		let way=2;
		let speed=1.2;
		let angle=0;
		let wideAngle=2;
		let graphic=RED12;
		let delay=0;

		SetShotDirectionType(PLAYER);
		WideShot01(GetX,GetY,speed*0.97,angle,wideAngle,way,graphic,delay);
		CreateShot01(GetX,GetY,speed,angle,graphic,delay);

	}

	// 速度設定 ----------------------------------------------------------------
	task setSpeed{

		let fr=30;
		let speed=GetSpeed;
		let maxSpeed=0.8;
		let accSpeed=(maxSpeed-speed)/fr;

		loop(fr){
			speed+=accSpeed;
			SetSpeed(speed);
			yield;
		}

	}

	// -------------------------------------------------------------------------
	@Finalize{

		// 弾消し
		DestructShadow(40);

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// 本体描画
		let x=64;
		let y=0;
		let sLength=64;
		let angle=2*m_nCount;
		let scale=0.8;
		SetColor(255,255,255);
		DrawShadow(imgShadow,x,y,sLength,angle,scale,scale);

	}

}
