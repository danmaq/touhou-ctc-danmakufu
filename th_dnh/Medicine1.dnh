script_enemy_main{

	// 画像及び効果音ファイル
	#include_function ".\IMAGE\CHAR\index.dnh"
	#include_function ".\index_UserShot.dnh"
	let imgBoss=dotBossSample;
	let imgEnemy=dotCircle6s;
	let userShot=shotMedicine;

	// 座標設定
	let cenX=GetCenterX;
	let cenY=GetCenterY;
	let minX=GetClipMinX;
	let maxX=GetClipMaxX;
	let minY=GetClipMinY;
	let maxY=GetClipMaxY;

	// 難易度
	Debug_SetLevel;
	let Lv=GetCommonDataDefault("Level",0);

	// -------------------------------------------------------------------------
	@Initialize{

		// 画像及び効果音をロード
		LoadGraphic(imgBoss);
		LoadGraphic(imgEnemy);
		LoadUserShotData(userShot);

		// スペルカード設定（カード名、スコア、制限時間、弾削除範囲等）
		SetTimer(33);
		SetShotAutoDeleteClip(20,20,20,20);
		SetEnemyMarker(true);

		// ボスステータス設定（ライフ、ダメージ率Shot%,Bomb%等）
		SetLife(2500);
		SetDamageRate(100,50);
		SetX(cenX);
		SetY(minY+110+rand(-1,1));

		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		// 当たり判定（A:自弾,B:体当たり）
		SetCollisionA(GetX,GetY,32);
		SetCollisionB(GetX,GetY,24);

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		SetInvincibility(62);
		wait(2);

		// 発動
		ExplosionBoss;
		wait(60);

		loop{

			loop(2){

				// 使い魔召喚
				SummonEnemy(-1);
				SummonEnemy(1);
				wait(60);

				// 移動
				move(60);
				wait(60);

			}

			// 隠れ弾
			HiddenShot(-1);
			HiddenShot(1);
			wait(180);

			// 移動
			move(60);
			wait(60);

		}

	}

	// 使い魔召喚 --------------------------------------------------------------
	function SummonEnemy(let assign){

		let way=1+Lv;
		let speed=5;
		let wayAngle=30*assign;
		let baseAngle=90+90*assign-wayAngle*(way-1)/2;

		ascent(let i in 0 .. way){
			let angle=baseAngle+wayAngle*i;
			CreateEnemyFromScript("Enemy",GetX,GetY,speed,angle,0);
		}

	}

	// 隠れ弾 ------------------------------------------------------------------
	task HiddenShot(let assign){

		let gapLength=70;
		let gapAngle=GetGapAngle(GetX,GetY,cenX,cenY)-90*assign;
		let x=GetGapX(GetX,gapLength,gapAngle);
		let y=GetGapY(GetY,gapLength,gapAngle);
		let way=[19,22,30,32];
		let num=8;
		let minSpeed=1.5;
		let maxSpeed=3.5;
		let baseAngle=gapAngle-165*assign;
		let wayAngle=330/(way[Lv]-1)*assign;
		let graphic=2;
		let delay=15;
		let fr=3;

		ascent(let i in 0 .. way[Lv]){
			let angle=baseAngle+wayAngle*i;
			SetShotDirectionType(ABSOLUTE);
			LineShot(x,y,minSpeed,maxSpeed,angle,num,graphic,delay);
			wait(fr);
		}

	}

	// 移動 --------------------------------------------------------------------
	task move(let fr){

		let x=GetX;
		let y=GetY;
		let mx=rand(40,80);
		let my=rand(0,20);
		if(x>=GetPlayerX){
			if(x-mx>=minX+100){mx=-mx;}
		}
		else{
			if(x+mx>=maxX-100){mx=-mx;}
		}
		if(y>=minY+110){my=-my;}
		x+=mx;
		y+=my;
		SetMovePosition02(x,y,fr);

	}

	// 待ち --------------------------------------------------------------------
	function wait(let fr){

		loop(fr){yield;}

	}

	// -------------------------------------------------------------------------
	@Finalize{

		// ロードしたファイルを削除
		DeleteGraphic(imgBoss);
		DeleteGraphic(imgEnemy);

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// ボス描画
		SetTexture(imgBoss);
		if(GetSpeed==0){SetGraphicRect(1,1,64,64);}
		else if(GetAngle>-90&&GetAngle<=90){SetGraphicRect(192,1,255,64);}
		else {SetGraphicRect(128,1,191,64);}
		SetAlpha(255);
		SetColor(255,255,255);
		DrawGraphic(GetX,GetY);

	}

	// 共通関数読み込み
	#include_function ".\INCLUDE\patternShot.dnh"
	#include_function ".\INCLUDE\library_request.dnh"

}

// 使い魔 ----------------------------------------------------------------------
script_enemy Enemy{

	// 画像及び効果音ファイル
	#include_function ".\IMAGE\CHAR\DOT\index.dnh"
	let imgEnemy=dotCircle6s;

	// 座標設定
	let cenX=GetCenterX;
	let cenY=GetCenterY;
	let minX=GetClipMinX;
	let maxX=GetClipMaxX;
	let minY=GetClipMinY;
	let maxY=GetClipMaxY;

	let Lv=GetCommonDataDefault("Level",0);
	let drawAngle=0;

	// -------------------------------------------------------------------------
	@Initialize{

		// ステータス設定（ライフ、自ダメ率Shot%,Bomb%,親ダメ率Shot%,Bomb%等）
		SetLife(100);
		SetDamageRateExDelay(30,100,50,33,33);

		// 光
		Light;

		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		// 回転
		drawAngle+=2;

		// 当たり判定（A:自弾,B:体当たり）
		if(GetKeyState(VK_SLOWMOVE)==KEY_PULL||GetKeyState(VK_SLOWMOVE)==KEY_FREE){
			SetCollisionA(GetX,GetY,24);
			SetCollisionB(GetX,GetY,18);
		}

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		yield;

		// 画面外チェック
		ClipCheck;

		// 速度設定
		setSpeed;
		wait(60);

		let fr=[120,100,80,40];

		loop{

			// 自機狙い扇状弾
			SearchWideShot;
			wait(fr[Lv]);

		}

	}

	// 自機狙い扇状弾 ----------------------------------------------------------
	function SearchWideShot{

		let way=2;
		let speed=1.2;
		let angle=0;
		let wideAngle=2;
		let graphic=RED12;
		let delay=0;

		SetShotDirectionType(PLAYER);
		WideShot01(GetX,GetY,speed*0.97,angle,wideAngle,way,graphic,delay);
		CreateShot01(GetX,GetY,speed,angle,graphic,delay);

	}

	// 速度設定 ----------------------------------------------------------------
	task setSpeed{

		let fr=30;
		let speed=GetSpeed;
		let maxSpeed=0.8;
		let accSpeed=(maxSpeed-speed)/fr;

		loop(fr){
			speed+=accSpeed;
			SetSpeed(speed);
			yield;
		}

	}

	// 画面外チェック ----------------------------------------------------------
	task ClipCheck{

		let outLength=GetGapLength(minX,minY,cenX,cenY)+40;
		loop{
			let Length=GetGapLength(GetX,GetY,cenX,cenY);
			if(Length>outLength){VanishEnemy;}
			yield;
		}

	}

	// 光 ----------------------------------------------------------------------
	task Light{

		loop{
			if(GetKeyState(VK_SLOWMOVE)==KEY_PULL||GetKeyState(VK_SLOWMOVE)==KEY_FREE){
				Light_(WHITE01);
			}
			wait(3);
		}

	}

	task Light_(let graphic){

		// 初期設定 ----------------------------------------
		let obj=Obj_Create(OBJ_SHOT);
		let delay=15;

		Obj_SetX(obj,GetX);
		Obj_SetY(obj,GetY);
		ObjShot_SetDelay(obj,delay);
		ObjShot_SetGraphic(obj,graphic);
		Obj_SetAlpha(obj,0);
		Obj_SetCollisionToPlayer(obj,false);
		ObjShot_SetBombResist(obj,true);

		// メイン処理 --------------------------------------
		loop(delay){
			if(GetKeyState(VK_SLOWMOVE)==KEY_PUSH||GetKeyState(VK_SLOWMOVE)==KEY_HOLD){
				break;
			}
			yield;
		}
		Obj_Delete(obj);

	}

	// 待ち --------------------------------------------------------------------
	function wait(let fr){

		loop(fr){yield;}

	}

	// -------------------------------------------------------------------------
	@Finalize{

		if(GetLife<=0){
			DeleteEnemyShotToItemInCircle(ALL,GetX,GetY,40);
		}

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// 本体描画
		SetTexture(imgEnemy);
		SetGraphicRect(64,0,128,64);
		if(GetKeyState(VK_SLOWMOVE)==KEY_PUSH||GetKeyState(VK_SLOWMOVE)==KEY_HOLD){
			SetAlpha(127);
		}
		else{
			SetAlpha(255);
		}
		SetColor(255,255,255);
		SetGraphicScale(0.8,0.8);
		SetGraphicAngle(0,0,drawAngle);
		DrawGraphic(GetX,GetY);

	}

	// 共通関数読み込み
	#include_function ".\INCLUDE\patternShot.dnh"
	#include_function ".\INCLUDE\library_request.dnh"

}
