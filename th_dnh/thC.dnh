//====================================================================
//
//	東方夢終劇 〜 Concealed the Conclusion
//
//		(c)2005 danmaq All right reserved.
//
//====================================================================
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	ヘッダ
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

#東方弾幕風[Stage]
#Title[東方夢終劇 〜 Concealed the Conclusion]
#Text[THC_VERSION_006]
#ScriptVersion[2]
#Player[FREE]
#BGM[]


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	スクリプト部
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

script_stage_main{


//////////////////////////////////////////////////////////////////////
//	ライブラリのインクルード
//////////////////////////////////////////////////////////////////////

#include_function ".\INCLUDE\Stage.dnh"


//////////////////////////////////////////////////////////////////////
//	メンバ変数
//////////////////////////////////////////////////////////////////////

	let m_nPhaseNow = 0;
	let m_nStageNow = 0;
	let m_nScenario = 0;

	let m_aszStageDefaultLoadFileListGraphic = [];
	let m_aszStageDefaultLoadFileListSE = [ seDamage, sePower, seShadow ];


//////////////////////////////////////////////////////////////////////
//	マイクロスレッド
//////////////////////////////////////////////////////////////////////

	//	メイン
	task TMain(){
		yield;
		SetPlayerDefaultPosition();
		SetPhase( 0 );
		MainMenu();
	}


//////////////////////////////////////////////////////////////////////
//	初期処理
//////////////////////////////////////////////////////////////////////

	@Initialize{
//		CreateDebugWindow();
//		OutputDebugString( 0, "KEY_PUSH", KEY_PUSH );

		//	ここで読むファイルは必要最低限度で
		LoadGraphic( imgMapBlack );
		ExpertEx( m_bDebug, 1, 3 );
		TMain();
	}


//////////////////////////////////////////////////////////////////////
//	毎フレーム呼ばれるメインループ
//////////////////////////////////////////////////////////////////////

	@MainLoop{
		yield;
		alternative( m_nStage )
		case( 0 ){ MainMenuLoop(); }
		case( 1 ){ Stage1Loop(); }
		if( GetPhase() == PROGRESS_PHASE ){ MovePlayerDefaultPosition(); }
		m_nCount++;
		m_nPhaseNow = m_nCount - m_nPhaseCount;
		m_nStageNow = m_nCount - m_nStageCount;
	}


//////////////////////////////////////////////////////////////////////
//	終了処理
//////////////////////////////////////////////////////////////////////

	@Finalize{}


//////////////////////////////////////////////////////////////////////
//	背景絵画
//////////////////////////////////////////////////////////////////////

	@BackGround{
		if( GetPhase == -1 ){ return; }

		//	ステージごとの処理呼び出し
		alternative( m_nStage )
		case( 0 ){ MainMenuDrawBackGround(); }
		case( 1 ){ Stage1DrawBackGround(); }
	}


//////////////////////////////////////////////////////////////////////
//	下位レイヤ絵画
//////////////////////////////////////////////////////////////////////

	@DrawBottomObject{
		if( GetPhase == -1 ){ return; }

		//	ステージごとの処理呼び出し
		alternative( m_nStage )
		case( 0 ){ MainMenuDrawBottomObject(); }
		case( 1 ){ Stage1DrawBottomObject(); }
	}


//////////////////////////////////////////////////////////////////////
//	上位レイヤ絵画
//////////////////////////////////////////////////////////////////////

	@DrawTopObject{
		if( GetPhase == -1 ){ return; }

		//	ロード中はプログレスバーを表示
		if( GetLoadProgressPercentage() != -1 ){ DrawLoadProgress( imgSystemProgress, imgMapBlack ); }

		//	ステージごとの処理呼び出し
		alternative( m_nStage )
		case( 0 ){ MainMenuDrawTopObject(); }
		case( 1 ){ Stage1DrawTopObject(); }
	}


//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
//	スクリプトここまで
//--------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////

}
