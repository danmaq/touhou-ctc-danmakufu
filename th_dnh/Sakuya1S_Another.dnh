#東方弾幕風
#Title[Sakuya - スペルカード1（別案）]
#Text[ステージ2A 中ボス
十六夜 咲夜（Lunatic）

処理の重ささえなければ
こっちの方が面白いのだが
Graze増えすぎるからダメか]
#Image[]
#BackGround[Default]
#Player[FREE]
#ScriptVersion[2]

script_enemy_main{

	// 画像及び効果音ファイル
	#include_function ".\IMAGE\CHAR\index.dnh"
	let imgBoss=dotBossSample;

	// 座標設定
	let cenX=GetCenterX;
	let cenY=GetCenterY;
	let minX=GetClipMinX;
	let maxX=GetClipMaxX;
	let minY=GetClipMinY;
	let maxY=GetClipMaxY;

	// 難易度
	Debug_SetLevel;
	let Lv=GetCommonDataDefault("Level",0);

	// -------------------------------------------------------------------------
	@Initialize{

		// 画像及び効果音をロード
		LoadGraphic(imgBoss);

		// スペルカード設定（カード名、スコア、制限時間、弾削除範囲等）
		SetText("＊符「＊＊＊」");
		SetScore(100000);
		SetTimer(61);
		SetShotAutoDeleteClip(20,20,20,20);
		SetEnemyMarker(true);

		// ボスステータス設定（ライフ、ダメージ率Shot%,Bomb%等）
		SetLife(500);
		SetDamageRate(15,10);

		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		// 当たり判定（A:自弾,B:体当たり）
		SetCollisionA(GetX,GetY,32);
		SetCollisionB(GetX,GetY,24);

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		SetInvincibility(182);
		wait(2);

		// 初期移動
		let fr=180;
		let x=cenX;
		let y=minY+120;
		SetMovePosition02(x,y,fr);
		wait(fr);

		let turn=0;

		loop{

			fr=15;
			let count=180;

			// ランダム狙い弾
			loop(12){
				RandomSearchShot(count,turn);
				wait(fr);
				count-=fr;
				turn++;
				if(count==90){Concentration01(90);}
			}

			// 時間停止
			TimeStop(60,1,1,1);
			wait(60);

		}

	}

	// ランダム狙い弾 ----------------------------------------------------------
	task RandomSearchShot(
		let count,
		let turn
	){

		let way=120;
		let speed=1.2;
		let wayAngle=360/way;
		let baseAngle=-90+wayAngle*0.45*turn;

		ascent(let i in 0 .. way){
			let angle=baseAngle+wayAngle*i;
			SearchShot(speed,angle,count);
		}

	}

	// 狙い弾 ------------------------------------------------------------------
	task SearchShot(
		let speed,
		let angle,
		let count
	){

		// 初期設定 ----------------------------------------
		let obj=Obj_Create(OBJ_SHOT);
		let delay=0;

		Obj_SetX(obj,GetX);
		Obj_SetY(obj,GetY);
		Obj_SetSpeed(obj,speed);
		Obj_SetAngle(obj,angle);
		ObjShot_SetDelay(obj,delay);
		ObjShot_SetGraphic(obj,PURPLE32);

		// メイン処理 --------------------------------------
		loop{
			if(Obj_BeDeleted(obj)){break;}
			count--;
			if(count==0){break;}
			yield;
		}

		if(!Obj_BeDeleted(obj)&&rand(0,100)<66.6){
			ObjShot_SetGraphic(obj,GREEN32);
			let fr=45;
			let accAngle=720/fr;
			loop(fr){
				if(Obj_BeDeleted(obj)){break;}
				angle+=accAngle;
				Obj_SetAngle(obj,angle);
				yield;
			}
			if(!Obj_BeDeleted(obj)){
				let speed_=4;
				let angle_=GetGapAngle(Obj_GetX(obj),Obj_GetY(obj),GetPlayerX,GetPlayerY);
				let graphic_=GREEN32;
				CreateShot01(Obj_GetX(obj),Obj_GetY(obj),speed_,angle_,graphic_,0);
				Obj_Delete(obj);
			}
		}

	}

	// 移動 --------------------------------------------------------------------
	function move(let fr){

		let x=GetX;
		let y=GetY;
		let mx=rand(20,40);
		let my=rand(0,20);
		if(x>=GetPlayerX){
			if(x-mx>=minX+100){mx=-mx;}
		}
		else{
			if(x+mx>=maxX-100){mx=-mx;}
		}
		if(y>=minY+120){my=-my;}
		x+=mx;
		y+=my;
		let power=GetGapLength(GetX,GetY,x,y)*2;
		let angle=GetGapAngle(GetX,GetY,x,y);
		SetMovePositionHermite(x,y,power,angle,0,0,fr);

	}

	// 待ち --------------------------------------------------------------------
	function wait(let fr){

		loop(fr){yield;}

	}

	// -------------------------------------------------------------------------
	@Finalize{

		// ロードしたファイルを削除
		DeleteGraphic(imgBoss);

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// ボス描画
		SetTexture(imgBoss);
		if(GetSpeed==0){SetGraphicRect(1,1,64,64);}
		else if(GetAngle>-90&&GetAngle<=90){SetGraphicRect(192,1,255,64);}
		else {SetGraphicRect(128,1,191,64);}
		SetAlpha(255);
		SetColor(255,255,255);
		DrawGraphic(GetX,GetY);

	}

	// 共通関数読み込み
	#include_function ".\INCLUDE\patternShot.dnh"
	#include_function ".\INCLUDE\library_request.dnh"

}
