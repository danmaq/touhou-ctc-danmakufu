#東方弾幕風
#Title[Meirin - 通常攻撃2]
#Text[ステージ1A ボス
紅 美鈴

下記以外のスタート＝Easy
スキップ＋スタート＝Normal
ユーザー＋スタート＝Hard
ｽｷｯﾌﾟ＋ﾕｰｻﾞｰ＋ｽﾀｰﾄ＝Lunatic]
#Image[]
#BackGround[Default]
#Player[FREE]
#ScriptVersion[2]

script_enemy_main{

	// 画像及び効果音ファイル
	#include_function ".\IMAGE\CHAR\index.dnh"
	let imgBoss=dotBossSample;
	let imgEnemy=dotCircle6s;

	// 座標設定
	let cenX=GetCenterX;
	let cenY=GetCenterY;
	let minX=GetClipMinX;
	let maxX=GetClipMaxX;
	let minY=GetClipMinY;
	let maxY=GetClipMaxY;

	// 難易度
	Debug_SetLevel;
	let Lv=GetCommonDataDefault("Level",0);

	// -------------------------------------------------------------------------
	@Initialize{

		// 画像及び効果音をロード
		LoadGraphic(imgBoss);
		LoadGraphic(imgEnemy);

		// スペルカード設定（カード名、スコア、制限時間、弾削除範囲等）
		SetTimer(37);
		SetShotAutoDeleteClip(20,20,20,20);
		SetEnemyMarker(true);

		// ボスステータス設定（ライフ、ダメージ率Shot%,Bomb%等）
		SetLife(2500);
		SetDamageRate(80,40);

		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		// 当たり判定（A:自弾,B:体当たり）
		SetCollisionA(GetX,GetY,32);
		SetCollisionB(GetX,GetY,24);

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		SetInvincibility(182);
		wait(2);

		// 初期移動
		let fr=180;
		let x=cenX;
		let y=minY+120+rand(-1,1);
		SetMovePosition02(x,y,fr);
		wait(fr);

		loop{

			// 使い魔召喚
			Concentration01(30);
			wait(30);
			SummonEnemy;
			wait(120);

			// 移動＋全方向弾1
			let num=[2,3,4,6];
			let fr1=[150,100,75,50];
			let fr2=[30,20,15,10];

			loop(num[Lv]){
				move(fr1[Lv]);
				wait(fr1[Lv]);
				RoundShot1;
				wait(fr2[Lv]);
			}

		}

	}

	// 使い魔召喚 --------------------------------------------------------------
	task SummonEnemy{

		let num=4;
		ascent(let i in 0 .. num){
			CreateEnemyFromScript("Enemy",GetX,GetY,0,0,i);
		}

	}

	// 全方向弾1 ---------------------------------------------------------------
	task RoundShot1{

		let speed=1.2;
		let angle=rand(0,360);
		let way=[60,70,90,100];
		let graphic=RED04;
		let delay=5;

		SetShotDirectionType(ABSOLUTE);
		RoundShot01(GetX,GetY,speed,angle,way[Lv],graphic,delay);

	}

	// 移動 --------------------------------------------------------------------
	function move(let fr){

		let x=GetX;
		let mx=rand(60,120);
		if(x<GetPlayerX){
			if(x+mx>maxX-80){x-=mx;}
			else{x+=mx;}
		}
		else{
			if(x-mx<minX+80){x+=mx;}
			else{x-=mx;}
		}
		let y=GetY;
		let my=rand(10,40);
		if(y<minY+120){y+=my;}
		else{y-=my;}
		let power=GetGapLength(GetX,GetY,x,y)*2;
		let angle=GetGapAngle(GetX,GetY,x,y);
		SetMovePositionHermite(x,y,power,angle,0,0,fr);

	}

	// 待ち --------------------------------------------------------------------
	function wait(let fr){

		loop(fr){yield;}

	}

	// -------------------------------------------------------------------------
	@Finalize{

		// ロードしたファイルを削除
		DeleteGraphic(imgBoss);
		DeleteGraphic(imgEnemy);

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// ボス描画
		SetTexture(imgBoss);
		if(GetSpeed==0){SetGraphicRect(1,1,64,64);}
		else if(GetAngle>-90&&GetAngle<=90){SetGraphicRect(192,1,255,64);}
		else {SetGraphicRect(128,1,191,64);}
		SetAlpha(255);
		SetColor(255,255,255);
		DrawGraphic(GetX,GetY);

	}

	// 共通関数読み込み
	#include_function ".\INCLUDE\patternShot.dnh"
	#include_function ".\INCLUDE\library_request.dnh"

}

// 使い魔 ----------------------------------------------------------------------
script_enemy Enemy{

	// 画像及び効果音ファイル
	#include_function ".\IMAGE\CHAR\DOT\index.dnh"
	let imgEnemy=dotCircle6s;

	// 座標設定
	let cenX=GetCenterX;
	let cenY=GetCenterY;
	let minX=GetClipMinX;
	let maxX=GetClipMaxX;
	let minY=GetClipMinY;
	let maxY=GetClipMaxY;

	let Lv=GetCommonDataDefault("Level",0);
	let drawAngle=0;
	let n=GetArgument;

	// -------------------------------------------------------------------------
	@Initialize{

		// ステータス設定（ライフ、自ダメ率Shot%,Bomb%,親ダメ率Shot%,Bomb%等）
		SetLife(200);
		SetDamageRateExDelay(60,80,40,50,50);

		// 光
		Light;

		Main;

	}

	// -------------------------------------------------------------------------
	@MainLoop{

		// 回転
		drawAngle+=2;

		// 当たり判定（A:自弾,B:体当たり）
		if(GetKeyState(VK_SLOWMOVE)==KEY_PULL||GetKeyState(VK_SLOWMOVE)==KEY_FREE){
			SetCollisionA(GetX,GetY,24);
			SetCollisionB(GetX,GetY,18);
		}

		yield;

	}

	// メイン処理 --------------------------------------------------------------
	task Main{

		yield;

		// 初期移動
		let num=4;
		let gapX=(maxX-minX-80)/(num-1);
		let x=minX+40+gapX*n;
		let y=[minY+100,minY+70,minY+70,minY+100];
		let power=GetGapLength(GetX,GetY,x,y[n])*3;
		let angle=GetGapAngle(GetX,GetY,x,y[n]);
		let fr=60;
		SetMovePositionHermite(x,y[n],power,angle,0,0,fr);
		wait(60);

		// 扇状弾1
		loop(3){
			wait(60);
			WideShot1;
			wait(60);
		}

		// 移動
		let x_=GetX+rand(-60,60);
		let y_=maxY+40;
		let speed=1;
		fr=trunc(GetGapLength(GetX,GetY,x_,y_)/speed*1.1);
		SetMovePosition01(x_,y_,speed);
		wait(fr);

		// 消滅
		VanishEnemy;

	}

	// 扇状弾1 -----------------------------------------------------------------
	task WideShot1{

		let x=GetX;
		let y=GetY;
		let num=10;
		let way=[1,3,5,7];
		let speed=[3, 3.4, 3.8, 4];
		let angle=GetAngleToPlayer;
		let wideAngle=[0,60,60,45];
		let graphic=BLUE31;
		let delay=5;
		let fr=4;

		ascent(let i in 0 .. num){
			SetShotDirectionType(ABSOLUTE);
			WideShot01(x,y,speed[Lv],angle,wideAngle[Lv],way[Lv],graphic,delay);
			wait(fr);
		}

	}

	// 光 ----------------------------------------------------------------------
	task Light{

		loop{
			if(GetKeyState(VK_SLOWMOVE)==KEY_PULL||GetKeyState(VK_SLOWMOVE)==KEY_FREE){
				Light_(WHITE01);
			}
			wait(3);
		}

	}

	task Light_(let graphic){

		// 初期設定 ----------------------------------------
		let obj=Obj_Create(OBJ_SHOT);
		let delay=15;

		Obj_SetX(obj,GetX);
		Obj_SetY(obj,GetY);
		ObjShot_SetDelay(obj,delay);
		ObjShot_SetGraphic(obj,graphic);
		Obj_SetAlpha(obj,0);
		Obj_SetCollisionToPlayer(obj,false);
		ObjShot_SetBombResist(obj,true);

		// メイン処理 --------------------------------------
		loop(delay){
			if(GetKeyState(VK_SLOWMOVE)==KEY_PUSH||GetKeyState(VK_SLOWMOVE)==KEY_HOLD){
				break;
			}
			yield;
		}
		Obj_Delete(obj);

	}

	// 待ち --------------------------------------------------------------------
	function wait(let fr){

		loop(fr){yield;}

	}

	// -------------------------------------------------------------------------
	@Finalize{

		if(GetLife<=0){
			DeleteEnemyShotToItemInCircle(ALL,GetX,GetY,40);
		}

	}

	// -------------------------------------------------------------------------
	@DrawLoop{

		// 本体描画
		SetTexture(imgEnemy);
		SetGraphicRect(64,0,128,64);
		if(GetKeyState(VK_SLOWMOVE)==KEY_PUSH||GetKeyState(VK_SLOWMOVE)==KEY_HOLD){
			SetAlpha(127);
		}
		else{
			SetAlpha(255);
		}
		SetColor(255,255,255);
		SetGraphicScale(0.8,0.8);
		SetGraphicAngle(0,0,drawAngle);
		DrawGraphic(GetX,GetY);

	}

	// 共通関数読み込み
	#include_function ".\INCLUDE\patternShot.dnh"
	#include_function ".\INCLUDE\library_request.dnh"

}
